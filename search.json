[{"path":"/articles/core-metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"CoRe Metabolomics","title":"CoRe Metabolomics","text":"Consumption-Release (CoRe) metabolomics experiment usually refers cell culture experiment metabolomics performed cell culture media.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (DMA) generate Log2Distance statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(tibble) library(rlang) library(ggfortify) library(stringr)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/core-metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"CoRe Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media. use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. CoRe experiment (CoRe) raw data available via metabolomics workbench study ST002226 exometabolomics HK2 ccRCC cell lines 786-O, 786-M1A, 786-M2A, OS-RC-2, OS-LM1 RFX-631 performed. Preview DF CoRe including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis. (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Media <- MetaProViz::ToyData(Data=\"CultureMedia_Raw\") MappingInfo <- MetaProViz::ToyData(Data=\"Cells_MetaData\") #This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG()"},{"path":"/articles/core-metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"CoRe Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/core-metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"CoRe Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. case CoRe experiment, blank samples ignored feature filtering, since often metabolites released cell naturally present culture media leading detection blank. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter TIC_Normalization refers Total Ion Count (TIC) normalisation, often used LC-MS derived metabolomics data. TIC_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, TIC normalisation used small number features (= metabolites), since TIC assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter MVI refers Missing Value Imputation (MVI) MVI = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter HotellinsConfidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations TIC part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.  Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed. Importantly, able specify CoRe experiment setting parameter CoRe=TRUE, case additional data processing steps applied:1. Blank sample: refers media samples cells cultured , used blank. detail, mean blank sample feature (= metabolite) substracted values measured sample feature. column “Condition” Experimental_design DF, need label blank samples “blank”.2. Growth factor growth rate: refers different conditions either based cell count protein quantification start experiment (t0) end experiment (t1) resulting growth factor (t1/t0). Otherwise, one can experimentally estimate growth rate condition. Ultimately, measure used normalize data, since amount growth impact consumption release metabolites media hence need account . information, set 1, yet aware may affect results. can pass additional information via parameter Input_SettingsInfo, passing column name CoRe_norm_factor Input_SettingsFile condition name CoRe_media Input_data file.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition HK2 CCM, can see based Hotellin’s T2 test, samples detected outliers first second round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see VizPCA() function. proceed, remove outlier: metabolomics, sometimes samples injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function ReplicateSum(), summarize save results.","code":"Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = Media[,-c(1:3)],                                                     SettingsFile_Sample = Media[,1:3],                                                     SettingsInfo = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                     CutoffCV = 30)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] #Prepare the input: Media_input <- Media%>%   subset(!Conditions==\"Pool\", select = -c(1:3))#remove pool samples and remove the information columns  Media_Metadata <- Media%>%   subset(!Conditions==\"Pool\", select = c(1:3))#remove pool samples and keep the information columns only  PreProcessing_res <-  MetaProViz::PreProcessing(InputData=Media_input,                                                 SettingsFile_Sample =Media_Metadata,                                                 SettingsInfo = c(Conditions = \"Conditions\",                                                                  Biological_Replicates = \"Biological_Replicates\",                                                                  CoRe_norm_factor = \"GrowthFactor\",                                                                  CoRe_media = \"blank\"),                                                 FeatureFilt = \"Modified\",                                                 FeatureFilt_Value = 0.8,                                                 TIC = TRUE,# As we have raw data we will perform total ion count norm                                                 MVI=TRUE, #We assume the values are not missing at random and perform half minimum MVI                                                 MVI_Percentage=50,                                                 HotellinsConfidence = 0.99,# We perform outlier testing using 0.99 confidence interval                                                 CoRe = TRUE)  # Now we can have a look at the results table: Media_Preprocessed <-  PreProcessing_res[[\"DF\"]][[\"Preprocessing_output\"]] #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> FeatureFiltering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs MVI is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> Total Ion Count (TIC) normalization: Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> 8 of variables have high variability (CV > 30) in the CoRe_media control samples. Consider checking the pooled samples to decide whether to remove these metabolites or not. #> Warning in CoReNorm(InputData = TICRes, SettingsFile_Sample = #> SettingsFile_Sample, : The CoRe_media samples MS51-06 were found to be #> different from the rest. They will not be included in the sum of the CoRe_media #> samples. #> CoRe data are normalised by substracting mean (blank) from each sample and multiplying with the CoRe_norm_factor #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360–378, doi:https://doi.org/10.1214/aoms/1177732979). HotellinsConfidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS51-06 #> Filtering round  2  Outlier Samples:  MS51-09 Media_Preprocessed <-Media_Preprocessed%>%   subset(!Outliers==\"Outlier_filtering_round_1\")"},{"path":"/articles/core-metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"CoRe Metabolomics","text":"Differential Metabolite Analysis (DMA) two conditions (e.g. Tumour versus Healthy) usually calculates Log2FC, p-value, adjusted p-value t-value. Yet, CoRe experiment normalized metabolite values can either negative value, metabolite consumed media, positive value, metabolite released cell culture media. Since can calculate Log2FC using negative values, calculate absolute difference mean Condition 1 versus mean Condition 2. absolute difference log2 transformed order make values comparable different metabolites, resulting Log2Dist. result doesn’t consider whether one product larger ; looks magnitude difference. reflect direction change two conditions multiply -1 C1 < C2. setting paramteter CoRe = TRUE, instead calclulating Log2FC, Log2 Distance calculated. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior DMA. Moreover, require Input_SettingsFile_Sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_SettingsFile_Metab containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_SettingsInfo parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) input use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values information conditions compared (even though recommend normalize data remove outliers prior DMA). example data seven different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A, 786-O, OSRC2, OSLM1B RFX631) hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview DMA results comparison 786-M1A versus HK2 cells. Using DMA results, can now use MetaProViz visualization module generate customized Volcano plots VizVolcano(). can see examples . Additionally individual comparison also summary table created including individual information metabolite consumption release based mean measured value: Preview consumption-release information metabolite cell line. can also visualize information assigning -1 released, +1 consumed 0 NA:","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <-  MetaProViz::DMA(InputData=Media_Preprocessed[,-c(1:6)],                                SettingsFile_Sample=Media_Preprocessed[,c(1:4)],                                SettingsInfo = c(Conditions=\"Conditions\", Numerator=NULL, Denominator = \"HK2\"),                                StatPval =\"aov\",                                StatPadj=\"fdr\",                                SettingsFile_Metab = MappingInfo,                                CoRe=TRUE)  #Inspect the DMA results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]] DMA_786O_vs_HK2 <- DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]  Shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition HK2 82.35 % of the metabolites follow a normal distribution and 17.65 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.71 % of the metabolites follow a normal distribution and 4.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M1A 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 88.57 % of the metabolites follow a normal distribution and 11.43 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSRC2 92.86 % of the metabolites follow a normal distribution and 7.14 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSLM1B 85.71 % of the metabolites follow a normal distribution and 14.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition RFX631 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 67.65% of metabolites the group variances are equal. #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov. CoRe_MetaInfo <- DMA_Annova[[\"Feature_Metadata\"]]"},{"path":"/articles/core-metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > DMA","what":"ORA using the DMA results","title":"CoRe Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. Given CoRe data important consider weather metabolite consumed released, sensible perform ORA metabolite cluster. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites. interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA DMA results, ensure metabolite names match KEGG IDs KEGG trivial names. general, PathwayFile requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells focusing pathways enriched consumed metabolites.","code":"#Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"DMA\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   DMA <- DMA_Annova[[\"DMA\"]][[comparison]]   DMA <- DMA[complete.cases(DMA),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway     tibble::remove_rownames()%>%     column_to_rownames(\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways    #Perform ORA: Here we use   DM_ORA_res[[comparison]] <- MetaProViz::ClusterORA(InputData=DMA,                                                      SettingsInfo=c(ClusterColumn=\"CoRe_specific\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                      RemoveBackground=FALSE,#we do not have any background                                                      PathwayFile=KEGG_Pathways,                                                      PathwayName=\"KEGG\",                                                      minGSSize=3,                                                      maxGSSize=1000) } #>   #Lets check how the results look like: MC_ORA_786M1A_vs_HK2_Consumed <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"DF\"]][[\"Consumed\"]]"},{"path":"/articles/core-metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"CoRe Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/core-metabolomics.html","id":"mca_core","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MCA_CoRe","title":"CoRe Metabolomics","text":"metabolite clustering method based logical regulatory rules sort metabolites metabolite clusters. additionally need intracellular samples corresponding CoRe samples. define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. Lastly, also take account CoRe direction, meaning metabolite : 1. “Released”, means released media conditions underlying comparison. 2. “Consumed”, means consumed media conditions underlying comparison. 3. “Released/Consumed”, means consumed/released one condition, whilst opposite occurs second condition underlying comparison. 4. “Detected”, means metabolite detected underlying comparison. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons (Intracellular CoRe), can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods backgroundMethod following 1.1. - 1.4. restrictive least restrictive:1.1. Intra&CoRe: stringend background setting lead small number metabolites.1.2. CoRe: Focus metabolite abundance CoRe.1.3. Intra: Focus metabolite abundance intracellular.1.4. Intra|CoRe: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “Core_UP”. three 6-state6-state4 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). order define group metabolite assigned , set two different thresholds. intracellular based differential metabolite abundance (Log2FC) significance (e.g. p.adj). CoRe data based Log2 Distance significance (e.g. p.adj). Log2FC recommend threshold 0.5 1, whilst Log2 Distance one check distance ranges base threshold . Regulatory rules: Metabolite Clustering Analysis: CoRe. Now can load corresponding pre-processed intracellular example data comparison 786M-1A versus HK2 (detailed pre-processing please see vignette “Standard Metabolomics”). MetaProViz::MCA_CoRe comparison 786-M1A versus HK2 cells intracellular CoRe samples. MetaProViz::MCA_CoRe Summary number metabolites per cluster. Now can also create Bargraphs clusters visualize results. create two summary bargraphs Regulation Grouping RG2 RG3:","code":"#Example of all possible flows: MCA_CoRe <- MetaProViz::MCA_rules(Method=\"CoRe\") #Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2<- MetaProViz::ToyData(Data=\"IntraCells_DMA\")  #Perform metabolite clustering: MCA_CoRe_res <- MetaProViz::MCA_CoRe(InputData_Intra =Intra_DMA_786M1A_vs_HK2%>%rownames_to_column(\"Metabolite\") ,                                      InputData_CoRe = DMA_786M1A_vs_HK2,                                      SettingsInfo_Intra=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=0.8),                                      SettingsInfo_CoRe=c(DirectionCol=\"CoRe\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=28),                                      FeatureID= \"Metabolite\",                                      BackgroundMethod=\"Intra&CoRe\",                                      FolderPath=NULL)  #Lets check how the results look like: MCA_res <- MCA_CoRe_res[[\"MCA_CoRe_Results\"]] ClusterSummary <- MCA_CoRe_res[[\"MCA_CoRe_Summary\"]]"},{"path":"/articles/core-metabolomics.html","id":"metalinksdb-metabolite-receptor-and-metabolite-transporter-sets","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MetaLinksDB metabolite-receptor and metabolite-transporter sets","title":"CoRe Metabolomics","text":"MetaLinks database manually curated database metabolite-receptor metabolite-transporter sets can used study connection metabolites receptors transporters (Farr et al. 2024). remove potential false positives decrease number putative metabolite-receptor interactions, filter MetalinksDB resource metabolites annotated present kidney, blood, urine HMDB known extracellular. Now can use information understand metabolites consumed 786-M1A cells Released HK2 cells connected specific receptors transporters bioRCM cluster “Both_DOWN (Released/Consumed)","code":"# Selection as described in ST2 of Farr_Dimitrov2024: MetaLinksDB_Res <- MetaProViz::LoadMetalinks(cell_location =c(\"Extracellular\"),                                               tissue_location = c(\"Kidney\", \"All Tissues\"),                                              biospecimen_location = c(\"Blood\",  \"Urine\"))  #Here we add a UniquePair column combining hmdb-protein connection, removing duplications originating from different PK resources MetaLinksDB_Res[[\"MetalinksDB_Select\"]] <- MetaLinksDB_Res[[\"MetalinksDB\"]]%>%                                            tidyr::unite(\"UniquePair\", c(\"hmdb\", \"gene_symbol\"), sep = \"_\", remove=FALSE)%>%                                            distinct(UniquePair, .keep_all = TRUE) #> The following metabolites are not connected to any receptor or transporter in the MetalinksDB: ornithine, N-acetylaspartate, acetylcholine, tryptophan, N-acetylglutamate #> The following metabolites are connected to at least one receptor or transporter in the MetalinksDB: phenylalanine, alanine, threonine, serine, methionine"},{"path":"/articles/core-metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"CoRe Metabolomics","text":"Pathway Input MetaProViz::MC_ORA. MetaProViz::MC_ORA results RG2_Significant cluster Both_DOWN (Consumed). see pathways low amount genes included also part cluster pathways significant. due multiple factors, first start small number metabolites KEGG IDs secondly included metabolites detected , intracellular CoRe samples (parameter backgroundMethod=\"Intra&CoRe\"). Hence, example setting parameter backgroundMethod=\"Intra|CoRe\", obtain larger metabolite clusters.","code":"MC_ORA_result<- MetaProViz::ClusterORA(InputData=MCA_CoRe_res[[\"MCA_CoRe_Results\"]]%>%column_to_rownames(\"Metabolite\"),                                        SettingsInfo=c(ClusterColumn=\"RG2_Significant\",                                                         BackgroundColumn=\"BG_Method\",                                                         PathwayTerm= \"Pathway\", #This is the column name including the pathways names                                                         PathwayFeature= \"Metabolite\"),                                        RemoveBackground=TRUE,                                        PathwayFile=MappingInfo%>%rownames_to_column(\"Metabolite\"),                                        PathwayName=\"KEGG\",                                        minGSSize=3,                                        maxGSSize=1000 ,                                        SaveAs_Table= \"csv\")"},{"path":"/articles/core-metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"CoRe Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_SettingsInfo user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_SettingsFile_Sample Plot_SettingsFile_Metab. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Media_Preprocessed[,c(1:2)]%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-MappingInfo"},{"path":"/articles/core-metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"CoRe Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::VizPCA(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Given biological replicates numeric, can also set color_scale continuous: Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . Figure: samples cluster Cell status?","code":"Input_PCA <- Media_Preprocessed[,-c(1:4)] #remove columns that include Metadata such as cell type,... MetaProViz::VizPCA(InputData=Input_PCA) MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Batch Effect\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    ColorScale = \"continuous\",                    PlotName = \"Batch Effect (continuous color scale)\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Sample Conditions\") MetaProViz::VizPCA(SettingsInfo=  c(color=\"Status\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Sample Status\")"},{"path":"/articles/core-metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"CoRe Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizHeatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_FeatureNames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_SettingsInfo. time can still maintain metadata information , samples metabolites. Together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster Core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.   can also choose make individual plots Sample Metadata using individual_Sample (e.g. patients may want plot male female separately). Moreover, can also use time.","code":"Input_Heatmap <-   Media_Preprocessed[,-c(1:6)] #remove columns that include Metadata such as cell type,...  # Add consumption-release information of each cell type: MetaData_Metab <- DMA_Annova[[\"Feature_Metadata\"]]%>%   column_to_rownames(\"Metabolite\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        PlotName = \"Overview\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Status\")),                        PlotName = \"Colour Samples\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Metab = list(\"Pathway\",  \"CoRe_786-M1A\", \"CoRe_HK2\", \"CoRe_786-M2A\", \"CoRe_786-O\", \"CoRe_OSLM1B\", \"CoRe_OSRC2\", \"CoRe_RFX631\"),                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Status\")),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"CoRe_786-M1A\", \"CoRe_HK2\", \"CoRe_786-M2A\", \"CoRe_786-O\", \"CoRe_OSLM1B\", \"CoRe_OSRC2\", \"CoRe_RFX631\")),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName = \"Pathway\")"},{"path":"/articles/core-metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"CoRe Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizSuperplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).  Now, instance prefer boxplots bargraphs can simply change parameter PlotType:  can also change violin plots:","code":"Input_Superplot <-  Media_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... #Lets select metabolites to plot metabolite_list <- MCA_res %>%   filter(stringr::str_detect(RG2_Significant, \"Opposite\"))%>%   pull(Metabolite)   MetaProViz::VizSuperplot(InputData =Input_Superplot%>%  select(any_of(metabolite_list)),#We just plot selected metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Bar\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Box\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Violin\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/core-metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"CoRe Metabolomics","text":"Input_data MetaProViz::VizVolcano() example differential analysis results MetaProViz::DMA().","code":""},{"path":"/articles/core-metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"CoRe Metabolomics","text":"first look results differential analysis (see section DMA ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying DMA results. seek plot metabolite names can change paramter SelectLab default (SelectLab=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying DMA results. parameter SelectLab can also pass vector Metabolite names labeled: Figure: Standard figure displaying DMA results. explained , analyzing CoRe data important take account metabolite consumed released. can use information colour code shape metabolites plot. need add information Metadata_Metabolite file: Metadata table including additional information Metabolites. Now can make different plots: Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. course, may also want individual plot consumption/release metabolites. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_SettingsInfo information (color) used Input_data. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters.","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\") # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        SelectLab = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        SelectLab = c(\"histidine\", \"phenylalanine\", \"lactate\")) # colour for consumption and release: For this we need to add this information into the Metadata_Metabolite file MetaData_Metab <- merge(MappingInfo%>%rownames_to_column(\"Metabolite\"), DMA_786M1A_vs_HK2[,c(1,6,8:10)], by=\"Metabolite\", all.y=TRUE)%>%   column_to_rownames(\"Metabolite\") #Now we need to add our Plot_SettingsFile and the Plot_SettingsInfo: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"CoRe_specific\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour coded for consumption/release\" ) #If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_SettingsInfo MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape for consumption/release, color for significance.\" ) #Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"CoRe_specific\", color=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape and color for consumption/release.\" ) #individual plot for each metabolite behaviour: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(individual=\"CoRe\", shape=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA.\" ) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(individual=\"CoRe\", shape=\"CoRe_specific\", color=\"Pathway\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA.\" ) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`)."},{"path":"/articles/core-metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"CoRe Metabolomics","text":"parameter Plot_Settings=\"Compare\" helpful performed multiple comparisons seek compare two one plot: Figure: Comparison. course option use shape color customize graph well make individual plots: Figure: Comparison. Now individual plots :","code":"#Make the plot MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) #Make the plot MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(color=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(individual=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" )"},{"path":"/articles/core-metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"CoRe Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. can example use results ORA performed differential expression results. Indeed DMA_786M1A_vs_HK2 performed ORA cluster (consumed, released, consumed/released). , plot ORA results metabolites released conditions, HK2 786-M1A.","code":"#Prepare the Input: #1. InputData=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file SettingsFile_Metab. InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   column_to_rownames(\"KEGGCompound\")  #2. InputData2=Pathway analysis output: Must have same column names as SettingsFile_Metab for Pathway name InputPEA2 <- MC_ORA_786M1A_vs_HK2_Consumed %>%   dplyr::rename(\"term\"=\"ID\")  #3. SettingsFile_Metab= Pathways used for pathway analysis: Must have same column names as SettingsFile_Metab for Pathway name and feature names need to match features in the InputData. PEA_Feature passes this column name! MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"Metabolite\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        InputData= InputPEA, #Must be the data you have used as an input for the pathway analysis                        InputData2= InputPEA2, #Must be the results of the pathway analysis                        x= \"Log2(Distance)\",                        PlotName= \"KEGG\",                        Subtitle= \"PEA\" ,                        SelectLab = NULL)"},{"path":"/articles/core-metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"CoRe Metabolomics","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1    ggfortify_0.4.17 rlang_1.1.5      tibble_3.2.1     dplyr_1.1.4      magrittr_2.0.3   #> [7] MetaProViz_2.1.7 ggplot2_3.5.1    #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.4.3           later_1.4.1             ggplotify_0.1.2         R.oo_1.27.0             #>   [5] cellranger_1.1.0        XML_3.99-0.18           factoextra_1.0.7        lifecycle_1.0.4         #>   [9] httr2_1.1.2             tcltk_4.4.3             rstatix_0.7.2           lattice_0.22-5          #>  [13] vroom_1.6.5             MASS_7.3-64             backports_1.5.0         limma_3.62.2            #>  [17] sass_0.4.9              rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             #>  [21] ggtangle_0.0.6          zip_2.3.2               sessioninfo_1.2.3       EnhancedVolcano_1.24.0  #>  [25] qcc_2.7                 cowplot_1.1.3           DBI_1.2.3               RColorBrewer_1.1-3      #>  [29] lubridate_1.9.4         abind_1.4-8             zlibbioc_1.52.0         rvest_1.0.4             #>  [33] purrr_1.0.4             R.utils_2.13.0          BiocGenerics_0.52.0     hash_2.2.6.3            #>  [37] yulab.utils_0.2.0       rappdirs_0.3.3          GenomeInfoDbData_1.2.13 IRanges_2.40.1          #>  [41] S4Vectors_0.44.0        enrichplot_1.26.6       ggrepel_0.9.6           tidytree_0.4.6          #>  [45] pheatmap_1.0.12         pkgdown_2.1.1           svglite_2.1.3           codetools_0.2-20        #>  [49] DOSE_4.0.1              xml2_1.3.8              tidyselect_1.2.1        aplot_0.2.5             #>  [53] UCSC.utils_1.2.0        farver_2.1.2            stats4_4.4.3            jsonlite_2.0.0          #>  [57] Formula_1.2-5           systemfonts_1.2.1       tools_4.4.3             progress_1.2.3          #>  [61] treeio_1.30.0           ragg_1.3.3              Rcpp_1.0.14             glue_1.8.0              #>  [65] gridExtra_2.3           xfun_0.51               qvalue_2.38.0           GenomeInfoDb_1.42.3     #>  [69] withr_3.0.2             fastmap_1.2.0           digest_0.6.37           gridGraphics_0.5-1      #>  [73] timechange_0.3.0        R6_2.6.1                textshaping_1.0.0       colorspace_2.1-1        #>  [77] GO.db_3.20.0            gtools_3.9.5            RSQLite_2.3.9           R.methodsS3_1.8.2       #>  [81] tidyr_1.3.1             generics_0.1.3          data.table_1.17.0       prettyunits_1.2.0       #>  [85] httr_1.4.7              htmlwidgets_1.6.4       inflection_1.3.6        pkgconfig_2.0.3         #>  [89] gtable_0.3.6            blob_1.2.4              XVector_0.46.0          clusterProfiler_4.14.6  #>  [93] OmnipathR_3.15.12       htmltools_0.5.8.1       carData_3.0-5           fgsea_1.33.4            #>  [97] scales_1.3.0            kableExtra_1.4.0        Biobase_2.66.0          png_0.1-8               #> [101] ggfun_0.1.8             knitr_1.50              rstudioapi_0.17.1       tzdb_0.5.0              #> [105] reshape2_1.4.4          nlme_3.1-167            checkmate_2.3.2         curl_6.2.2              #> [109] cachem_1.1.0            parallel_4.4.3          vipor_0.4.7             AnnotationDbi_1.68.0    #> [113] desc_1.4.3              pillar_1.10.1           grid_4.4.3              logger_0.4.0            #> [117] vctrs_0.6.5             ggpubr_0.6.0            car_3.1-3               beeswarm_0.4.0          #> [121] evaluate_1.0.3          readr_2.1.5             cli_3.6.4               compiler_4.4.3          #> [125] crayon_1.5.3            ggsignif_0.6.4          labeling_0.4.3          plyr_1.8.9              #> [129] fs_1.6.5                ggbeeswarm_0.7.2        stringi_1.8.7           viridisLite_0.4.2       #> [133] BiocParallel_1.40.0     munsell_0.5.1           Biostrings_2.74.1       lazyeval_0.2.2          #> [137] GOSemSim_2.32.0         Matrix_1.7-2            hms_1.1.3               patchwork_1.3.0         #> [141] bit64_4.6.0-1           KEGGREST_1.46.0         statmod_1.5.0           igraph_2.1.4            #> [145] broom_1.0.8             memoise_2.0.1           bslib_0.9.0             ggtree_3.14.0           #> [149] fastmatch_1.1-6         bit_4.6.0               readxl_1.4.5            gson_0.1.0              #> [153] ape_5.8-1"},{"path":"/articles/prior-knowledge.html","id":"section","dir":"Articles","previous_headings":"","what":"Prior Knowledge - Access & Integration","title":"Prior Knowledge - Access & Integration","text":"tutorial showcase use MetaProViz prior knowledge: - 1. understand detected metabolite IDs measured data. - 2. access metabolite prior knowledge metabolite-gene prior knowledge networks. - 3. link experimental data prior knowledge - ’s Don’ts. - 4. deal many--many mapping metabolite identifiers. - 5. perform pathway enrichment analysis. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz) library(magrittr) library(rlang) library(purrr) library(dplyr) library(stringr)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\") #BiocManager::install(\"cosmosR\")"},{"path":"/articles/prior-knowledge.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"Loading the example data","title":"Prior Knowledge - Access & Integration","text":"part MetaProViz package can load example feature metadata using function toy_data():1. Metadata cell line experiment (CellLine) Example datasets publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). 2. Metadata patients tissue experiment (Tissue) Example datasets publicly available paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. 3. Metadata Biocrates kit (Biocrates) use Biocrates kit feature information “MxP® Quant 500 XL kit” covers 1,000 metabolites various biochemical classes.","code":"#Load the Pre-processed intracellular data: FeatureMetadata_Cells <- MetaProViz::ToyData(Data=\"Cells_MetaData\") # Load the example data: FeatureMetadata_Tissue <- MetaProViz::ToyData(Data=\"Tissue_MetaData\") # Load the example data: FeatureMetadata_Biocrates <- MetaProViz::ToyData(Data=\"BiocratesFeatureTable\")"},{"path":"/articles/prior-knowledge.html","id":"sect1","dir":"Articles","previous_headings":"","what":"1. Metabolite IDs in measured data","title":"Prior Knowledge - Access & Integration","text":"Available Alanine IDs HMDB ChEBI. Alanine IDs HMDB ChEBI mapped pathways wiki, KEGG Reactome using RamP.  showcases choose ChEBI ID Alanine (ChEBI ID 16449), experimentally distinction possible, map pathway even though metabolite part many pathways. Hence, recommend assign multiple IDs measured ID, specificity detection given. Yet, many metabolomics studies report multiple IDs, rather one ID per measured peak. cases chosen ID correct representing degree ambiguity detection, e.g. “Alanine-Zwitterion”, whilst cases specific ID, detected specificity, e.g. “L-Alanine”. cases can lead missed maps prior knowledge hence loss information discussed . Hence, assign multiple IDs measured peak, specificity detection may given (.e. amino acids). Preview DF FeatureMetadata_Cells_AddIDs including new columns potential additional HMDB IDs assign using MetaProViz::EquivalentIDs() function.","code":"# Example Cell-line data: Input_HMDB <- FeatureMetadata_Cells%>%   dplyr::filter(!HMDB == \"NA\")%>% # ID in the measured data we want to use, hence we remove NA's   dplyr::select(\"HMDB\", \"Pathway\") # only keep relevant columns  # Add equivalent IDs: FeatureMetadata_Cells_AddIDs <- MetaProViz::EquivalentIDs(InputData= Input_HMDB,                                                           SettingsInfo = c(InputID=\"HMDB\"),# ID in the measured data, here we use the HMDB ID                                                           From = \"hmdb\") #> Warning in MetaProViz::EquivalentIDs(InputData = Input_HMDB, SettingsInfo = #> c(InputID = \"HMDB\"), : The following IDs are duplicated and removed: #> HMDB0000725, HMDB0002013, HMDB0000267, HMDB0000755 #> chebi is used to find additional potential IDs for hmdb."},{"path":"/articles/prior-knowledge.html","id":"sect2","dir":"Articles","previous_headings":"","what":"2. Accessing Prior Knowledge","title":"Prior Knowledge - Access & Integration","text":"Metabolite prior knowledge (PK) essential interpretation metabolomics data. can used perform pathway enrichment analysis, compound class enrichment analysis, using specific PK databases, can used study connection metabolites receptors transporters.Since quality content PK dictate success downstream analysis biological interpretation, important ensure PK used correctly. Specifically metabolite PK, many different PK databases resources pose several issues. Indeed, metabolite identifiers (e.g. KEGG, HMDB, PubChem, etc.) standardized across databases, metabolite can multiple identifiers different databases. known many--many mapping problem. Moreover, metabolic pathways basis PK databases also includes co-factors ions small molecules part reactions, can also detected experimentally acquired data (e.g. H2O, CO2, etc). address issues provide standardized way access integrate metabolite PK, provide access several prior knowledge resources removed molecules water. terme collection metabolite sets MetSigDB (Metabolite signature database).","code":""},{"path":"/articles/prior-knowledge.html","id":"kegg-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"KEGG pathway-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"#This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG()"},{"path":"/articles/prior-knowledge.html","id":"chemical-class-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Chemical class-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"chemical class-metabolite sets based classification metabolites chemical classes, can used perform compound class enrichment analysis. chemical class-metabolite sets curated RaMP-DB, used ClassyFire (Braisted et al. 2023). access via OmnipathR. Preview DF ChemicalClass_MetabSet.","code":"MetaProViz::LoadRAMP() #> Cached file loaded from: ~/.cache/RaMP-ChemicalClass_Metabolite.rds"},{"path":"/articles/prior-knowledge.html","id":"create-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Create pathway-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"function Make_GeneMetabSet can used convert gene names metabolite names using PK network metabolic reactions calls CosmosR (Dugourd et al. 2021). function useful want perform pathway enrichment analysis available gene-sets Hallmarks gene-sets MSigDB (Castanza et al. 2022). Moreover, enables perform combined pathway enrichment analysis metabolite-gene sets, data types proteomics measuring enzymes expression. Hallmarks (Liberzon et al. 2015) gene-set Gaude (Gaude Frezza 2016) gene-set available package MetaProViz can loaded using function LoadHallmarks() LoadGaude respectively. Preview DF Hallmarks_Pathways including gene-sets usable pathway enrichment analysis. Preview DF gaude_Pathways including gene-sets usable pathway enrichment analysis. Now can use function Make_GeneMetabSet translate gene names metabolite names. Preview DF Hallmarks_GeneMetab including gene-sets usable pathway enrichment analysis.  Given gene-metabolite-sets, can now also run enrichment analysis combined data types, including metabolite Log2FC one including gene Log2FC e.g. transcriptomics proteomics data. Yet, important keep mind generally detect less metabolites genes hence may bias results obtained combined enrichment analysis.","code":"#Load the example gene-sets: MetaProViz::LoadHallmarks()  MetaProViz::LoadGaude() #Translate gene names to metabolite names Hallmarks_GeneMetab <- MetaProViz::Make_GeneMetabSet(Input_GeneSet=Hallmark_Pathways,                                                      SettingsInfo=c(Target=\"gene\"),                                                      PKName=\"Hallmarks\")  Gaude_GeneMetab <- MetaProViz::Make_GeneMetabSet(Input_GeneSet=Gaude_Pathways,                                                      SettingsInfo=c(Target=\"gene\"),                                                      PKName=\"Gaude\")"},{"path":"/articles/prior-knowledge.html","id":"metalinksdb-metabolite-receptor-metabolite-transporter-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"MetaLinksDB metabolite-receptor & metabolite-transporter sets","title":"Prior Knowledge - Access & Integration","text":"MetaLinks database manually curated database metabolite-receptor metabolite-transporter sets can used study connection metabolites receptors transporters (Farr et al. 2024). Preview DF MetaLinksDB including metabolite-receptor sets. Preview DF MetaLinksDB_Type including metabolite-receptor metabolite-transporter sets.","code":"MetaLinksDB_Res <- MetaProViz::LoadMetalinks()"},{"path":"/articles/prior-knowledge.html","id":"comparison-of-pk-gene-and-metabolite-coverage","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Comparison of PK gene and metabolite coverage","title":"Prior Knowledge - Access & Integration","text":"now loaded number different PK sources (details ) aim compare overlap coverage PK sources understand certain genes metabolites covered one PK resource others. focus comparing resources containing gene-metabolite sets (Hallmarks, Gaude, MetalinksDB).MetaProViz:::GenerateUpset() helper function, generate Upset plot showing overlap coverage (similar Venn diagram works, better able visualize multiple combinations clearly). Preview DF df_upset_pk_comparison showing coverage features (genes metabolites) across PK sources.  UpsetPlot shows MetalinksDB unique genes metabolites present resources. expected, since MetalinksDB focuses receptors, transporters metabolic enzymes, whilst Gaude Hallmakrs focus pathways. Since Gaude focuses metabolic enzymes pathways, contains low number genes hence small amount unique genes metabolites. regard makes sense Hallmarks includes many unique genes, since Hallmarks also includes genes pathways related metabolism. Hallmarks Gaude observe high overlap metabolites, can explained since gene sets assigned metabolites using metabolic pathways backend MetaProViz::Make_GeneMetabSet important keep mind dictates gene-metabolite associations added.","code":"# Ensure no NA values and extract unique features hallmarks_features <- unique(na.omit(Hallmarks_GeneMetab$GeneMetabSet$feature)) gaude_features <- unique(na.omit(Gaude_GeneMetab$GeneMetabSet$feature)) metalinks_features <- unique(c(   na.omit(MetaLinksDB_Res$MetalinksDB$hmdb),   na.omit(MetaLinksDB_Res$MetalinksDB$gene_symbol) ))  # Get all unique features across the three sets all_features <- unique(c(hallmarks_features, gaude_features, metalinks_features))  # Ensure all_features is a vector all_features <- as.character(all_features)  df_binary <- data.frame(   Feature = all_features,   Hallmarks = as.integer(all_features %in% hallmarks_features),   Gaude = as.integer(all_features %in% gaude_features),   Metalinks = as.integer(all_features %in% metalinks_features),   stringsAsFactors = FALSE )  # Here we categorise the featurs as either metabolites (if the prefix is HMDB) or genes df_binary$Type <- ifelse(grepl(\"^HMDB\", df_binary$Feature), \"metabolite (HMDB)\", \"gene\")  # Add a 'None' column for features not present in any set df_upset_pk_comparison <- df_binary %>%   mutate(None = as.integer(rowSums(select(., -Feature, -Type)) == 0)) MetaProViz:::GenerateUpset(df = df_upset_pk_comparison,                           class_col = \"Type\",                           intersect_cols = c(\"Hallmarks\", \"Gaude\", \"Metalinks\"),                           plot_title = \"Overlap of Prior Knowledge Resources\",                           palette_type = \"polychrome\",                           output_file = NULL)"},{"path":"/articles/prior-knowledge.html","id":"sect3","dir":"Articles","previous_headings":"","what":"3. Linking experimental data to prior knowledge","title":"Prior Knowledge - Access & Integration","text":"Now loaded prior knowlegde inspected overlap genes metabolites different PK resources, section want link experimental data PK. experimental data example data loaded section 1 (Loading example data). Whichever resource experimental data resembles, recommend follow overall approach: 1. Determine metabolite identifiers experimental data inspect coverage. 2. Select metabolite identifiers experimental data, can used link PK interest. 3. Connect metabolite identifiers PK assess overlap. one can select combination experimental data PK. selection based experimental data hand biological research question. vignette, focus combination biocrates experimental data MetalinksDB PK.","code":""},{"path":[]},{"path":"/articles/prior-knowledge.html","id":"determine-identifiers-and-inspect-coverage","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge > Biocrates data and MetalinksDB","what":"1. Determine identifiers and inspect coverage","title":"Prior Knowledge - Access & Integration","text":"First determine identifiers inspect coverage. many experimentally aquired data, can different metabolite IDs used describe metabolite. Biocrates data available metabolite identifiers mostly CHEBI, HMDB, LIMID linked PK resources. Now select metabolite identifier columns count coverage look combinations coverage grouped class metabolite. helps us understand expect, linking data prior knowledge. Preview DF df_upset_biocft showing coverage identifiers.  results tell us : Less half metabolites CHEBI+HMDB+LIMID (n=440), isn’t great probably higher expected. relied upon - CHEBI: miss least 229 metabolites HMDB+LIMID HMDB: miss least 126 metabolites CHEBI+LIMID LIMID: miss least 89 metabolites CHEBI+HMDB However two things note observations . first numbers minimums, real values little higher add instance metabolites just CHEBI just LIMID, etc. actually, relying upon LIMID means miss 151 biocrates metabolites (89 HMDB/ChEBI + 22 CHEBI + 8 HMDB 32 LIMID/CHEBI/HMDB identifiers). second point nuanced just important: need keep mind direct 1:1 relationship number Biocrates metabolites , instance, ChEBI ID, number unique ChEBI IDs map . upset plot treating Biocrates metabolite individual entry categorising whether ChEBI, HMDB, LIMID ID, etc. However considering ChEBI, HMDB, LIMIDs actually . possible cases number metabolites higher, lower, number unique IDs due multimapping. example, let’s say 3 Biocrates metabolites HMDB IDs. count 3 entries upset plot. two Biocrates metabolites map HMDB ID, whereas Biocrates metabolite map 6 different HMDBs. case, 3 Biocrates metabolites HMDBs 7 unique HMDBs. upset plot interpreted mind.","code":"df_binary_biocft <- data.frame(   trivname = FeatureMetadata_Biocrates$TrivialName,   CHEBI = as.integer(!is.na(FeatureMetadata_Biocrates$CHEBI)),   HMDB  = as.integer(!is.na(FeatureMetadata_Biocrates$HMDB)),   LIMID = as.integer(!is.na(FeatureMetadata_Biocrates$LIMID)) )  df_upset_biocft <- df_binary_biocft %>%   mutate(     None = as.integer(rowSums(across(c(CHEBI, HMDB, LIMID))) == 0),     Class = FeatureMetadata_Biocrates$Class  # or however you access the Class column   ) MetaProViz:::GenerateUpset(df = df_upset_biocft,                           class_col = \"Class\",                           intersect_cols = c(\"LIMID\", \"HMDB\", \"CHEBI\", \"None\"),                           plot_title = \"Overlap of Prior Knowledge Resources\",                           palette_type = \"polychrome\",                           output_file = NULL)"},{"path":"/articles/prior-knowledge.html","id":"select-identifiers-to-link-to-pk-of-interest","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge > Biocrates data and MetalinksDB","what":"2. Select identifiers to link to PK of interest","title":"Prior Knowledge - Access & Integration","text":"inspected experimental coverage metabolite IDs Biocrates kit. Next, choose metabolite identifier use link PK choice. Often choice dictated prior knowledge resource use specific identifier. use MetalinksDB, uses HMDB IDs metabolite identifiers, hence best use HMDB IDs link Biocrates features resource. Noteworthy, cases Biocrates metabolites multiple HMDB IDs listed per metabolite:  plot can make observations. First , already pointed previous section, number biocrates cells without HMDB high (n=253). Secondly, can see number biocrates cells single HMDB ID associated (n=314), majority biocrates metabolites actually multiple entries (n=452). multiple, ranges 2-20 HMDB entries per biocrates cell! many biocrates cells linked multiple HMDB IDs, deal w0.ith ? select single HMDB ID cases multiple? discuss pros cons later section: Bonus: multiple metabolite IDs helpful hindrance?. now, proceed making connections PK using HMDBs, MetaProViz function CheckMatchID() designed handle.","code":"# Count entries and record NA information result_bioc_hmdb_count <- MetaProViz:::CountEntries(FeatureMetadata_Biocrates, \"HMDB\") # Access the processed data: processed_df_bioc_hmdb_count <- result_bioc_hmdb_count$result # Display the plot: print(result_bioc_hmdb_count$plot)"},{"path":"/articles/prior-knowledge.html","id":"make-connection-to-pk-and-assess-overlap","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge > Biocrates data and MetalinksDB","what":"3. Make connection to PK and assess overlap","title":"Prior Knowledge - Access & Integration","text":"connect experimental Biocrates table MetalinksDB PK using HMDB IDs using MetaProViz::CheckMatchID() function. returns warning messages 4 tables: InputData_Matched: summary table links prior knowledge. however NA values duplicates InputID (e.g. ‘HMDB’) removed table. InputData_Matched_NA_and_duplicates: kind summary table NA duplicates included. Helpful plotting. InputData_Matched_only_NA: kind summary table rows InputID NA. Helpful inspecting rows NA. InputData_Matched_only_duplicates: kind summary table rows InputID duplicated (triplicated, etc). Helpful inspecting IDs input side duplicated. cases expect input ID linked one entry PK. won’t always case, already discussed last section , many cases multiple HMDB IDs per single biocrates metabolite cell. MetaProViz::CheckMatchID() designed mind, default splitting comma separated values InputID (PriorID) separate entities, counting number links , reporting user. Let’s take look InputData_Matched data: Preview DF InputData_Matched showing coverage identifiers (columns hidden) Now let’s take look duplicated IDs: Preview DF InputData_Matched_only_duplicates showing coverage identifiers (columns hidden) Now nice visualise linkages get idea well experimental data (Biocrates case) matches PK (MetalinksDB case). Note also want take account multiple IDs metabolite assessing coverage. plot counting link PK HMDB IDs individual metabolite .  plot see metabolite classes biocrates kit every metabolite HMDB ID corresponding entry MetalinksDB. represented bars completely green, Amino Acids Fatty Acids classes. However number classes metabolites, see represented MetalinksDB PK , either HMDB ID associated Biocrates metabolite (represented grey bars), MetalinksDB include HMDB ID metabolite (represented red bars). poor coverage course concern analysis interested analysing many classes, since mean case experimental results Phosphatidylglycerols instance linked PK. case certainly need keep mind downstream analysis interpretation results, don’t overinterpret results instance large number Amino Acids, falsely assume absence Phosphatidylinositols PK integration results means present important data.","code":"Biocrates_to_MetalinksDB <- MetaProViz:::CheckMatchID(InputData = FeatureMetadata_Biocrates,                      PriorKnowledge = MetaLinksDB_Res$MetalinksDB,                      SettingsInfo = c(InputID=\"HMDB\", PriorID=\"hmdb\", GroupingVariable=NULL)) #> Warning in MetaProViz:::CheckMatchID(InputData = FeatureMetadata_Biocrates, : #> 253 NA values were removed from columnHMDB #> Warning in MetaProViz:::CheckMatchID(InputData = FeatureMetadata_Biocrates, : 4 #> duplicated IDs were removed from columnHMDB #> No hmdb provided. If this was not intentional, please check your input. #> Warning in MetaProViz:::CheckMatchID(InputData = FeatureMetadata_Biocrates, : #> 40766 duplicated IDs were removed from columnhmdb # Define your color scheme and labels fill_vals <- c(\"FALSE\" = \"red\", \"TRUE\" = \"#009E73\") fill_lbls <- c(\"No Match\", \"Found Match\")  # Call the function with desired parameters p <- MetaProViz:::GenerateStackedBar(   data = Biocrates_to_MetalinksDB$InputData_Matched_NA_and_duplicates,   group_col = \"Class\",   fill_col = \"found_match_in_PK\",   fill_values = fill_vals,   fill_labels = fill_lbls,   plot_title = \"Mapping status between Biocrates and MetalinksDB \\nusing HMDB, grouped by metabolite class\",   x_label = \"Frequency\",   y_label = \"Class\",   legend_position = c(0.95, 0.05) )  p"},{"path":"/articles/prior-knowledge.html","id":"sect4_bonus","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge > Biocrates data and MetalinksDB","what":"Bonus: Are multiple metabolite IDs helpful or a hindrance?","title":"Prior Knowledge - Access & Integration","text":"Let’s turn back consider number HMDB IDs Biocrates data ask ourself question: helpful detrimental multiple IDs? answer , take first HMDB cell multiple HMDB IDs test see worked.  Now can see either NA singular values HMDB IDs, let’s map table MetalinksDB using function earlier, time using HMDB_single column.  doesn’t appear look different , look closely can see classes shifted bit, Phosphatidylethanolamines instance. better visualise differences zoom changes filtering successful matches Biocrates kit MetalinksDB, comparing metabolites found using single hits versus using .  shown case, although results overshadowed poor overall linkage experimental data PK, using Multi HMDBs resulted nearly 20% (n=29) metabolites Biocrates able linked MetalinksDB possible used first HMDB available us. Hence multiple IDs single metabolite may add confusion user, recommend prematurely dropping IDs map PK thoroughly assessed impact removal may .","code":"extract_first_id <- function(id_col) {   sapply(as.character(id_col), function(x) {     # Check for NA or empty string     if (is.na(x) || x == \"\") {       return(NA)     }     # Split on comma (adjust the delimiter if needed)     parts <- unlist(strsplit(x, split = \",\"))     # Return the first value after trimming any whitespace     return(trimws(parts[1]))   }) }  # Create a copy of the df FeatureMetadata_Biocrates_singleHMDB <- FeatureMetadata_Biocrates # Get the first entry of each HMDB ID FeatureMetadata_Biocrates_singleHMDB$HMDB_single <- extract_first_id(FeatureMetadata_Biocrates$HMDB)  # Visually check that the single ID function has worked # Count entries and record NA information result_bioc_hmdb_count_single <- MetaProViz:::CountEntries(FeatureMetadata_Biocrates_singleHMDB, \"HMDB_single\") # Access the processed data: processed_df_bioc_hmdb_count_single <- result_bioc_hmdb_count_single$result # Display the plot: print(result_bioc_hmdb_count_single$plot) Biocrates_to_MetalinksDB_singleHMDB <- MetaProViz:::CheckMatchID(InputData = FeatureMetadata_Biocrates_singleHMDB,                      PriorKnowledge = MetaLinksDB_Res$MetalinksDB,                      SettingsInfo = c(InputID=\"HMDB_single\", PriorID=\"hmdb\", GroupingVariable=NULL)) #> Warning in MetaProViz:::CheckMatchID(InputData = #> FeatureMetadata_Biocrates_singleHMDB, : 253 NA values were removed from #> columnHMDB_single #> Warning in MetaProViz:::CheckMatchID(InputData = #> FeatureMetadata_Biocrates_singleHMDB, : 49 duplicated IDs were removed from #> columnHMDB_single #> No hmdb provided. If this was not intentional, please check your input. #> Warning in MetaProViz:::CheckMatchID(InputData = #> FeatureMetadata_Biocrates_singleHMDB, : 40766 duplicated IDs were removed from #> columnhmdb #> [1] \"Counts of linkages made using only a Single HMDB\" #>  #> FALSE  TRUE  #>    29   147 #>  #> Using Multi HMDBs increased coverage over Single HMDBs by: 19.73 %"},{"path":"/articles/prior-knowledge.html","id":"sect4","dir":"Articles","previous_headings":"","what":"4. Translate IDs","title":"Prior Knowledge - Access & Integration","text":"Important Information: Translating IDs databases e.g. KEGG HMDB non-trivial task, expected one original ID link many translated IDs, vice versa. discuss implications throughout vignette leave user discretion select appropriate ID based research question data.  Across different prior knowledge resources (see also tables ) specific metabolite IDs used hence depending prior knowledge resource specific metabolite ID required. want convert ‘translate’ IDs another commonly used form ID, instance measured data uses another type ID, can make use MetaProViz::TranslateID() function. based OmniPathR RaMP-DB (Braisted et al. 2023) backend function currently supports ID translation metabolites following formats: - KEGG - HMDB - ChEBI - PubChem example translating KEGG pathways loaded MetaProViz::LoadKEGG HMDB ids: Translation KEGG IDs KEGG pathways HMDB & pubchem IDs can immediately see despite ID translation, translations KEGG MetaboliteID HMDB PubChem IDs failed, resulting NA values. get better understanding combinations , let’s visualise translation ID types. can also note previous table becomes apparent translation IDs one--one mapping, rather one--many mapping. fact common ID one format genuine one--many relationship format (e.g. one KEGG ID maps multiple HMDB IDs) even many--many relationship, IDs new format link back multiple IDs original format (e.g. two different KEGG IDs map multiple HMDS IDs, shared ). comes many implications analysis discussed next section.","code":"KEGG_Pathways_Translated <- MetaProViz::TranslateID(InputData= KEGG_Pathways,                                                      SettingsInfo = c(InputID=\"MetaboliteID\", GroupingVariable=\"term\"),                                                      From = c(\"kegg\"),                                                      To = c(\"hmdb\", \"pubchem\"))"},{"path":"/articles/prior-knowledge.html","id":"mapping-problems","dir":"Articles","previous_headings":"4. Translate IDs","what":"4.1 Mapping problems","title":"Prior Knowledge - Access & Integration","text":"complexities translating metabolite IDs demonstrated (Fig.2). relationships Original IDs (e.g. KEGG) Translated IDs (e.g. HMDB), can quite complex fact encounter one--one (matches found ID), one--none ( direct #relationship established), one--many (multiple matches found ID. .e. ambiguously mapped) many--many ( considers relationships Translated IDs Original IDs , translated ID ambiguously maps back multiple different Original IDs) mappings. enrichment analysis translation KEGG IDs HMDB IDs increases pathways size, .e. many metabolites pathway “Glycolysis / Gluconeogenesis - Homo sapiens (human)”, turn inflate/deflate enrichment results hence desired keep number metabolites pathway consistent.  complexity output MetaProViz::TranslateID() includes Translation table showcased , additionally information mapping ambiguity well summary relationships Original Translated IDs. Indeed, translation e.g. KEGG hmdb pubchem includes multiple data frames including summary mapping occurrences: MappingSummary_hmdb also ability extract long version DF includes row mapping occurrence, can useful downstream analysis. Yet, can become large dependent amount many--many mappings, hence default generate summary. Within MetaProViz::TranslateID() can set parameter Summary =TRUE case dataframe includes , original translated ID, can use function MetaProViz::MappingAmbiguity() generate long summary well mapping summary general.  Long summary mapping problems taking account directions, ----. table shown KEGG ID C00002 maps 3 different HMDB IDs, shown one HMDB IDs HMDB0000538 maps one KEGG ID, hence Mapping one--many. two HMDB Ids also table checked many KEGG IDs map. Additionally, passed GroupingVariable = \"term\" pathways, also means mappings checked within pathway across pathways (e.g. C00002 shown twice, two different terms). fact, perform enrichment analysis need column source (=e.g. term) want keep metabolite IDs across pathways consistent, avoid ambiguous mapping much possible (many--many mapping), metabolite ID selection guided IDs might available us measured input data (Fig. 3). crucial circumvent inflation deflation metabolite-sets, turn affect enrichment analysis results. Hence, can use measured metabolite IDs guide selection PK IDs. crucial circumvent inflation deflation metabolite-sets, turn affect enrichment analysis results. something currently working hope provide within next release, stay tuned.","code":"names(KEGG_Pathways_Translated) #> [1] \"TranslatedDF\"             \"TranslatedDF_MappingInfo\" #> [3] \"MappingSummary_hmdb\"      \"MappingSummary_pubchem\" # Option 1: KEGG_Pathways_TranslatedSum <- MetaProViz::TranslateID(InputData= KEGG_Pathways,                                                     SettingsInfo = c(InputID=\"MetaboliteID\", GroupingVariable=\"term\"),                                                     From = c(\"kegg\"),                                                     To = c(\"hmdb\", \"pubchem\"),                                                     Summary =TRUE) # Option 2: MappingProblems <- MetaProViz::MappingAmbiguity(     InputData =         KEGG_Pathways_Translated[[\"TranslatedDF\"]] %>%         dplyr::rename(\"KEGG\"=\"MetaboliteID\") %>%         dplyr::select(Description, KEGG, term, Metabolite, hmdb),     From = \"KEGG\",     To = \"hmdb\",     GroupingVariable = \"term\",     Summary=TRUE )"},{"path":"/articles/prior-knowledge.html","id":"sect5","dir":"Articles","previous_headings":"","what":"5. Run enrichment analysis","title":"Prior Knowledge - Access & Integration","text":"two options: 1. Representation Analysis (ORA) determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test MetaProViz::ClusterORA. can applied clusters metabolites example results MetaProViz::MCA_2Cond() MetaProViz::CoRe() function. want details clustering methods please visit vignette Standard Metabolomics CoRe Metabolomics. 2. Enrichment analysis standard differential analysis results. offer ORA MetaProViz::StandardORA, many statistical tests can used enrichment analysis. full scope different methods beyond scope MetaProViz, available decoupleR (Badia--Mompel et al. 2022) packages group. part MetaProViz package can load example data using function toy_data() test enrichment analysis:1.Cell line experiment (CellLine) choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. performed pre-processing differential analysis (details can found vignette vignette Standard Metabolomics) load differential metabolite analysis results comparison 786M-1A versus HK2. 2. Tissue experiment (Tissue) chose publicly available data paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. performed differential analysis (details can found vignette Metadata Analysis) load differential metabolite analysis results comparison Tumour versus Normal.","code":"#Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2<- MetaProViz::ToyData(Data=\"IntraCells_DMA\") # Load the example data: Tissue_TvsN <- MetaProViz::ToyData(Data=\"Tissue_DMA\") Tissue_TvsN_Old <- MetaProViz::ToyData(Data=\"Tissue_DMA_Old\") Tissue_TvsN_Young <- MetaProViz::ToyData(Data=\"Tissue_DMA_Young\")"},{"path":"/articles/prior-knowledge.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Prior Knowledge - Access & Integration","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1    dplyr_1.1.4      purrr_1.0.4      rlang_1.1.5      magrittr_2.0.3   MetaProViz_2.1.7 #> [7] ggplot2_3.5.1    #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3            gridExtra_2.3        httr2_1.1.2          tcltk_4.4.3          logger_0.4.0         #>   [6] readxl_1.4.5         compiler_4.4.3       RSQLite_2.3.9        systemfonts_1.2.1    vctrs_0.6.5          #>  [11] rvest_1.0.4          pkgconfig_2.0.3      crayon_1.5.3         fastmap_1.2.0        backports_1.5.0      #>  [16] labeling_0.4.3       rmarkdown_2.29       sessioninfo_1.2.3    tzdb_0.5.0           ggbeeswarm_0.7.2     #>  [21] ragg_1.3.3           bit_4.6.0            xfun_0.51            cachem_1.1.0         jsonlite_2.0.0       #>  [26] progress_1.2.3       blob_1.2.4           later_1.4.1          broom_1.0.8          parallel_4.4.3       #>  [31] prettyunits_1.2.0    R6_2.6.1             bslib_0.9.0          stringi_1.8.7        ComplexUpset_1.3.3   #>  [36] limma_3.62.2         car_3.1-3            lubridate_1.9.4      jquerylib_0.1.4      cellranger_1.1.0     #>  [41] Rcpp_1.0.14          knitr_1.50           R.utils_2.13.0       readr_2.1.5          igraph_2.1.4         #>  [46] timechange_0.3.0     tidyselect_1.2.1     rstudioapi_0.17.1    abind_1.4-8          yaml_2.3.10          #>  [51] curl_6.2.2           tibble_3.2.1         withr_3.0.2          inflection_1.3.6     evaluate_1.0.3       #>  [56] desc_1.4.3           zip_2.3.2            xml2_1.3.8           pillar_1.10.1        ggpubr_0.6.0         #>  [61] carData_3.0-5        checkmate_2.3.2      generics_0.1.3       vroom_1.6.5          hms_1.1.3            #>  [66] munsell_0.5.1        scales_1.3.0         gtools_3.9.5         OmnipathR_3.15.12    glue_1.8.0           #>  [71] scatterplot3d_0.3-44 tools_4.4.3          ggsignif_0.6.4       fs_1.6.5             XML_3.99-0.18        #>  [76] grid_4.4.3           tidyr_1.3.1          qcc_2.7              colorspace_2.1-1     patchwork_1.3.0      #>  [81] beeswarm_0.4.0       vipor_0.4.7          Formula_1.2-5        cli_3.6.4            rappdirs_0.3.3       #>  [86] Polychrome_1.5.1     kableExtra_1.4.0     textshaping_1.0.0    viridisLite_0.4.2    svglite_2.1.3        #>  [91] gtable_0.3.6         R.methodsS3_1.8.2    rstatix_0.7.2        hash_2.2.6.3         selectr_0.4-2        #>  [96] sass_0.4.9           digest_0.6.37        ggrepel_0.9.6        htmlwidgets_1.6.4    farver_2.1.2         #> [101] memoise_2.0.1        htmltools_0.5.8.1    pkgdown_2.1.1        R.oo_1.27.0          factoextra_1.0.7     #> [106] lifecycle_1.0.4      httr_1.4.7           statmod_1.5.0        bit64_4.6.0-1        MASS_7.3-64"},{"path":[]},{"path":"/articles/sample-metadata.html","id":"section","dir":"Articles","previous_headings":"","what":"Sample Metadata Analysis","title":"Sample Metadata Analysis","text":"Tissue metabolomics experiment standard metabolomics experiment using tissue samples (e.g. animals patients).tutorial showcase use MetaProViz: perform differential metabolite analysis (DMA) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors based patients demographics like age, gender tumour stage. Find main metabolite drivers separate patients based demographics like age, gender tumour stage. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(tidyr) library(tibble)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/sample-metadata.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Sample Metadata Analysis","text":"choose example datasets, publicly available paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs (Hakimi et al. 2016). Metabolomics done using company Metabolon, untargeted metabolomics. use median normalised data supplementary table 2 paper. combined metainformation patients metabolite measurements removed unidentified metabolites. Lastly, added column “Stage” Stage1 Stage2 patients summarised “EARLY-STAGE” Stage3 Stage4 patients “LATE-STAGE”. Moreover, added column “Age”, patients “AGE SURGERY” <42 defined “Young” patients AGE SURGERY >58 “Old” remaining patients “Middle”. #part MetaProViz package can load example data global environment using function toy_data():1. Tissue experiment (Intra) can load ToyData, includes columns Sample information columns median normalised measured metabolite integrated peaks. Preview DF Tissue_Norm including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs, HMDB IDs, etc. selected pathways (MappingInfo) Preview DF Tissue_MetaData including trivial metabolite identifiers used experiment well IDs pathway information.","code":"# Load the example data: Tissue_Norm <- MetaProViz::ToyData(\"Tissue_Norm\") Tissue_MetaData <- MetaProViz::ToyData(\"Tissue_MetaData\")"},{"path":[]},{"path":"/articles/sample-metadata.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Sample Metadata Analysis","text":"done authors paper use median normalized data. want know can use MetaProViz pre-processing module, please check vignette: - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media","code":""},{"path":"/articles/sample-metadata.html","id":"metadata-analysis","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Metadata analysis","title":"Sample Metadata Analysis","text":"can use patient’s metadata find main metabolite drivers separate patients based demographics like age, gender, etc. metadata analysis based principal component analysis (PCA), dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). MetaProViz::MetaAnalysis() function perform PCA extract different PCs followed annova find main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_aov]] including main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_summary]] including metabolite drivers rows list patients demographics can separate.","code":"MetaRes <- MetaProViz::MetaAnalysis(InputData=Tissue_Norm[,-c(1:13)],                                      SettingsFile_Sample= Tissue_Norm[,c(2,4:5,12:13)],                                      Scaling = TRUE,                                      Percentage = 0.1,                                      StatCutoff= 0.05,                                      VarianceCutoff = 1,                                      SaveAs_Table = \"csv\",                                      SaveAs_Plot = \"svg\",                                      PrintPlot= TRUE,                                      FolderPath = NULL) #> The column names of the 'SettingsFile_Sample' contain special character that where removed. ##1. Tissue_Type TissueTypeList <- MetaRes[[\"res_summary\"]]%>%   filter(MainDriver_Term == \"TISSUE_TYPE\")%>%   filter(`MainDriver_Sum(VarianceExplained)`>30)%>%   select(FeatureID)%>%   pull()  #select columns Tissue_norm that are in TissueTypeList if they exist Input_Heatmap <- Tissue_Norm[ , names(Tissue_Norm) %in% TissueTypeList]#c(\"N1-methylguanosine\", \"N-acetylalanine\", \"lysylmethionine\")  #Heatmap: Metabolites that separate the demographics, like here TISSUE_TYPE MetaProViz:::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = Tissue_Norm[,c(1:13)],                        SettingsInfo = c(color_Sample = list(\"TISSUE_TYPE\")),                        Scale =\"column\",                        PlotName = \"MainDrivers\")"},{"path":"/articles/sample-metadata.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Sample Metadata Analysis","text":"use Differential Metabolite Analysis (DMA) compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. information please see vignette: - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media perform multiple comparisons based different patient demographics available: 1. Tumour versus Normal: patients 2. Tumour versus Normal: Subset Early Stage patients 3. Tumour versus Normal: Subset Late Stage patients 4. Tumour versus Normal: Subset Young patients 5. Tumour versus Normal: Subset Old patients       can see different Volcano plots smaller p.adjusted values differences Log2FC range. can also use MetaproViz::VizVolcano() function plot comparisons together plot, Tumour versus Normal young old patients:  can observe Tumour versus Normal lower significance values Young patients compared Old patients. can due higher variance metabolite measurements Young patients compared Old patients. can also check top changed metabolites comparing Tumour versus Normal correlate main metabolite drivers separate patients based TISSUE_TYPE, Tumour Normal.  Lastly, can perform Representation Analysis (ORA) using KEGG pathways comparison plot significant pathways. Noteworthy, since metabolites KEGG IDs, lose information. prevent can try increase KEGG IDs mapped using MetaProViz::TranslateID. details please visit vignette Prior Knowledge - Access & Integration. results p.adjusted value < 0.1 minimum 10% pathway detected visualized Volcano plots:","code":"#Prepare the different selections EarlyStage <- Tissue_Norm%>%   filter(STAGE== \"EARLY-STAGE\") LateStage <- Tissue_Norm%>%   filter(STAGE==\"LATE-STAGE\") Old <- Tissue_Norm%>%   filter(AGE==\"Old\") Young <- Tissue_Norm%>%   filter(AGE==\"Young\")  DFs <- list(\"TissueType\"= Tissue_Norm,\"EarlyStage\"= EarlyStage, \"LateStage\"= LateStage, \"Old\"= Old, \"Young\"=Young)  #Run DMA ResList <- list() for(item in names(DFs)){   #Get the right DF:   InputData <- DFs[[item]]    message(paste(\"Running DMA for\", item))   #Create Folder for saving each comparison   dir.create(paste(getwd(),\"/MetaProViz_Results/DMA/\", sep=\"\"), showWarnings = FALSE)   dir.create(paste(getwd(),\"/MetaProViz_Results/DMA/\", item, sep=\"\"), showWarnings = FALSE)      #Perform DMA   TvN <- MetaProViz::DMA(InputData =  InputData[,-c(1:13)],                    SettingsFile_Sample =  InputData[,c(1:13)],                    SettingsInfo = c(Conditions=\"TISSUE_TYPE\", Numerator=\"TUMOR\" , Denominator = \"NORMAL\"),                    PerformShapiro=FALSE, #The data have been normalized by the company that provided the results and include metabolites with zero variance as they were all imputed with the same missing value.                    FolderPath = paste(getwd(),\"/MetaProViz_Results/DMA/\", item, sep=\"\"))       #Add Results to list   ResList[[item]] <- TvN } #> Running DMA for TissueType #> There are no NA/0 values #> Running DMA for EarlyStage #> There are no NA/0 values #> Running DMA for LateStage #> There are no NA/0 values #> Running DMA for Old #> There are no NA/0 values #> Running DMA for Young #> There are no NA/0 values #Early versus Late Stage MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"EarlyStage\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"LateStage\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"EarlyStage\", InputData2= \"LateStage\"),                        PlotName= \"EarlyStage-TUMOR_vs_NORMAL compared to LateStage-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" ) # Young versus Old MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"Young\", InputData2= \"Old\"),                        PlotName= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" ) #Get the top changed metabolites top_entries <- ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]] %>%   arrange(desc(t.val)) %>%   slice(1:25)%>%   select(Metabolite)%>%   pull() bottom_entries <- ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]] %>%   arrange(desc(t.val)) %>%   slice((n()-24):n())%>%   select(Metabolite)  %>%   pull()  #Check if those overlap with the top demographics drivers ggVennDiagram::ggVennDiagram(list(Top = top_entries,                                   Bottom = bottom_entries,                                   TissueTypeList = TissueTypeList))+   scale_fill_gradient(low = \"blue\", high = \"red\") MetaData_Metab <- merge(x=Tissue_MetaData,                    y= MetaRes[[\"res_summary\"]][, c(1,5:6) ]%>%tibble::column_to_rownames(\"FeatureID\"),                    by=0,                    all.y=TRUE)%>%   column_to_rownames(\"Row.names\")  #Make a Volcano plot: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        InputData=ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        SettingsFile_Metab =  MetaData_Metab,                        SettingsInfo = c(color = \"MainDriver_Term\"),                        PlotName= \"TISSUE_TYPE-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" ) #Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  LoadKEGG()  for(comparison in names(ResList)){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   DMA <- merge(Tissue_MetaData%>%tibble::rownames_to_column(\"Metabolite\") ,ResList[[comparison]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]], by=\"Metabolite\", all.y=TRUE)   DMA <- DMA[,c(1,10,12:17)]   DMA <- DMA[complete.cases(DMA),-1]#we remove metabolites that do not have a KEGG ID/KEGG pathway    #remove dublons   DMA_Select <- DMA%>%distinct(KEGG, .keep_all = TRUE)%>%remove_rownames()%>%tibble::column_to_rownames(\"KEGG\")    #Perform ORA   Res <- MetaProViz::StandardORA(InputData= DMA_Select, #Input data requirements: column `t.val` and column `Metabolite`                                  SettingsInfo=c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"MetaboliteID\"),                                  PathwayFile=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                  PathwayName=paste0(\"KEGG_\", comparison, sep=\"\"),                                  minGSSize=3,                                  maxGSSize=1000,                                  pCutoff=0.01,                                  PercentageCutoff=10)    DM_ORA_res[[comparison]] <- Res      #Select to plot:   Res_Select <- Res[[\"ClusterGoSummary\"]]%>%     filter(p.adjust<0.1)%>%     #filter(pvalue<0.05)%>%       filter(Percentage_of_Pathway_detected>10)      if(is.null(Res_Select)==FALSE){      MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        InputData= DMA_Select, #Must be the data you have used as an input for the pathway analysis                        InputData2=as.data.frame(Res_Select )%>%dplyr::rename(\"term\"=\"ID\"),                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"MetaboliteID\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        PlotName= paste(\"KEGG_\", comparison, sep=\"\"),                        Subtitle= \"PEA\" )   } } #>"},{"path":"/articles/sample-metadata.html","id":"biological-regulated-clustering","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Biological regulated clustering","title":"Sample Metadata Analysis","text":"understand metabolites changing independent patients age, hence due tumour versus normal, metabolites change independent tumour versus normal, hence due different age, can use MetaProViz::MCA_2Cond() function. Metabolite Clustering Analysis (MCA) enables clustering metabolites groups based logical regulatory rules. set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Thereby “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. information can also check vignettes. Now can use information colour code volcano plot. plot individual vocano plots metabolite pathway defined feature metadata provided part data (Hakimi et al. 2016).","code":"MCAres <-  MetaProViz::MCA_2Cond(InputData_C1=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]],                                  InputData_C2=ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]],                                  SettingsInfo_C1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  SettingsInfo_C2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  FeatureID = \"Metabolite\",                                  SaveAs_Table = \"csv\",                                  BackgroundMethod=\"C1&C2\"#Most stringend background setting, only includes metabolites detected in both comparisons                                  ) #Add metabolite information such as KEGG ID or pathway to results MetaData_Metab <- merge(x=Tissue_MetaData,                    y= MCAres[[\"MCA_2Cond_Results\"]][, c(1, 14:15)]%>%tibble::column_to_rownames(\"Metabolite\"),                    by=0,                    all.y=TRUE)%>%   tibble::column_to_rownames(\"Row.names\")  MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"Young\", InputData2= \"Old\"),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\",                        SettingsInfo = c(individual = \"SUPER_PATHWAY\",                                         color = \"RG2_Significant\"))  MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"Young\", InputData2= \"Old\"),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL_Sub\",                        Subtitle= \"Results of DMA\",                        SettingsInfo = c(individual = \"SUB_PATHWAY\",                                         color = \"RG2_Significant\"))"},{"path":"/articles/sample-metadata.html","id":"pathway-enrichment","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pathway enrichment","title":"Sample Metadata Analysis","text":"Next, perform Representation Analysis (ORA) using KEGG pathways comparison.","code":"#Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  MetaProViz::LoadKEGG()  for(comparison in names(ResList)){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   DMA <- merge(Tissue_MetaData%>%tibble::rownames_to_column(\"Metabolite\") ,ResList[[comparison]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]], by=\"Metabolite\", all.y=TRUE)   DMA <- DMA[,c(1,10,12:17)]   DMA <- DMA[complete.cases(DMA),-1]#we remove metabolites that do not have a KEGG ID/KEGG pathway    #remove dublons   DMA_Select <- DMA%>%distinct(KEGG, .keep_all = TRUE)%>%remove_rownames()%>%tibble::column_to_rownames(\"KEGG\")    #Perform ORA   Res <- MetaProViz::StandardORA(InputData= DMA_Select, #Input data requirements: column `t.val` and column `Metabolite`                                  SettingsInfo=c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"MetaboliteID\"),                                  PathwayFile=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                  PathwayName=paste0(\"KEGG_\", comparison, sep=\"\"),                                  minGSSize=3,                                  maxGSSize=1000,                                  pCutoff=0.01,                                  PercentageCutoff=10)    DM_ORA_res[[comparison]] <- Res      #Select to plot:   Res_Select <- Res[[\"ClusterGoSummary\"]]%>%     filter(p.adjust<0.1)%>%     #filter(pvalue<0.05)%>%       filter(Percentage_of_Pathway_detected>10)      if(is.null(Res_Select)==FALSE){      MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        InputData= DMA_Select, #Must be the data you have used as an input for the pathway analysis                        InputData2=as.data.frame(Res_Select )%>%dplyr::rename(\"term\"=\"ID\"),                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"MetaboliteID\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        PlotName= paste(\"KEGG_\", comparison, sep=\"\"),                        Subtitle= \"PEA\" )   } } #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_vline()`)."},{"path":"/articles/sample-metadata.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Sample Metadata Analysis","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tibble_3.2.1     tidyr_1.3.1      rlang_1.1.5      dplyr_1.1.4      magrittr_2.0.3   MetaProViz_2.1.7 #> [7] ggplot2_3.5.1    #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.4.3           later_1.4.1             ggplotify_0.1.2         R.oo_1.27.0             #>   [5] cellranger_1.1.0        XML_3.99-0.18           factoextra_1.0.7        lifecycle_1.0.4         #>   [9] httr2_1.1.2             tcltk_4.4.3             rstatix_0.7.2           lattice_0.22-5          #>  [13] vroom_1.6.5             MASS_7.3-64             backports_1.5.0         limma_3.62.2            #>  [17] sass_0.4.9              rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             #>  [21] ggtangle_0.0.6          zip_2.3.2               sessioninfo_1.2.3       EnhancedVolcano_1.24.0  #>  [25] qcc_2.7                 cowplot_1.1.3           DBI_1.2.3               RColorBrewer_1.1-3      #>  [29] lubridate_1.9.4         abind_1.4-8             zlibbioc_1.52.0         rvest_1.0.4             #>  [33] purrr_1.0.4             R.utils_2.13.0          BiocGenerics_0.52.0     hash_2.2.6.3            #>  [37] yulab.utils_0.2.0       rappdirs_0.3.3          GenomeInfoDbData_1.2.13 IRanges_2.40.1          #>  [41] S4Vectors_0.44.0        enrichplot_1.26.6       ggrepel_0.9.6           tidytree_0.4.6          #>  [45] pheatmap_1.0.12         pkgdown_2.1.1           svglite_2.1.3           codetools_0.2-20        #>  [49] DOSE_4.0.1              xml2_1.3.8              tidyselect_1.2.1        aplot_0.2.5             #>  [53] UCSC.utils_1.2.0        farver_2.1.2            stats4_4.4.3            jsonlite_2.0.0          #>  [57] Formula_1.2-5           systemfonts_1.2.1       tools_4.4.3             progress_1.2.3          #>  [61] treeio_1.30.0           ragg_1.3.3              Rcpp_1.0.14             ggVennDiagram_1.5.2     #>  [65] glue_1.8.0              gridExtra_2.3           xfun_0.51               qvalue_2.38.0           #>  [69] GenomeInfoDb_1.42.3     withr_3.0.2             fastmap_1.2.0           digest_0.6.37           #>  [73] gridGraphics_0.5-1      timechange_0.3.0        R6_2.6.1                textshaping_1.0.0       #>  [77] colorspace_2.1-1        GO.db_3.20.0            gtools_3.9.5            RSQLite_2.3.9           #>  [81] R.methodsS3_1.8.2       generics_0.1.3          data.table_1.17.0       prettyunits_1.2.0       #>  [85] httr_1.4.7              htmlwidgets_1.6.4       inflection_1.3.6        pkgconfig_2.0.3         #>  [89] gtable_0.3.6            blob_1.2.4              XVector_0.46.0          clusterProfiler_4.14.6  #>  [93] OmnipathR_3.15.12       htmltools_0.5.8.1       carData_3.0-5           fgsea_1.33.4            #>  [97] scales_1.3.0            kableExtra_1.4.0        Biobase_2.66.0          png_0.1-8               #> [101] ggfun_0.1.8             knitr_1.50              rstudioapi_0.17.1       tzdb_0.5.0              #> [105] reshape2_1.4.4          nlme_3.1-167            checkmate_2.3.2         curl_6.2.2              #> [109] cachem_1.1.0            stringr_1.5.1           parallel_4.4.3          vipor_0.4.7             #> [113] AnnotationDbi_1.68.0    desc_1.4.3              pillar_1.10.1           grid_4.4.3              #> [117] logger_0.4.0            vctrs_0.6.5             ggpubr_0.6.0            car_3.1-3               #> [121] beeswarm_0.4.0          evaluate_1.0.3          readr_2.1.5             cli_3.6.4               #> [125] compiler_4.4.3          crayon_1.5.3            ggsignif_0.6.4          labeling_0.4.3          #> [129] plyr_1.8.9              fs_1.6.5                ggbeeswarm_0.7.2        stringi_1.8.7           #> [133] viridisLite_0.4.2       BiocParallel_1.40.0     munsell_0.5.1           Biostrings_2.74.1       #> [137] lazyeval_0.2.2          GOSemSim_2.32.0         Matrix_1.7-2            hms_1.1.3               #> [141] patchwork_1.3.0         bit64_4.6.0-1           KEGGREST_1.46.0         statmod_1.5.0           #> [145] igraph_2.1.4            broom_1.0.8             memoise_2.0.1           bslib_0.9.0             #> [149] ggtree_3.14.0           fastmatch_1.1-6         bit_4.6.0               readxl_1.4.5            #> [153] gson_0.1.0              ape_5.8-1"},{"path":[]},{"path":"/articles/standard-metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"Standard Metabolomics","title":"Standard Metabolomics","text":"standard metabolomics experiment refers intracellular extracts (e.g. cell bacteria culture), tissue samples (e.g. animals patients), plasma samples (e.g. blood) many types experimental setups.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (DMA) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(ggfortify) library(tibble)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/standard-metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Standard Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. Intracellular experiment (Intra) raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. can load ToyData, includes columns Sample information columns measured metabolite integrated peaks. Preview DF Intra including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Intra <- MetaProViz::ToyData(Data=\"IntraCells_Raw\") MappingInfo <- MetaProViz::ToyData(Data=\"Cells_MetaData\") #This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG()"},{"path":"/articles/standard-metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"Standard Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/standard-metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Standard Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter TIC_Normalization refers Total Ion Count (TIC) normalisation, often used LC-MS derived metabolomics data. TIC_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, TIC normalisation used small number features (= metabolites), since TIC assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter MVI refers Missing Value Imputation (MVI) MVI = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter HotellinsConfidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations TIC part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.    Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition 786-M2A, can see based Hotellin’s T2 test, one sample detected outlier first round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see VizPCA() function. proceed, remove outlier: may noticed, example dataset several biological replicates injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function ReplicateSum(), task save results: Using pre-processed data, can now use MetaProViz visualization module generate overview Heatmaps VizHeatmap() PCA plots VizPCA(). can see examples .","code":"#### Select Pool samples: #Get the Pool data PoolData <- MetaProViz::ToyData(Data=\"IntraCells_Raw\") %>%   subset(Conditions==\"Pool\", select = -c(1:3)) # we remove the columns \"Conditions\", \"Analytical_Replicates\" and \"Biological_Replicates\"  # Check the metabolite variability Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = PoolData,                                                      SettingsFile_Sample = NULL,                                                      SettingsInfo = NULL,                                                      CutoffCV = 30) #### Alternatively a full dataset can be added. Here, the Conditions and PoolSamples name have to be specified in the Input_SettingsInfo Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = Intra[,-c(1:3)],                                                      SettingsFile_Sample = Intra[,1:3],                                                      SettingsInfo = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                      CutoffCV = 30)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] PreprocessingResults <- MetaProViz::PreProcessing(InputData=Intra[-c(49:58) ,-c(1:3)], #remove pool samples and columns with sample information                                                   SettingsFile_Sample=Intra[-c(49:58) , c(1:3)], #remove pool samples and columns with metabolite measurements                                                   SettingsInfo = c(Conditions = \"Conditions\",                                                                     Biological_Replicates = \"Biological_Replicates\"),                                                   FeatureFilt = \"Modified\",                                                   FeatureFilt_Value = 0.8,                                                   TIC = TRUE,                                                   MVI = TRUE,                                                   HotellinsConfidence = 0.99,# We perform outlier testing using 0.99 confidence intervall                                                   CoRe = FALSE,                                                   SaveAs_Plot = \"svg\",                                                   SaveAs_Table= \"csv\",                                                   PrintPlot = TRUE,                                                   FolderPath = NULL)   # This is the results table: Intra_Preprocessed <- PreprocessingResults[[\"DF\"]][[\"Preprocessing_output\"]] #> FeatureFiltering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: AICAR, FAICAR, SAICAR #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> Total Ion Count (TIC) normalization: Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360–378, doi:https://doi.org/10.1214/aoms/1177732979). HotellinsConfidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS55_29 Intra_Preprocessed <- Intra_Preprocessed%>%   filter(Outliers==\"no\")#remove MS55_29 Intra_Preprocessed <- MetaProViz::ReplicateSum(InputData=Intra_Preprocessed[,-c(1:4)],                                                SettingsFile_Sample=Intra_Preprocessed[,c(1:4)],                                                SettingsInfo = c(Conditions=\"Conditions\", Biological_Replicates=\"Biological_Replicates\", Analytical_Replicates=\"Analytical_Replicates\"))"},{"path":"/articles/standard-metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Standard Metabolomics","text":"Differential Metabolite Analysis (DMA) used compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior DMA. Moreover, require Input_SettingsFile_Sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_SettingsFile_Metab containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_SettingsInfo parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) Noteworthy, performed missing value imputation hence data includes NAs 0 values features, deal DMA() function: 1. use parameter STAT_pval=\"lmFit\", limma performed. Limma baesian fit data substracts Mean(Condition1 fit) - Mean(Condition2 fit). , unless values feature NA, Limma can deal NAs. 2. Standard Log2FC: log2(Mean(Condition1)) - log2(Mean(Condition2)) . values replicates one condition NA/0 feature (=metabolite): Log2FC= Inf/-Inf statistics NA b. values replicates one condition NA/0 feature (=metabolite): Log2FC= positive negative value, statistics NA important mention case STAT_pval=\"lmFit\", perform log2 transformation data prior running limma enable calculation log2FC, hence provide log2 transformed data. , example data four different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A 786-O), hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview DMA results comparison 786-M1A versus HK2 cells. Using DMA results, can now use MetaProViz visualization module generate customized Volcano plots VizVolcano(). can see examples .","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <- MetaProViz::DMA(InputData=Intra_Preprocessed[,-c(1:3)], #we need to remove columns that do not include metabolite measurements                               SettingsFile_Sample=Intra_Preprocessed[,c(1:3)],#only maintain the information about condition and replicates                               SettingsInfo = c(Conditions=\"Conditions\", Numerator=NULL , Denominator = \"HK2\"),# we compare all_vs_HK2                               SettingsFile_Metab = MappingInfo,# Adds metadata for the metabolites such as KEGG_ID, Pathway, retention time,...                               StatPval =\"aov\",                               StatPadj=\"fdr\")  #Inspect the DMA results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]] Shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition 786-M1A 94.41 % of the metabolites follow a normal distribution and 5.59 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 97.79 % of the metabolites follow a normal distribution and 2.21 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.03 % of the metabolites follow a normal distribution and 4.97 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition HK2 96.13 % of the metabolites follow a normal distribution and 3.87 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 83.24% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov."},{"path":"/articles/standard-metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > DMA","what":"ORA using the DMA results","title":"Standard Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites (see MCA ). interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA DMA results, ensure metabolite names match KEGG IDs KEGG trivial names. general, PathwayFile requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells.","code":"#Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"DMA\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   DMA <- DMA_Annova[[\"DMA\"]][[comparison]]   DMA <- DMA[complete.cases(DMA),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway   dplyr::rename(\"Metabolite\"=\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways    #Perform ORA   DM_ORA_res[[comparison]] <- MetaProViz::StandardORA(InputData= DMA%>%remove_rownames()%>%tibble::column_to_rownames(\"Metabolite\"), #Input data requirements: column `t.val` and column `Metabolite`                                                        SettingsInfo=c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                        PathwayFile=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                                        PathwayName=\"KEGG\",                                                        minGSSize=3,                                                        maxGSSize=1000,                                                        pCutoff=0.01,                                                        PercentageCutoff=10)   } #>   #Lets check how the results look like: DM_ORA_786M1A_vs_HK2 <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"ClusterGoSummary\"]]"},{"path":"/articles/standard-metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"Standard Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups either based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/standard-metabolomics.html","id":"mca-2cond","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MCA-2Cond","title":"Standard Metabolomics","text":"metabolite clustering method based Regulatory Clustering Method (RCM) developed part Signature Regulatory Clustering (SiRCle) model (Mora et al. (2024)). part SiRCleR package, also variation initial RCM method proposed clustering based two comparisons (e.g. KO versus WT hypoxia normoxia). set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons, can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods backgroundMethod following 1.1. - 1.4. restrictive least restrictive:1.1. C1&C2: stringend background setting lead small number metabolites.1.2. C1: Focus metabolite abundance Condition 1 (C1).1.3. C2: Focus metabolite abundance Condition 2 (C2).1.4. C1|C2: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “Core_UP”. two 6-state6 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). Metabolite Clustering Analysis: 2 Conditions. Now let’s use data clustering: Summary MCA: 2 Conditions.","code":"#Example of all possible flows: MCA_2Cond <- MetaProViz::MCA_rules(Method=\"2Cond\") MCAres <-  MetaProViz::MCA_2Cond(InputData_C1=DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]],                                  InputData_C2=DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]],                                  SettingsInfo_C1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  SettingsInfo_C2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  FeatureID = \"Metabolite\",                                  SaveAs_Table = \"csv\",                                  BackgroundMethod=\"C1&C2\",                                  FolderPath=NULL)    # Check how our data looks like: ClusterSummary <- MCAres[[\"MCA_2Cond_Summary\"]]"},{"path":"/articles/standard-metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"Standard Metabolomics","text":"Pathway Input MetaProViz::MC_ORA.","code":""},{"path":"/articles/standard-metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"Standard Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_SettingsInfo user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_SettingsFile_Sample Plot_SettingsFile_Metab. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Intra_Preprocessed[,c(1:2)]%>%    mutate(Celltype = case_when(Conditions==\"HK2\" ~ 'Healthy',                                Conditions==\"786-O\" ~ 'Primary Tumour',                                TRUE ~ 'Metastatic Tumour'))%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-merge(MappingInfo%>%tibble::rownames_to_column(\"Metabolite\"), MCAres[[\"MCA_2Cond_Results\"]][,c(1, 14,15)], by=\"Metabolite\", all.y=TRUE)%>%   tibble::column_to_rownames(\"Metabolite\")"},{"path":"/articles/standard-metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"Standard Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::VizPCA(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . becomes apparent cell status responsible 64% variance (x-axis). Figure: samples cluster Cell status? can separate cancerous cell lines metastatic primary. shows us separated y-axis accounts 30%variance. Figure: samples cluster Cell type? Lastly, worth mentioning one can also change many style parameters customize plot.","code":"Input_PCA <- Intra_Preprocessed[,-c(1:5)]#remove columns that include Metadata such as cell type,... MetaProViz::VizPCA(InputData=Input_PCA,                    ) MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Batch Effect\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Sample Conditions\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Status\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Sample Status\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Celltype\", shape=\"Status\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Cell type\")"},{"path":"/articles/standard-metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"Standard Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizHeatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_FeatureNames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_SettingsInfo. time can still maintain metadata information , samples metabolites. Together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster Core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.","code":"Input_Heatmap <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        PlotName = \"Overview\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Celltype\", \"Status\")),                        PlotName = \"Colour Samples\") # row annotation: Color for Metabolites MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Metab = list(\"Pathway\")),                        SettingsFile_Metab =  MappingInfo,                        PlotName = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"RG2_Significant\")),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName = \"Pathway\")"},{"path":"/articles/standard-metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"Standard Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizSuperplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).   Now, instance prefer boxplots bargraphs can simply change parameter PlotType:  can also change violin plots:","code":"Input_Superplot <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Bar\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Box\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Violin\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/standard-metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"Standard Metabolomics","text":"Input_data MetaProViz::VizVolcano() example differential analysis results MetaProViz::DMA(). Input_data MetaProViz::VizVolcano() example pathway enrichment results MetaProViz::DM_ORA().","code":""},{"path":"/articles/standard-metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"Standard Metabolomics","text":"first look results differential analysis (see section DMA ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying DMA results. seek plot metabolite names can change paramter SelectLab default (SelectLab=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying DMA results. parameter SelectLab can also pass vector Metabolite names labeled: Figure: Standard figure displaying DMA results. Next may interested understand metabolite clusters based MCA metabolites plot correspond . order can provide Plot_SettingsFile additional information use information color code /shape dots volcano plot. order choose right column need provide vector Plot_SettingsInfo information. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_SettingsInfo information (color) used Input_data. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters MCA results. immediately see many pathways displayed plot, can make difficult interpret. Hence, change plot settings order get individual plots pathways:","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\")) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        SelectLab = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        SelectLab = c(\"N-acetylaspartylglutamate\", \"cystathionine\", \"orotidine\")) #Now we need to add our Plot_SettingsFile and the Plot_SettingsInfo: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"RG2_Significant\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour coded for metabolic clusters\" ) #If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_SettingsInfo MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"RG2_Significant\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape for metabolic clusters, color for significance.\" ) #Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"RG2_Significant\", color=\"RG2_Significant\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape and color for metabolic clusters.\" ) #Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"Pathway\"),                        SettingsFile_Metab= MappingInfo,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2 Results of DMA. Colour for metabolic pathways.\",                        Subtitle= \"Results of DMA. Colour for metabolic pathways.\" ) #Now we can generate a plot for each pathway and color for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"RG2_Significant\", individual=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour for metabolic pathways.\" )"},{"path":"/articles/standard-metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"Standard Metabolomics","text":"Figure: Comparison. Now individual plots :","code":"MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(individual=\"Pathway\"),                        SettingsFile_Metab= MappingInfo,                        InputData=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" )"},{"path":"/articles/standard-metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"Standard Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. need prepare correct input data including pathways used run pathway analysis, differential metabolite data used input pathway analysis results pathway analysis: Now can produce plots:","code":"#Prepare the Input: #1. InputData=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file SettingsFile_Metab. InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   tibble::column_to_rownames(\"KEGGCompound\")  #2. InputData2=Pathway analysis output: Must have same column names as SettingsFile_Metab for Pathway name InputPEA2 <- DM_ORA_786M1A_vs_HK2 %>%   dplyr::rename(\"term\"=\"ID\")  #3. SettingsFile_Metab= Pathways used for pathway analysis: Must have same column names as SettingsFile_Metab for Pathway name and feature names need to match features in the InputData. PEA_Feature passes this column name! MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"Metabolite\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        InputData= InputPEA, #Must be the data you have used as an input for the pathway analysis                        InputData2= InputPEA2, #Must be the results of the pathway analysis                        PlotName= \"KEGG\",                        Subtitle= \"PEA\" ,                        SelectLab = NULL)"},{"path":"/articles/standard-metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Standard Metabolomics","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tibble_3.2.1     ggfortify_0.4.17 rlang_1.1.5      dplyr_1.1.4      magrittr_2.0.3   MetaProViz_2.1.7 #> [7] ggplot2_3.5.1    #>  #> loaded via a namespace (and not attached): #>   [1] splines_4.4.3           later_1.4.1             ggplotify_0.1.2         R.oo_1.27.0             #>   [5] cellranger_1.1.0        XML_3.99-0.18           factoextra_1.0.7        lifecycle_1.0.4         #>   [9] httr2_1.1.2             tcltk_4.4.3             rstatix_0.7.2           lattice_0.22-5          #>  [13] vroom_1.6.5             MASS_7.3-64             backports_1.5.0         limma_3.62.2            #>  [17] sass_0.4.9              rmarkdown_2.29          jquerylib_0.1.4         yaml_2.3.10             #>  [21] ggtangle_0.0.6          zip_2.3.2               sessioninfo_1.2.3       EnhancedVolcano_1.24.0  #>  [25] qcc_2.7                 cowplot_1.1.3           DBI_1.2.3               RColorBrewer_1.1-3      #>  [29] lubridate_1.9.4         abind_1.4-8             zlibbioc_1.52.0         rvest_1.0.4             #>  [33] purrr_1.0.4             R.utils_2.13.0          BiocGenerics_0.52.0     hash_2.2.6.3            #>  [37] yulab.utils_0.2.0       rappdirs_0.3.3          GenomeInfoDbData_1.2.13 IRanges_2.40.1          #>  [41] S4Vectors_0.44.0        enrichplot_1.26.6       ggrepel_0.9.6           tidytree_0.4.6          #>  [45] pheatmap_1.0.12         pkgdown_2.1.1           svglite_2.1.3           codetools_0.2-20        #>  [49] DOSE_4.0.1              xml2_1.3.8              tidyselect_1.2.1        aplot_0.2.5             #>  [53] UCSC.utils_1.2.0        farver_2.1.2            stats4_4.4.3            jsonlite_2.0.0          #>  [57] Formula_1.2-5           systemfonts_1.2.1       tools_4.4.3             progress_1.2.3          #>  [61] treeio_1.30.0           ragg_1.3.3              Rcpp_1.0.14             glue_1.8.0              #>  [65] gridExtra_2.3           xfun_0.51               qvalue_2.38.0           GenomeInfoDb_1.42.3     #>  [69] withr_3.0.2             fastmap_1.2.0           digest_0.6.37           timechange_0.3.0        #>  [73] R6_2.6.1                gridGraphics_0.5-1      textshaping_1.0.0       colorspace_2.1-1        #>  [77] GO.db_3.20.0            gtools_3.9.5            RSQLite_2.3.9           R.methodsS3_1.8.2       #>  [81] tidyr_1.3.1             generics_0.1.3          data.table_1.17.0       prettyunits_1.2.0       #>  [85] httr_1.4.7              htmlwidgets_1.6.4       inflection_1.3.6        pkgconfig_2.0.3         #>  [89] gtable_0.3.6            blob_1.2.4              XVector_0.46.0          clusterProfiler_4.14.6  #>  [93] OmnipathR_3.15.12       htmltools_0.5.8.1       carData_3.0-5           fgsea_1.33.4            #>  [97] scales_1.3.0            kableExtra_1.4.0        Biobase_2.66.0          png_0.1-8               #> [101] ggfun_0.1.8             knitr_1.50              rstudioapi_0.17.1       tzdb_0.5.0              #> [105] reshape2_1.4.4          nlme_3.1-167            checkmate_2.3.2         curl_6.2.2              #> [109] cachem_1.1.0            stringr_1.5.1           parallel_4.4.3          vipor_0.4.7             #> [113] AnnotationDbi_1.68.0    desc_1.4.3              pillar_1.10.1           grid_4.4.3              #> [117] logger_0.4.0            vctrs_0.6.5             ggpubr_0.6.0            car_3.1-3               #> [121] beeswarm_0.4.0          evaluate_1.0.3          readr_2.1.5             cli_3.6.4               #> [125] compiler_4.4.3          crayon_1.5.3            ggsignif_0.6.4          labeling_0.4.3          #> [129] plyr_1.8.9              fs_1.6.5                ggbeeswarm_0.7.2        stringi_1.8.7           #> [133] viridisLite_0.4.2       BiocParallel_1.40.0     munsell_0.5.1           Biostrings_2.74.1       #> [137] lazyeval_0.2.2          GOSemSim_2.32.0         Matrix_1.7-2            hms_1.1.3               #> [141] patchwork_1.3.0         bit64_4.6.0-1           KEGGREST_1.46.0         statmod_1.5.0           #> [145] igraph_2.1.4            broom_1.0.8             memoise_2.0.1           bslib_0.9.0             #> [149] ggtree_3.14.0           fastmatch_1.1-6         bit_4.6.0               readxl_1.4.5            #> [153] gson_0.1.0              ape_5.8-1"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christina Schmidt. Author, maintainer. Denes Turei. Author. Dimitrios Prymidis. Author. Macabe Daley. Author. Julio Saez-Rodriguez. Author. Christian Frezza. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schmidt C, Turei D, Prymidis D, Daley M, Saez-Rodriguez J, Frezza C (2025). MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation. R package version 2.1.7, https://saezlab.github.io/MetaProViz.","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},   author = {Christina Schmidt and Denes Turei and Dimitrios Prymidis and Macabe Daley and Julio Saez-Rodriguez and Christian Frezza},   year = {2025},   note = {R package version 2.1.7},   url = {https://saezlab.github.io/MetaProViz}, }"},{"path":[]},{"path":"/index.html","id":"short-introduction","dir":"","previous_headings":"","what":"Short Introduction","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz (Metabolomics Processing, functional analysis Visualization), free open-source R-package provides mechanistic hypotheses metabolomics data integrating prior knowledge literature metabolomics. MetaProViz offers interactive framework consisting five modules: Processing, differential analysis, prior knwoledge access refactoring, functional analysis visualization intracellular exometabolomics (=consumption-release (CoRe) data). modules functions can used independently combination (Fig.1). Fig. 1: Overview MetaProViz functions. first module, MetaProViz, Processing, allows customized processing raw peak metabolomics data different experimental setups, including options perform feature filtering due missingness, Total Ion Count (TIC) normalisation, Missing Value Imputation (MVI) based half-minimum outlier detection based Hotellin’s T2. pre-processing parameters can customized combined needed. second module MetaProViz, Differential Metabolite Analysis (DMA), allows user perform differential analysis two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value, whereby user can choose test statistics. input can either output Preprocessing module DF including metabolite values information conditions compared. third module MetaProViz, Functional Analysis, includes different methods create clusters metabolites based distribution across data using logical regulatory rules, prior knowledge enrichment analysis functions perform representation analysis (ORA). , user can either input output Processing Differential Metabolite Analysis (DMA) module, DF including Log2FC statistics metabolite values. fourth module MetaProViz, Visualization, can easily create customized visualizations output results MetaProViz modules custom files. enable overview plots PCA, heatmap, Volcano plot, also individual graphs metabolite bar graphs, box plots violin plots. Moreover, user can provide additional information pathways metabolites correspond , clusters metabolites assigned meta-information customize plots color, shape selections, thus enabling biological interpretation results otherwise missed data.","code":""},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"generated several tutorials showcasing different functionalities MetaProViz offers using publicly available datasets, included example data within MetaProViz. can find tutorial top “Tutorials” button, can follow specific user case examples different analysis. Otherwise, can also follow links : - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media - Prior Knowledge Access & Integration - Sample Metadata Analysis find brief overview information installation package dependencies.","code":""},{"path":"/index.html","id":"example-data","dir":"","previous_headings":"","what":"Example Data","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"clear cell Renal Cell Carcinoma (ccRCC) patients data Hakimi et. al including 138 matched tumour normal tissue pairs (Hakimi et al. 2016). Cell-lines data intra- extracellular metabolomics data cell culture media metabolomics workbench project PR001418.  Additionally also added transcriptomics proteomics data ccRCC patients processed SiRCle (Mora et al. 2024), originally PDC000127 (Clark et al. 2019).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz R package install package, start R enter: Now MetaProViz can imported :","code":"devtools::install_github(\"https://github.com/saezlab/MetaProViz\") library(MetaProViz)"},{"path":"/index.html","id":"windows-specifications","dir":"","previous_headings":"Installation","what":"Windows specifications","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"Note running Windows might issue long paths, can resolve registry Windows 10: Computer Configuration > Administrative Templates > System > Filesystem > Enable Win32 long paths (different version Windows, just google “Long paths fix” Windows version)","code":""},{"path":"/index.html","id":"liscence","dir":"","previous_headings":"","what":"Liscence","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},    author = {Christina Schmidt, Denes Turei, Dimitrios Prymidis, Macabe Daley, Julio Saez-Rodriguez and Christian Frezza},   year = {2024},   note = {R package version 2.1.7}, }"},{"path":[]},{"path":[]},{"path":"/reference/ClusterORA.html","id":null,"dir":"Reference","previous_headings":"","what":" —————————  — ClusterORA","title":" —————————  — ClusterORA","text":"script allows ClusterORA","code":""},{"path":"/reference/ClusterORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" —————————  — ClusterORA","text":"","code":"ClusterORA(   InputData,   SettingsInfo = c(ClusterColumn = \"RG2_Significant\", BackgroundColumn = \"BG_Method\",     PathwayTerm = \"term\", PathwayFeature = \"Metabolite\"),   RemoveBackground = TRUE,   PathwayFile,   PathwayName = \"\",   minGSSize = 10,   maxGSSize = 1000,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/ClusterORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" —————————  — ClusterORA","text":"InputData DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) PathwayFile. SettingsInfo Optional:  Pass ColumnName column including cluster names ORA performed (=ClusterColumn). BackgroundColumn passes column name needed RemoveBackground=TRUE. Also pass ColumnName PathwayFile including term feature names. (ClusterColumn= ColumnName InputData, BackgroundColumn = ColumnName InputData, PathwayTerm= ColumnName PathwayFile, PathwayFeature= ColumnName PathwayFile) c(FeatureName=\"Metabolite\", ClusterColumn=\"RG2_Significant\", BackgroundColumn=\"BG_Method\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") RemoveBackground Optional:  TRUE, column BackgroundColumn  name needs SettingsInfo, includes TRUE/FALSE metabolite fall background based chosen Background method e.g. MCA_2Cond removed universe. default: TRUE PathwayFile DF must include column \"term\" pathway name, column \"Feature\" Metabolite name ID column \"Description\" pathway description. PathwayName Optional:  Name pathway list used default: \"\" minGSSize Optional:  minimum group size ORA default: 10 maxGSSize Optional:  maximum group size ORA default: 1000 SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/ClusterORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" —————————  — ClusterORA","text":"Saves results individual .csv files.","code":""},{"path":"/reference/ClusterORA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" —————————  — ClusterORA","text":"Uses enricher run ORA metabolite cluster MCA functions using pathway list","code":""},{"path":"/reference/DMA.html","id":null,"dir":"Reference","previous_headings":"","what":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"function allows perform differential metabolite analysis obtain Log2FC, pval, padj tval comparing two multiple conditions.","code":""},{"path":"/reference/DMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"","code":"DMA(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Numerator = NULL, Denominator = NULL),   StatPval = \"lmFit\",   StatPadj = \"fdr\",   SettingsFile_Metab = NULL,   CoRe = FALSE,   VST = FALSE,   PerformShapiro = TRUE,   PerformBartlett = TRUE,   Transform = TRUE,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/DMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. SettingsFile_Sample DF contains metadata information samples, combined input data based unique sample identifiers used rownames. SettingsInfo Optional:  Named vector including information conditions column information numerator denominator c(Conditions=\"ColumnName_SettingsFile\", Numerator = \"ColumnName_SettingsFile\", Denominator  = \"ColumnName_SettingsFile\"). Denominator Numerator specify comparison(s) done (one-vs-one, -vs-one, -vs-), e.g. Denominator=NULL Numerator =NULL selects condition performs multiple comparison -vs-. Log2FC obtained dividing numerator denominator, thus positive Log2FC values mean higher expression numerator. Default = c(conditions=\"Conditions\", numerator = NULL, denumerator = NULL) StatPval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test, wilcox.test, \"chisq.test\", \"cor.test\" lmFit (=limma), one-vs--vs-comparison choose aov (=anova), welch(=welch anova), kruskal.test lmFit (=limma) Default = \"lmFit\" StatPadj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = \"fdr\" SettingsFile_Metab Optional:  DF contains metadata information , .e. pathway information, retention time,..., metabolite. row names must match metabolite names columns InputData. Default = NULL CoRe Optional:  TRUE FALSE whether Consumption/Release  input used. Default = FALSE VST TRUE FALSE whether use variance stabilizing transformation data linear modeling used hypothesis testing. Default = FALSE PerformShapiro TRUE FALSE whether perform shapiro.test get informed data distribution (normal versus -normal distribution. Default = TRUE PerformBartlett TRUE FALSE whether perform bartlett.test. Default = TRUE Transform TRUE FALSE. TRUE expect data log2 transformed log2 transformation performed within limma function Log2FC calculation. FALSE expect data log2 transformed impacts Log2FC calculation limma. Default= TRUE SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/DMA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"Dependent parameter settings, list lists returned DMA (DF comparison), Shapiro (Includes DF Plot), Bartlett (Includes DF Histogram), VST (Includes DF Plot) VolcanoPlot (Plots comparison).","code":""},{"path":"/reference/DMA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"","code":"Intra <- MetaProViz::ToyData(\"IntraCells_Raw\")[-c(49:58) ,] ResI <- MetaProViz::DMA(InputData=Intra[ ,-c(1:3)],                        SettingsFile_Sample=Intra[ , c(1:3)],                        SettingsInfo = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\")) #> In `Numerator` 786-O, 786-M1A, 786-M2A, NA/0 values exist in 5 Metabolite(s). and in `denominator`HK2 2 Metabolite(s).. Those metabolite(s) might return p.val= NA, p.adj.= NA, t.val= NA. The Log2FC = Inf, if all replicates are 0/NA. #> There are NA's/0s in the data. This can impact the output of the SHapiro-Wilk test for all metabolites that include NAs/0s. #> Error occurred during Shapiro that performs the Shapiro-Wilk test. Message: all 'x' values are identical #> For 32.97% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using lmFit. #> Warning: Partial NA coefficients for 1 probe(s)"},{"path":"/reference/EquivalentIDs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find additional potential IDs for ","title":"Find additional potential IDs for ","text":"Find additional potential IDs  \"kegg\", \"pubchem\", \"chebi\", \"hmdb\"","code":""},{"path":"/reference/EquivalentIDs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find additional potential IDs for ","text":"","code":"EquivalentIDs(   InputData,   SettingsInfo = c(InputID = \"MetaboliteID\"),   From = \"hmdb\",   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/EquivalentIDs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find additional potential IDs for ","text":"InputData Dataframe least one column detected metabolite IDs (one ID per row). SettingsInfo Optional:  Column name metabolite IDs. Default = list(InputID=\"MetaboliteID\") ID type present data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = \"hmdb\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/EquivalentIDs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find additional potential IDs for ","text":"Input DF additional column including potential additional IDs.","code":""},{"path":"/reference/EquivalentIDs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find additional potential IDs for ","text":"","code":"DetectedIDs <- MetaProViz::ToyData(Data=\"Cells_MetaData\")%>% tibble::rownames_to_column(\"TrivialName\")%>%tidyr::drop_na() #> Error in MetaProViz::ToyData(Data = \"Cells_MetaData\") %>% tibble::rownames_to_column(\"TrivialName\") %>%     tidyr::drop_na(): could not find function \"%>%\" Res <- MetaProViz::EquivalentIDs(InputData= DetectedIDs, SettingsInfo = c(InputID=\"HMDB\"), From = \"hmdb\") #> Error: object 'DetectedIDs' not found"},{"path":"/reference/LoadGaude.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Knowledge Import — LoadGaude","title":"Prior Knowledge Import — LoadGaude","text":"Import process .csv file create Prior Knowledge.","code":""},{"path":"/reference/LoadGaude.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Knowledge Import — LoadGaude","text":"","code":"LoadGaude()"},{"path":"/reference/LoadGaude.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Knowledge Import — LoadGaude","text":"data frame containing Prior Knowledge.","code":""},{"path":"/reference/LoadHallmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Knowledge Import — LoadHallmarks","title":"Prior Knowledge Import — LoadHallmarks","text":"Import process .csv file create Prior Knowledge.","code":""},{"path":"/reference/LoadHallmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Knowledge Import — LoadHallmarks","text":"","code":"LoadHallmarks()"},{"path":"/reference/LoadHallmarks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Knowledge Import — LoadHallmarks","text":"data frame containing Prior Knowledge.","code":""},{"path":"/reference/LoadKEGG.html","id":null,"dir":"Reference","previous_headings":"","what":"KEGG — LoadKEGG","title":"KEGG — LoadKEGG","text":"Import process KEGG.","code":""},{"path":"/reference/LoadKEGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KEGG — LoadKEGG","text":"","code":"LoadKEGG()"},{"path":"/reference/LoadKEGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KEGG — LoadKEGG","text":"data frame containing KEGG pathways ORA.","code":""},{"path":"/reference/LoadKEGG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KEGG — LoadKEGG","text":"Imports KEGG pathways environment","code":""},{"path":"/reference/LoadKEGG.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KEGG — LoadKEGG","text":"","code":"KEGG_Pathways <- MetaProViz::LoadKEGG()"},{"path":"/reference/LoadMetalinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to — LoadMetalinks","title":"Function to — LoadMetalinks","text":"Function ","code":""},{"path":"/reference/LoadMetalinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to — LoadMetalinks","text":"","code":"LoadMetalinks(   types = NULL,   cell_location = NULL,   tissue_location = NULL,   biospecimen_location = NULL,   disease = NULL,   pathway = NULL,   hmdb_ids = NULL,   uniprot_ids = NULL,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/LoadMetalinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to — LoadMetalinks","text":"types Desired edge types. Options : \"lr\", \"pd\", 'lr' stands 'ligand-receptor' 'pd' stands 'production-degradation'.default: NULL cell_location Desired metabolite cell locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Cytoplasm\", \"Endoplasmic reticulum\", \"Extracellular\", \"Lysosome\" , \"Mitochondria\", \"Peroxisome\", \"Membrane\", \"Nucleus\", \"Golgi apparatus\" , \"Inner mitochondrial membrane\". default: NULL tissue_location Desired metabolite tissue locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Placenta\", \"Adipose Tissue\",\"Bladder\", \"Brain\", \"Epidermis\",\"Kidney\", \"Liver\", \"Neuron\", \"Pancreas\", \"Prostate\", \"Skeletal Muscle\", \"Spleen\", \"Testis\", \"Thyroid Gland\", \"Adrenal Medulla\", \"Erythrocyte\",\"Fibroblasts\", \"Intestine\", \"Ovary\", \"Platelet\", \"Tissues\", \"Semen\", \"Adrenal Gland\", \"Adrenal Cortex\", \"Heart\", \"Lung\", \"Hair\", \"Eye Lens\", \"Leukocyte\", Retina\", \"Smooth Muscle\", \"Gall Bladder\", \"Bile\",  \"Bone Marrow\", \"Blood\", \"Basal Ganglia\", \"Cartilage\". default: NULL biospecimen_location Desired metabolite biospecimen locations.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\").View options setting \"?\".  \"Blood\", \"Feces\", \"Saliva\", \"Sweat\", \"Urine\", \"Breast Milk\", \"Cellular Cytoplasm\", \"Cerebrospinal Fluid (CSF)\", \"Amniotic Fluid\" , \"Aqueous Humour\", \"Ascites Fluid\", \"Lymph\", \"Tears\", \"Breath\", \"Bile\", \"Semen\", \"Pericardial Effusion\".default: NULL disease Desired metabolite diseases.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". default: NULL pathway Desired metabolite pathways.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL hmdb_ids Desired HMDB IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL uniprot_ids Desired UniProt IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/LoadRAMP.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Knowledge Import — LoadRAMP","title":"Prior Knowledge Import — LoadRAMP","text":"Import process file create Prior Knowledge.","code":""},{"path":"/reference/LoadRAMP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Knowledge Import — LoadRAMP","text":"","code":"LoadRAMP(version = \"2.5.4\", SaveAs_Table = \"csv\", FolderPath = NULL)"},{"path":"/reference/LoadRAMP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior Knowledge Import — LoadRAMP","text":"version Optional:  Version RaMP database loaded OmniPathR. default: \"2.5.4\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/LoadRAMP.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Knowledge Import — LoadRAMP","text":"data frame containing Prior Knowledge.","code":""},{"path":"/reference/LoadRAMP.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior Knowledge Import — LoadRAMP","text":"","code":"ChemicalClass <- MetaProViz::LoadRAMP()"},{"path":"/reference/MCA_2Cond.html","id":"-","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules conditions.","code":""},{"path":[]},{"path":"/reference/MCA_2Cond.html","id":"--1","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules conditions.","code":""},{"path":"/reference/MCA_2Cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"","code":"MCA_2Cond(   InputData_C1,   InputData_C2,   SettingsInfo_C1 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   SettingsInfo_C2 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   FeatureID = \"Metabolite\",   SaveAs_Table = \"csv\",   BackgroundMethod = \"C1&C2\",   FolderPath = NULL )"},{"path":"/reference/MCA_2Cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"InputData_C1 DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. InputData_C2 DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. SettingsInfo_C1 Optional:  Pass ColumnNames Cutoffs condition 1 including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_C1,StatCol=ColumnName_InputData_C1, StatCutoff= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) SettingsInfo_C2 Optional:  Pass ColumnNames Cutoffs condition 2 includingthe value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_C2,StatCol=ColumnName_InputData_C2, StatCutoff= NumericValue, ValueCutoff=NumericValue)Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) FeatureID Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" Default = \"csv\" BackgroundMethod Optional:  Background method C1|C2, C1&C2, C2, C1 * Default=\"C1&C2\" FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/MCA_2Cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"List two DFs: 1. Summary cluster count 2. detailed information metabolites clusters.","code":""},{"path":"/reference/MCA_2Cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — MCA_2Cond","text":"","code":"Intra <- MetaProViz::ToyData(\"IntraCells_Raw\") Input <- MetaProViz::DMA(InputData=Intra[-c(49:58) ,-c(1:3)], SettingsFile_Sample=Intra[-c(49:58) , c(1:3)], SettingsInfo = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\")) #> In `Numerator` 786-O, 786-M1A, 786-M2A, NA/0 values exist in 5 Metabolite(s). and in `denominator`HK2 2 Metabolite(s).. Those metabolite(s) might return p.val= NA, p.adj.= NA, t.val= NA. The Log2FC = Inf, if all replicates are 0/NA. #> There are NA's/0s in the data. This can impact the output of the SHapiro-Wilk test for all metabolites that include NAs/0s. #> Error occurred during Shapiro that performs the Shapiro-Wilk test. Message: all 'x' values are identical #> For 32.97% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using lmFit. #> Warning: Partial NA coefficients for 1 probe(s)      Res <- MetaProViz::MCA_2Cond(InputData_C1 = Input[[\"DMA\"]][[\"786-O_vs_HK2\"]],                              InputData_C2 = Input[[\"DMA\"]][[\"786-M1A_vs_HK2\"]]) #> Warning: InputData_C1 includes NAs in Log2FC and/or in p.adj. 1 metabolites containing NAs are removed. #> Warning: InputData_C2 includes NAs in Log2FC and/or inp.adj. 1 metabolites containing NAs are removed."},{"path":"/reference/MCA_CoRe.html","id":null,"dir":"Reference","previous_headings":"","what":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules Intracellular culture media metabolomics (CoRe experiment).","code":""},{"path":"/reference/MCA_CoRe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","text":"","code":"MCA_CoRe(   InputData_Intra,   InputData_CoRe,   SettingsInfo_Intra = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   SettingsInfo_CoRe = c(DirectionCol = \"CoRe\", ValueCol = \"Log2(Distance)\", StatCol =     \"p.adj\", StatCutoff = 0.05, ValueCutoff = 1),   FeatureID = \"Metabolite\",   SaveAs_Table = \"csv\",   BackgroundMethod = \"Intra&CoRe\",   FolderPath = NULL )"},{"path":"/reference/MCA_CoRe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","text":"InputData_Intra DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. InputData_CoRe DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. additionally require SettingsInfo_Intra Optional:  Pass ColumnNames Cutoffs intracellular metabolomics including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_Intra,StatCol=ColumnName_InputData_Intra, StatCutoff= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) SettingsInfo_CoRe Optional:  Pass ColumnNames Cutoffs consumption-release metabolomics including direction column, value column (e.g. Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(DirectionCol= ColumnName_InputData_CoRe,ValueCol=ColumnName_InputData_CoRe,StatCol=ColumnName_InputData_CoRe, StatCutoff= NumericValue, ValueCutoff=NumericValue)Default=c(DirectionCol=\"CoRe\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) FeatureID Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" BackgroundMethod Optional:  Background method `Intra|CoRe, Intra&CoRe, CoRe, Intra * Default=\"Intra&CoRe\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MCA_CoRe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","text":"List two DFs: 1. Summary cluster count 2. detailed information metabolites clusters.","code":""},{"path":"/reference/MCA_CoRe.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (CoRe experiment). — MCA_CoRe","text":"","code":"Media <- MetaProViz::ToyData(\"CultureMedia_Raw\") ResM <- MetaProViz::PreProcessing(InputData = Media[-c(40:45) ,-c(1:3)],                                   SettingsFile_Sample = Media[-c(40:45) ,c(1:3)] ,                                   SettingsInfo = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\", CoRe_norm_factor = \"GrowthFactor\", CoRe_media = \"blank\"),                                   CoRe=TRUE) #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> FeatureFiltering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs MVI is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> Total Ion Count (TIC) normalization: Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Error in ggplot2::autoplot(stats::prcomp(as.matrix(InputData), scale. = as.logical(Scaling)),     data = InputPCA, x = PCx, y = PCy, colour = Param_Col, fill = Param_Col,     shape = Param_Sha, size = 3, alpha = 0.8, label = T, label.size = 2.5,     label.repel = TRUE, loadings = as.logical(ShowLoadings),     loadings.label = as.logical(ShowLoadings), loadings.label.vjust = 1.2,     loadings.label.size = 2.5, loadings.colour = \"grey10\", loadings.label.colour = \"grey10\"): Objects of class <prcomp> are not supported by autoplot. #> ℹ Have you loaded the required package?  MediaDMA <- MetaProViz::DMA(InputData=ResM[[\"DF\"]][[\"Preprocessing_output\"]][ ,-c(1:4)],                             SettingsFile_Sample=ResM[[\"DF\"]][[\"Preprocessing_output\"]][ , c(1:4)],                             SettingsInfo = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\"),                             StatPval =\"aov\",                             CoRe=TRUE) #> Error: object 'ResM' not found  IntraDMA <- MetaProViz::ToyData(Data=\"IntraCells_DMA\")  Res <- MetaProViz::MCA_CoRe(InputData_Intra = IntraDMA%>%tibble::rownames_to_column(\"Metabolite\"),                             InputData_CoRe = MediaDMA[[\"DMA\"]][[\"786-M1A_vs_HK2\"]]) #> Error in IntraDMA %>% tibble::rownames_to_column(\"Metabolite\"): could not find function \"%>%\""},{"path":"/reference/MCA_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"MCA regulatory rules Import — MCA_rules","title":"MCA regulatory rules Import — MCA_rules","text":"Import process .csv file create toy data.","code":""},{"path":"/reference/MCA_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCA regulatory rules Import — MCA_rules","text":"","code":"MCA_rules(Method)"},{"path":"/reference/MCA_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCA regulatory rules Import — MCA_rules","text":"Method Either \"2Cond\" \"CoRe\" depending regulatory rules like load","code":""},{"path":"/reference/MCA_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCA regulatory rules Import — MCA_rules","text":"data frame containing toy data.","code":""},{"path":"/reference/MCA_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCA regulatory rules Import — MCA_rules","text":"Imports MCA regulatory rules environment","code":""},{"path":"/reference/Make_GeneMetabSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"Function add metabolite HMDB IDs existing genesets based cosmosR prior knowledge","code":""},{"path":"/reference/Make_GeneMetabSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"","code":"Make_GeneMetabSet(   Input_GeneSet,   SettingsInfo = c(Target = \"gene\"),   PKName = NULL,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/Make_GeneMetabSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"Input_GeneSet Dataframe two columns source (=term) Target (=gene), e.g. Hallmarks. SettingsInfo Optional:   Column name Target Input_GeneSet. Default = c(Target=\"gene\") PKName Optional:  Name prior knowledge resource. default: NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/MappingAmbiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","title":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","text":"Create Mapping Ambiguities two ID types","code":""},{"path":"/reference/MappingAmbiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","text":"","code":"MappingAmbiguity(   InputData,   From,   To,   GroupingVariable = NULL,   Summary = FALSE,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/MappingAmbiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","text":"InputData Translated DF MetaProViz::TranslateID reults Dataframe least one column target metabolite ID another MetaboliteID type. One IDs can one ID per row, ID can either separated comma list. Optional: add columns source (e.g. term). Column name secondary translated metabolite identifier InputData. can multiple IDs per row either separated comma \" ,\" list IDs. Column name original metabolite identifier InputData. one ID per row. GroupingVariable Optional:  NULL groups used. TRUE provide column name InputData containing GroupingVariable features grouped. Default = NULL Summary Optional:  TRUE long summary tables created. Default = FALSE SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/MappingAmbiguity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","text":"List least 4 DFs: 1-3) --: 1. MappingIssues, 2. MappingIssues Summary, 3. Long summary (Summary=TRUE) & 4-6) --: 4. MappingIssues, 5. MappingIssues Summary, 6. Long summary (Summary=TRUE) & 7) Combined summary table (Summary=TRUE)","code":""},{"path":"/reference/MappingAmbiguity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mapping Ambiguities between two ID types — MappingAmbiguity","text":"","code":"KEGG_Pathways <- MetaProViz::LoadKEGG() InputDF <- MetaProViz::TranslateID(InputData= KEGG_Pathways, SettingsInfo = c(InputID=\"MetaboliteID\", GroupingVariable=\"term\"), From = c(\"kegg\"), To = c(\"pubchem\"))[[\"TranslatedDF\"]] Res <- MetaProViz::MappingAmbiguity(InputData= InputDF, From = \"MetaboliteID\", To = \"pubchem\", GroupingVariable = \"term\", Summary=TRUE) #> Error in bind_cols(., setNames(as.list(rep(NA, length(setdiff(names(ResList[[paste0(Comp[[comp]]$From,     \"-to-\", Comp[[comp]]$To, sep = \"\")]]), names(Removed))))),     setdiff(names(ResList[[paste0(Comp[[comp]]$From, \"-to-\",         Comp[[comp]]$To, sep = \"\")]]), names(Removed)))): could not find function \"bind_cols\""},{"path":"/reference/MetaAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","text":"function performs PCA analysis input data combines sample metadata perform ANOVA test identify significant differences groups.","code":""},{"path":"/reference/MetaAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","text":"","code":"MetaAnalysis(   InputData,   SettingsFile_Sample,   Scaling = TRUE,   Percentage = 0.1,   StatCutoff = 0.05,   VarianceCutoff = 1,   SaveAs_Table = \"csv\",   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/MetaAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL Scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE Percentage Optional:  Percentage top bottom features displayed results summary. Default = 0.1 StatCutoff Optional:  Cutoff adjusted p-value ANOVA test results summary heatmap. Default = 0.05 VarianceCutoff Optional:  Cutoff PCs variance displayed heatmap. Default = 1 SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MetaAnalysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","text":"List DFs: prcomp results, loadings, Top-Bottom features, annova results, results summary","code":""},{"path":"/reference/MetaAnalysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — MetaAnalysis","text":"","code":"Tissue_Norm <- MetaProViz::ToyData(\"Tissue_Norm\") Res <- MetaProViz::MetaAnalysis(InputData=Tissue_Norm[,-c(1:13)],                                 SettingsFile_Sample= Tissue_Norm[,c(2,4:5,12:13)]) #> The column names of the 'SettingsFile_Sample' contain special character that where removed."},{"path":"/reference/MetaPK.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta prior-knowledge — MetaPK","title":"Meta prior-knowledge — MetaPK","text":"Meta prior-knowledge","code":""},{"path":"/reference/MetaPK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta prior-knowledge — MetaPK","text":"","code":"MetaPK(   InputData,   SettingsFile_Sample,   SettingsInfo = NULL,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/MetaPK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta prior-knowledge — MetaPK","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL SettingsInfo Optional:  NULL vector column names used, .e. c(\"Age\", \"gender\", \"Tumour-stage\"). default: NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MetaPK.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta prior-knowledge — MetaPK","text":"DF prior knowledge based patient metadata","code":""},{"path":"/reference/MetaPK.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta prior-knowledge — MetaPK","text":"","code":"Tissue_Norm <- MetaProViz::ToyData(\"Tissue_Norm\") Res <- MetaProViz::MetaPK(InputData=Tissue_Norm[,-c(1:13)],                           SettingsFile_Sample= Tissue_Norm[,c(2,4:5,12:13)])"},{"path":"/reference/MetaProViz_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse the current MetaProViz log file — MetaProViz_log","title":"Browse the current MetaProViz log file — MetaProViz_log","text":"Browse current MetaProViz log file","code":""},{"path":"/reference/MetaProViz_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse the current MetaProViz log file — MetaProViz_log","text":"","code":"MetaProViz_log()"},{"path":"/reference/MetaProViz_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse the current MetaProViz log file — MetaProViz_log","text":"Returns NULL.","code":""},{"path":[]},{"path":"/reference/MetaProViz_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse the current MetaProViz log file — MetaProViz_log","text":"","code":"if (FALSE) { # \\dontrun{ metaproviz_log() # then you can browse the log file, and exit with `q` } # }"},{"path":"/reference/MetaProViz_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to the current MetaProViz log file — MetaProViz_logfile","title":"Path to the current MetaProViz log file — MetaProViz_logfile","text":"Path current MetaProViz log file","code":""},{"path":"/reference/MetaProViz_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to the current MetaProViz log file — MetaProViz_logfile","text":"","code":"MetaProViz_logfile()"},{"path":"/reference/MetaProViz_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to the current MetaProViz log file — MetaProViz_logfile","text":"Character: path current logfile, NULL logfile available.","code":""},{"path":[]},{"path":"/reference/MetaProViz_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to the current MetaProViz log file — MetaProViz_logfile","text":"","code":"metaproviz_logfile() #> Error in metaproviz_logfile(): could not find function \"metaproviz_logfile\" # [1] \"path/metaproviz/metaproviz-log/metaproviz-20210309-1642.log\""},{"path":"/reference/MetaProViz_set_loglevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the log level for the package logger — MetaProViz_set_loglevel","title":"Sets the log level for the package logger — MetaProViz_set_loglevel","text":"Sets log level package logger","code":""},{"path":"/reference/MetaProViz_set_loglevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the log level for the package logger — MetaProViz_set_loglevel","text":"","code":"MetaProViz_set_loglevel(level, target = \"logfile\")"},{"path":"/reference/MetaProViz_set_loglevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the log level for the package logger — MetaProViz_set_loglevel","text":"level Character class loglevel. desired log level. target Character, either 'logfile' 'console'","code":""},{"path":"/reference/MetaProViz_set_loglevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the log level for the package logger — MetaProViz_set_loglevel","text":"Returns NULL.","code":""},{"path":"/reference/MetaProViz_set_loglevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the log level for the package logger — MetaProViz_set_loglevel","text":"","code":"metaproviz_set_loglevel(logger::FATAL, target = 'console') #> Error in metaproviz_set_loglevel(logger::FATAL, target = \"console\"): could not find function \"metaproviz_set_loglevel\""},{"path":"/reference/PoolEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Find metabolites with high variability across total pool samples — PoolEstimation","title":"Find metabolites with high variability across total pool samples — PoolEstimation","text":"Find metabolites high variability across total pool samples","code":""},{"path":"/reference/PoolEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find metabolites with high variability across total pool samples — PoolEstimation","text":"","code":"PoolEstimation(   InputData,   SettingsFile_Sample = NULL,   SettingsInfo = NULL,   CutoffCV = 30,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/PoolEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find metabolites with high variability across total pool samples — PoolEstimation","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. Can either full dataset dataset pool samples. SettingsFile_Sample Optional:  DF contains information samples full dataset inserted Input_data. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), exist.Default = NULL SettingsInfo Optional:  NULL Named vector including Conditions PoolSample information (Name Conditions column Name pooled samples Conditions Input_SettingsFile)  : c(Conditions=\"ColumnNameConditions, PoolSamples=NamePoolCondition. Conditions added Input_SettingsInfo, assumed conditions column named 'Conditions' Input_SettingsFile. ). Default = NULL CutoffCV Optional:  Filtering cutoff high variance metabolites using Coefficient Variation. Default = 30 SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" PrintPlot Optional:  TRUE prints overview resulting plots. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/PoolEstimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find metabolites with high variability across total pool samples — PoolEstimation","text":"List two elements: DF (including input output table) Plot (including plots generated)","code":""},{"path":"/reference/PoolEstimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find metabolites with high variability across total pool samples — PoolEstimation","text":"","code":"Intra <- ToyData(\"IntraCells_Raw\") Res <- PoolEstimation(InputData=Intra[ ,-c(1:3)],                                 SettingsFile_Sample=Intra[ , c(1:3)],                                 SettingsInfo = c(PoolSamples = \"Pool\", Conditions=\"Conditions\")) #> Error in ggplot2::autoplot(stats::prcomp(as.matrix(InputData), scale. = as.logical(Scaling)),     data = InputPCA, x = PCx, y = PCy, colour = Param_Col, fill = Param_Col,     shape = Param_Sha, size = 3, alpha = 0.8, label = T, label.size = 2.5,     label.repel = TRUE, loadings = as.logical(ShowLoadings),     loadings.label = as.logical(ShowLoadings), loadings.label.vjust = 1.2,     loadings.label.size = 2.5, loadings.colour = \"grey10\", loadings.label.colour = \"grey10\"): Objects of class <prcomp> are not supported by autoplot. #> ℹ Have you loaded the required package?"},{"path":"/reference/PreProcessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","text":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation Outlier Detection: HotellingT2.","code":""},{"path":"/reference/PreProcessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","text":"","code":"PreProcessing(   InputData,   SettingsFile_Sample,   SettingsInfo,   FeatureFilt = \"Modified\",   FeatureFilt_Value = 0.8,   TIC = TRUE,   MVI = TRUE,   MVI_Percentage = 50,   HotellinsConfidence = 0.99,   CoRe = FALSE,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/PreProcessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers used rownames. SettingsInfo Named vector containing information names experimental parameters. c(Conditions=\"ColumnName_Plot_SettingsFile\", Biological_Replicates=\"ColumnName_Plot_SettingsFile\"). Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"BiologicalReplicates\" including numerical values. CoRe = TRUE CoRe_norm_factor = \"Columnname_Input_SettingsFile\" CoRe_media = \"Columnname_Input_SettingsFile\", also added. Column CoRe_norm_factor used normalization CoRe_media used specify name media controls Conditions. FeatureFilt Optional: NULL, feature filtering performed. set \"Standard\" applies 80%-filtering rule (Bijlsma S. et al., 2006) metabolite features whole dataset. set \"Modified\",filtering done based different conditions, thus column named \"Conditions\" must provided Input_SettingsFile input file including individual conditions want apply filtering (Yang, J et al., 2015). Default = \"Standard\" FeatureFilt_Value Optional:  Percentage feature filtering. Default = 0.8 TIC Optional:  TRUE, Total Ion Count normalization performed. Default = TRUE MVI Optional:  TRUE, Missing Value Imputation (MVI) based half minimum performed Default = TRUE MVI_Percentage Optional:  Percentage 0-100 imputed value based minimum value. Default = 50 HotellinsConfidence Optional:  Defines Confidence Outlier identification HotellingT2 test. Must numeric.Default = 0.99 CoRe Optional:  TRUE, consumption-release experiment performed CoRe value calculated. Please consider providing Normalisation factor column called \"CoRe_norm_factor\" \"Input_SettingsFile\" DF, column \"Conditions\" matches. normalisation factor must numerical value obtained growth rate obtained growth curve growth factor obtained ratio cell count/protein quantification start point cell count/protein quantification end point.. Additionally control media samples available \"Input\" DF defined \"CoRe_media\" samples \"Conditions\" column \"Input_SettingsFile\" DF. Default = FALSE SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. set NULL, plots saved. Default = svg SaveAs_Table Optional:  Select file type output table. Options \"csv\", \"xlsx\", \"txt\". set NULL, plots saved. Default = \"csv\" PrintPlot Optional:  TRUE prints overview resulting plots. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/PreProcessing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","text":"List two elements: DF (including output tables generated) Plot (including plots generated)","code":""},{"path":"/reference/PreProcessing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — PreProcessing","text":"","code":"Intra <- MetaProViz::ToyData(\"IntraCells_Raw\") ResI <- MetaProViz::PreProcessing(InputData=Intra[-c(49:58) ,-c(1:3)],                                  SettingsFile_Sample=Intra[-c(49:58) , c(1:3)],                                  SettingsInfo = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\")) #> FeatureFiltering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: AICAR, FAICAR, SAICAR #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> Total Ion Count (TIC) normalization: Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360–378, doi:https://doi.org/10.1214/aoms/1177732979). HotellinsConfidence value selected: 0.99 #> Error in ggplot2::autoplot(stats::prcomp(as.matrix(InputData), scale. = as.logical(Scaling)),     data = InputPCA, x = PCx, y = PCy, colour = Param_Col, fill = Param_Col,     shape = Param_Sha, size = 3, alpha = 0.8, label = T, label.size = 2.5,     label.repel = TRUE, loadings = as.logical(ShowLoadings),     loadings.label = as.logical(ShowLoadings), loadings.label.vjust = 1.2,     loadings.label.size = 2.5, loadings.colour = \"grey10\", loadings.label.colour = \"grey10\"): Objects of class <prcomp> are not supported by autoplot. #> ℹ Have you loaded the required package?  Media <- MetaProViz::ToyData(\"CultureMedia_Raw\") ResM <- MetaProViz::PreProcessing(InputData = Media[-c(40:45) ,-c(1:3)],                                   SettingsFile_Sample = Media[-c(40:45) ,c(1:3)] ,                                   SettingsInfo = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\", CoRe_norm_factor = \"GrowthFactor\", CoRe_media = \"blank\"),                                   CoRe=TRUE) #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> FeatureFiltering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs MVI is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> Total Ion Count (TIC) normalization: Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Error in ggplot2::autoplot(stats::prcomp(as.matrix(InputData), scale. = as.logical(Scaling)),     data = InputPCA, x = PCx, y = PCy, colour = Param_Col, fill = Param_Col,     shape = Param_Sha, size = 3, alpha = 0.8, label = T, label.size = 2.5,     label.repel = TRUE, loadings = as.logical(ShowLoadings),     loadings.label = as.logical(ShowLoadings), loadings.label.vjust = 1.2,     loadings.label.size = 2.5, loadings.colour = \"grey10\", loadings.label.colour = \"grey10\"): Objects of class <prcomp> are not supported by autoplot. #> ℹ Have you loaded the required package?"},{"path":"/reference/ReplicateSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges the analytical replicates of an experiment — ReplicateSum","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"Merges analytical replicates experiment","code":""},{"path":"/reference/ReplicateSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"","code":"ReplicateSum(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Biological_Replicates =     \"Biological_Replicates\", Analytical_Replicates = \"Analytical_Replicates\"),   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/ReplicateSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. #@param SettingsFile_Sample DF contains information samples Column \"Conditions\", \"Biological_replicates\" \"Analytical_Replicates exist. SettingsInfo Optional:  Named vector including Conditions Replicates information: c(Conditions=\"ColumnNameConditions\", Biological_Replicates=\"ColumnName_SettingsFile_Sample\", Analytical_Replicates=\"ColumnName_SettingsFile_Sample\").Default = NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/ReplicateSum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"DF merged analytical replicates","code":""},{"path":"/reference/ReplicateSum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"","code":"Intra <- ToyData(\"IntraCells_Raw\") Res <- ReplicateSum(InputData=Intra[-c(49:58) ,-c(1:3)],                                 SettingsFile_Sample=Intra[-c(49:58) , c(1:3)],                                 SettingsInfo = c(Conditions=\"Conditions\", Biological_Replicates=\"Biological_Replicates\", Analytical_Replicates=\"Analytical_Replicates\"))"},{"path":"/reference/StandardORA.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — StandardORA","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — StandardORA","text":"Uses enricher run ORA differential metabolites (DM) using pathway list","code":""},{"path":"/reference/StandardORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — StandardORA","text":"","code":"StandardORA(   InputData,   SettingsInfo = c(pvalColumn = \"p.adj\", PercentageColumn = \"t.val\", PathwayTerm =     \"term\", PathwayFeature = \"Metabolite\"),   pCutoff = 0.05,   PercentageCutoff = 10,   PathwayFile,   PathwayName = \"\",   minGSSize = 10,   maxGSSize = 1000,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/StandardORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — StandardORA","text":"InputData DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) PathwayFile. SettingsInfo Optional:  Pass ColumnName column including parameters use pCutoff PercentageCutoff. Also pass ColumnName PathwayFile including term feature names. (pvalColumn = ColumnName InputData, PercentageColumn= ColumnName InputData, PathwayTerm= ColumnName PathwayFile, PathwayFeature= ColumnName PathwayFile) c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") pCutoff Optional:  p-adjusted value cutoff ORA results. Must numeric value. default: 0.05 PercentageCutoff Optional:  Percentage cutoff metabolites considered ORA. Selects Top/Bottom % selected PercentageColumn, usually t.val Log2FC default: 10 PathwayFile DF must include column \"term\" pathway name, column \"Metabolite\" Metabolite name ID column \"Description\" pathway description depicted plots. PathwayName Optional:  Name PathwayFile used default: \"\" minGSSize Optional:  minimum group size ORA default: 10 maxGSSize Optional:  maximum group size ORA default: 1000 FolderPath Optional: Path folder results saved . default: NULL Save_as_Results Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\"","code":""},{"path":"/reference/StandardORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — StandardORA","text":"Saves results individual .csv files.","code":""},{"path":"/reference/ToyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Access built-in example data — ToyData","title":"Access built-in example data — ToyData","text":"Import process .csv file create toy data DF.","code":""},{"path":"/reference/ToyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access built-in example data — ToyData","text":"","code":"ToyData(Dataset)"},{"path":"/reference/ToyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access built-in example data — ToyData","text":"Dataset Character: name built-dataset: \"IntraCells_Raw\": \"IntraCells_DMA\": \"CultureMedia_Raw\": \"Cells_MetaData\": \"Tissue_Norm\": \"Tissue_MetaData\": \"Tissue_DMA\": \"Tissue_DMA_Old\": \"Tissue_DMA_Young\": \"Tissue_TvN_Proteomics\": \"Tissue_TvN_RNAseq\": \"EquivalentFeatures\": \"BiocratesFeatureTable\":","code":""},{"path":"/reference/ToyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access built-in example data — ToyData","text":"data frame containing toy data.","code":""},{"path":"/reference/ToyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access built-in example data — ToyData","text":"","code":"Intra <- MetaProViz::ToyData(\"IntraCells_Raw\")"},{"path":"/reference/TranslateID.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","text":"Translate IDs /KEGG, PubChem, Chebi, HMDB","code":""},{"path":"/reference/TranslateID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","text":"","code":"TranslateID(   InputData,   SettingsInfo = c(InputID = \"MetaboliteID\", GroupingVariable = \"term\"),   From = \"kegg\",   To = c(\"pubchem\", \"chebi\", \"hmdb\"),   Summary = FALSE,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/TranslateID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","text":"InputData Dataframe least one column target (e.g. metabolite), can add columns source (e.g. term). Must \"long\" DF, meaning one ID per row. SettingsInfo Optional:  Column name Target Input_GeneSet. Default = list(InputID=\"MetaboliteID\" , GroupingVariable=\"term\") ID type present data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = \"kegg\" One multiple ID types want translate data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = c(\"pubchem\",\"chebi\",\"hmdb\") Summary Optional:  TRUE long summary tables created. Default = FALSE SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/TranslateID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","text":"List least three DFs: 1) Original data new column translated ids spearated comma. 2) Mapping information Original ID Translated ID. 3) Mapping summary Original ID Translated ID.","code":""},{"path":"/reference/TranslateID.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — TranslateID","text":"","code":"KEGG_Pathways <- MetaProViz::LoadKEGG() Res <- MetaProViz::TranslateID(InputData= KEGG_Pathways, SettingsInfo = c(InputID=\"MetaboliteID\", GroupingVariable=\"term\"), From = c(\"kegg\"), To = c(\"pubchem\", \"hmdb\"))"},{"path":"/reference/VizHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap visualization — VizHeatmap","title":"Heatmap visualization — VizHeatmap","text":"Heatmap visualization","code":""},{"path":"/reference/VizHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap visualization — VizHeatmap","text":"","code":"VizHeatmap(   InputData,   SettingsInfo = NULL,   SettingsFile_Sample = NULL,   SettingsFile_Metab = NULL,   PlotName = \"\",   Scale = \"row\",   SaveAs_Plot = \"svg\",   Enforce_FeatureNames = FALSE,   Enforce_SampleNames = FALSE,   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap visualization — VizHeatmap","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. SettingsInfo Optional:  NULL Named vector  can include vectors lists annotation c(individual_Metab= \"ColumnName_SettingsFile_Metab\",individual_Sample= \"ColumnName_SettingsFile_Sample\", color_Metab=\"ColumnName_SettingsFile_Metab\", color_Sample= list(\"ColumnName_SettingsFile_Sample\", \"ColumnName_SettingsFile_Sample\",...)).Default = NULL SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers. columns required PlotSettingInfo.Default = NULL SettingsFile_Metab Optional:  DF column \"Metabolite\" including Metabolite names (needs match Metabolite names Input_data) columns required PlotSettingInfo. Default = NULL PlotName Optional:  String added output files plot Scale Optional:  String information Scale row, column none. Default = row SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" Enforce_FeatureNames Optional:  100 features rownames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE Enforce_SampleNames Optional:  50 sampless colnames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE Folder_Name Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/VizHeatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap visualization — VizHeatmap","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/VizHeatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap visualization — VizHeatmap","text":"","code":"Intra <- ToyData(\"IntraCells_Raw\") Res <- MetaProViz::VizHeatmap(InputData=Intra[,-c(1:3)])"},{"path":"/reference/VizPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","text":"script allows perform PCA plot visualization using results MetaProViz analysis PCA plot visualization","code":""},{"path":"/reference/VizPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","text":"","code":"VizPCA(   InputData,   SettingsInfo = NULL,   SettingsFile_Sample = NULL,   ColorPalette = NULL,   ColorScale = \"discrete\",   ShapePalette = NULL,   ShowLoadings = FALSE,   Scaling = TRUE,   PCx = 1,   PCy = 2,   Theme = NULL,   PlotName = \"\",   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","text":"SettingsInfo Optional:  NULL Named vector including least one three information : c(color=\"ColumnName_Plot_SettingsFile\", shape= \"ColumnName_Plot_SettingsFile\"). Default = NULL SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL ColorPalette Optional:  Provide customiced color-palette vector format. continuous scale use e.g. scale_color_gradient(low = \"#88CCEE\", high = \"red\") discrete scale c(\"#88CCEE\",  \"#DDCC77\",\"#661100\",  \"#332288\")Default = NULL ColorScale Optional:  Either \"continuous\" \"discrete\" colour scale. numeric integer can choose either, character choose discrete. Default = NULL ShapePalette Optional:  Provide customiced shape-palette vector format. Default = NULL ShowLoadings Optional:  TRUE FALSE whether PCA loadings also plotted PCA (biplot) Default = FALSE Scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE PCx Optional:  Numeric value PC plotted x-axis Default = 1 PCy Optional:  Numeric value PC plotted y-axis Default = 2 Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. default=NULL use theme_classic(). Default = \"discrete\" PlotName Optional:  String added output files PCA Default = \"\" SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL Input_data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column.","code":""},{"path":"/reference/VizPCA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/VizPCA.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — VizPCA","text":"","code":"Intra <- ToyData(\"IntraCells_Raw\")[,-c(1:3)] Res <- VizPCA(Intra) #> Error in ggplot2::autoplot(stats::prcomp(as.matrix(InputData), scale. = as.logical(Scaling)),     data = InputPCA, x = PCx, y = PCy, colour = Param_Col, fill = Param_Col,     shape = Param_Sha, size = 3, alpha = 0.8, label = T, label.size = 2.5,     label.repel = TRUE, loadings = as.logical(ShowLoadings),     loadings.label = as.logical(ShowLoadings), loadings.label.vjust = 1.2,     loadings.label.size = 2.5, loadings.colour = \"grey10\", loadings.label.colour = \"grey10\"): Objects of class <prcomp> are not supported by autoplot. #> ℹ Have you loaded the required package?"},{"path":"/reference/VizSuperplot.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","text":"script allows perform different visualizations (bar, box, violin plots) using results MetaProViz analysis Bar, Box Violin plot Superplot style visualization","code":""},{"path":"/reference/VizSuperplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","text":"","code":"VizSuperplot(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Superplot = NULL),   PlotType = \"Box\",   PlotName = \"\",   PlotConditions = NULL,   StatComparisons = NULL,   StatPval = NULL,   StatPadj = NULL,   xlab = NULL,   ylab = NULL,   Theme = NULL,   ColorPalette = NULL,   ColorPalette_Dot = NULL,   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizSuperplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\". SettingsInfo Named vector including least information conditions column: c(Conditions=\"ColumnName_SettingsFile_Sample\"). Additionally Superplots can made adding Superplot =\"ColumnName_SettingsFile_Sample\", usually biological replicates patient IDs. Default = c(Conditions=\"Conditions\", Superplot = NULL) PlotType String information Graph style. Available options Bar. Box Violin  Default = Box PlotName Optional:  String added output files plot. PlotConditions Vector names selected Conditions plot. Can also used order Conditions way displayed x-axis plot. Default = NULL StatComparisons List numeric vectors containing Condition pairs compare based order PlotConditions vector. Default = NULL StatPval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test wilcox.test , one-vs--vs-comparison choose aov (=anova) kruskal.test Default = NULL StatPadj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = NULL xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL ColorPalette Optional:  Provide customized ColorPalette vector format. Default = NULL ColorPalette_Dot Optional:  Provide customized ColorPalette vector format. Default = NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE plots saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/VizSuperplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/VizSuperplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — VizSuperplot","text":"","code":"Intra <- ToyData(\"IntraCells_Raw\")[,c(1:6)] Res <- VizSuperplot(InputData=Intra[,-c(1:3)], SettingsFile_Sample=Intra[,c(1:3)], SettingsInfo = c(Conditions=\"Conditions\", Superplot = NULL))"},{"path":"/reference/VizVolcano.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","text":"script allows perform different data visualizations using results MetaProViz analysis Volcano plot visualization","code":""},{"path":"/reference/VizVolcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","text":"","code":"VizVolcano(   PlotSettings = \"Standard\",   InputData,   SettingsInfo = NULL,   SettingsFile_Metab = NULL,   InputData2 = NULL,   y = \"p.adj\",   x = \"Log2FC\",   xlab = NULL,   ylab = NULL,   xCutoff = 0.5,   yCutoff = 0.05,   Connectors = FALSE,   SelectLab = \"\",   PlotName = \"\",   Subtitle = \"\",   ComparisonName = c(InputData = \"Cond1\", InputData2 = \"Cond2\"),   ColorPalette = NULL,   ShapePalette = NULL,   Theme = NULL,   SaveAs_Plot = \"svg\",   FolderPath = NULL,   Features = \"Metabolites\",   PrintPlot = TRUE )"},{"path":"/reference/VizVolcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","text":"SettingsInfo Optional:  NULL Named vector including least one three information Settings=\"Standard\" \"Compare\": c(color =\"ColumnName_SettingsFile_Metab\", shape = \"ColumnName_SettingsFile_Metab\", individual=\"ColumnName_SettingsFile_Metab\"). Settings=\"PEA\" named vector : PEA_Pathway=\"ColumnName_InputData2\"=pathway plotted, PEA_score=\"ColumnName_InputData2\", PEA_stat= \"ColumnName_InputData2\"= usually p.adj column, \"PEA_Feature=\"ColumnName_InputData2\"= usually Metabolites), optionally can additionally include c(color_Metab=\"ColumnName_SettingsFile_Metab\", shape= \"ColumnName_SettingsFile_Metab\").Default = NULL SettingsFile_Metab Optional:  DF column including Metabolite names (needs match Metabolite names Metabolite column name InputData) columns required PlotSettingInfo. Default = NULL InputData2 Optional:  DF compare main Input_data column names x y (Settings=\"Compare\") metabolites row names Pathway enrichment analysis results (Settings=\"PEA\"). Default = NULL y Optional:  Column name including values used y-axis. Usually include p.adjusted value. Default = \"p.adj\" x Optional:  Column name including values used x-axis. Usually include Log2FC value. Default = \"Log2FC\" xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL xCutoff Optional:  Number desired log fold change cutoff assessing significance. Default = 0.5 yCutoff Optional:  Number desired p value cutoff assessing significance. Default = 0.05 Connectors Optional:  TRUE FALSE whether Connectors names points added plot. Default =  FALSE SelectLab Optional:  set NULL, feature labels plotted randomly. vector provided, e.g. c(\"MetaboliteName1\", \"MetaboliteName2\"), selected names plotted. set default \"\", feature names plotted. Default = \"\" PlotName Optional:  String added output files plot. Default = \"\" Subtitle Optional:  Default = \"\" ComparisonName Optional:  Named vector including information two datasets compared plots choosing Settings= \"Compare\". Default = c(InputData=\"Cond1\", InputData2= \"Cond2\") ColorPalette Optional:  Provide customiced color-palette vector format. Default = NULL ShapePalette Optional:  Provide customiced shape-palette vector format. Default = NULL Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" FolderPath Optional: Path folder results saved . default: NULL Features Optional:  Name features plotted, e.g. \"Metabolites\", \"RNA\", \"Proteins\", \"Genes\", etc. Default = \"metabolites\" Settings Optional:  Choose \"Standard\" (InputData), \"Compare\" (plot two comparisons together InputData InputData2) \"PEA\" (Pathway Enrichment Analysis) Default = \"Standard\" Input_data DF metabolites row names columns including Log2FC stat (p-value, p.adjusted) value columns. FeatureID Optional:  Column name including feature names, e.g. metabolite names. Default = \"Metabolite\"","code":""},{"path":"/reference/VizVolcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/VizVolcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — VizVolcano","text":"","code":"Intra <- MetaProViz::ToyData(\"IntraCells_DMA\") Res <- MetaProViz::VizVolcano(InputData=Intra)"},{"path":"/reference/metaproviz_config_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Current config file path of MetaProViz — metaproviz_config_path","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Current config file path MetaProViz","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path(user = FALSE)"},{"path":"/reference/metaproviz_config_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"user Logical: prioritize user level config even config current working directory available.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Character: path config file.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path() #> [1] \"~/.config/MetaProViz/metaproviz.yml\""},{"path":"/reference/metaproviz_load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the package configuration from a config file — metaproviz_load_config","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Load package configuration config file","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"metaproviz_load_config(path = NULL, title = \"default\", user = FALSE, ...)"},{"path":"/reference/metaproviz_load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the package configuration from a config file — metaproviz_load_config","text":"path Path config file. title Load config title. One config file might contain multple configurations, identified title. title available first section config file used. user Force use user level config even config file exists current directory. default, local config files prioroty user level config. ... Passed yaml::yaml.load_file.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Invisibly returns config list.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"if (FALSE) { # \\dontrun{ # load the config from a custom config file: metaproviz_load_config(path = 'my_custom_metaproviz_config.yml') } # }"},{"path":"/reference/metaproviz_reset_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"Restore built-default values config parameters MetaProViz","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"metaproviz_reset_config(save = NULL, reset_all = FALSE)"},{"path":"/reference/metaproviz_reset_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"save path, restored config also saved file. TRUE, config saved current default config path (see metaproviz_config_path). reset_all Reset defaults also options already set R options.","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"config list.","code":""},{"path":[]},{"path":"/reference/metaproviz_reset_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"if (FALSE) { # \\dontrun{ # restore the defaults and write them to the default config file: metaproviz_reset_config() metaproviz_save_config() } # }"},{"path":"/reference/metaproviz_save_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the current package configuration — metaproviz_save_config","title":"Save the current package configuration — metaproviz_save_config","text":"Save current package configuration","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"metaproviz_save_config(path = NULL, title = \"default\", local = FALSE)"},{"path":"/reference/metaproviz_save_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the current package configuration — metaproviz_save_config","text":"path Path config file. Directories file created exist. title Save config title. One config file might contain multiple configurations, identified title. local Save config file current directory instead user level config file. loading, config current directory priority user level config.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the current package configuration — metaproviz_save_config","text":"Returns NULL.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"if (FALSE) { # \\dontrun{ # after this, all downloads will default to commercial licenses # i.e. the resources that allow only academic use will be excluded: options(metaproviz.console_loglevel = 'trace') metaproviz_save_config() } # }"}]
