[{"path":"/articles/core-metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"core Metabolomics","title":"core Metabolomics","text":"Consumption-Release (core) metabolomics experiment usually refers cell culture experiment metabolomics performed cell culture media.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (dma) generate Log2Distance statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools # devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  # dependencies that need to be loaded: library(magrittr) library(dplyr) library(tibble) library(rlang) library(ggfortify) library(stringr) library(tibble)  # Please install the Biocmanager Dependencies: # BiocManager::install(\"clusterProfiler\") # BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/core-metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"core Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media. use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. core experiment (core) raw data available via metabolomics workbench study ST002226 exometabolomics HK2 ccRCC cell lines 786-O, 786-M1A, 786-M2A, OS-RC-2, OS-LM1 RFX-631 performed. Preview DF core including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis. (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Media <- medium_raw%>%   column_to_rownames(\"Code\") MappingInfo <- cellular_meta%>%   column_to_rownames(\"Metabolite\") # This will use KEGGREST to query the KEGG API to load the pathways: KEGG_Pathways <- MetaProViz::metsigdb_kegg()"},{"path":"/articles/core-metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"core Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/core-metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"core Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. case core experiment, blank samples ignored feature filtering, since often metabolites released cell naturally present culture media leading detection blank. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter tic_Normalization refers total Ion Count (tic) normalisation, often used LC-MS derived metabolomics data. tic_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, tic normalisation used small number features (= metabolites), since tic assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter mvi refers Missing Value Imputation (mvi) mvi = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter hotellins_confidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations tic part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.  Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed. Importantly, able specify core experiment setting parameter core=TRUE, case additional data processing steps applied:1. Blank sample: refers media samples cells cultured , used blank. detail, mean blank sample feature (= metabolite) substracted values measured sample feature. column “Condition” Experimental_design DF, need label blank samples “blank”.2. Growth factor growth rate: refers different conditions either based cell count protein quantification start experiment (t0) end experiment (t1) resulting growth factor (t1/t0). Otherwise, one can experimentally estimate growth rate condition. Ultimately, measure used normalize data, since amount growth impact consumption release metabolites media hence need account . information, set 1, yet aware may affect results. can pass additional information via parameter Input_metadata_info, passing column name core_norm_factor Input_SettingsFile condition name core_media Input_data file.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition HK2 CCM, can see based Hotellin’s T2 test, samples detected outliers first second round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see viz_pca() function. proceed, remove outlier: metabolomics, sometimes samples injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function replicate_sum(), summarize save results.","code":"Pool_Estimation_result<- MetaProViz::pool_estimation(data = Media[,-c(1:3)],                                                     metadata_sample = Media[,1:3],                                                     metadata_info = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                     cutoff_cv = 30)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] # Prepare the input: Media_input <- Media%>%   subset(!Conditions==\"Pool\", select = -c(1:3))#remove pool samples and remove the information columns  Media_Metadata <- Media%>%   subset(!Conditions==\"Pool\", select = c(1:3))#remove pool samples and keep the information columns only  PreProcessing_res <-  MetaProViz::processing(data=Media_input,                                                 metadata_sample =Media_Metadata,                                                 metadata_info = c(Conditions = \"Conditions\",                                                                  Biological_Replicates = \"Biological_Replicates\",                                                                  core_norm_factor = \"GrowthFactor\",                                                                  core_media = \"blank\"),                                                 featurefilt = \"Modified\",                                                 cutoff_featurefilt = 0.8,                                                 tic = TRUE,# As we have raw data we will perform total ion count norm                                                 mvi=TRUE, #We assume the values are not missing at random and perform half minimum mvi                                                 mvi_percentage=50,                                                 hotellins_confidence = 0.99,# We perform outlier testing using 0.99 confidence interval                                                 core = TRUE)  # Now we can have a look at the results table: Media_Preprocessed <-  PreProcessing_res[[\"DF\"]][[\"Preprocessing_output\"]] #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> feature_filtering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs mvi is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> total Ion Count (tic) normalization: total Ion Count (tic) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> 8 of variables have high variability (CV > 30) in the core_media control samples. Consider checking the pooled samples to decide whether to remove these metabolites or not. #> Warning in core_norm(data = ticRes, metadata_sample = metadata_sample, #> metadata_info = metadata_info): The core_media samples MS51-06 were found to be #> different from the rest. They will not be included in the sum of the core_media #> samples. #> core data are normalised by substracting mean (blank) from each sample and multiplying with the core_norm_factor #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360-378, doi:https://doi.org/10.1214/aoms/1177732979). hotellins_confidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS51-06 #> Filtering round  2  Outlier Samples:  MS51-09 Media_Preprocessed <-Media_Preprocessed%>%   subset(!Outliers==\"Outlier_filtering_round_1\")"},{"path":"/articles/core-metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"dma","title":"core Metabolomics","text":"Differential Metabolite Analysis (dma) two conditions (e.g. Tumour versus Healthy) usually calculates Log2FC, p-value, adjusted p-value t-value. Yet, core experiment normalized metabolite values can either negative value, metabolite consumed media, positive value, metabolite released cell culture media. Since can calculate Log2FC using negative values, calculate absolute difference mean Condition 1 versus mean Condition 2. absolute difference log2 transformed order make values comparable different metabolites, resulting Log2Dist. result doesn’t consider whether one product larger ; looks magnitude difference. reflect direction change two conditions multiply -1 C1 < C2. setting paramteter core = TRUE, instead calclulating Log2FC, Log2 Distance calculated. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior dma. Moreover, require Input_metadata_sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_metadata_feature containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_metadata_info parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) input use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values information conditions compared (even though recommend normalize data remove outliers prior dma). example data seven different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A, 786-O, OSRC2, OSLM1B RFX631) hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview dma results comparison 786-M1A versus HK2 cells. Using dma results, can now use MetaProViz visualization module generate customized Volcano plots viz_volcano(). can see examples . Additionally individual comparison also summary table created including individual information metabolite consumption release based mean measured value: Preview consumption-release information metabolite cell line. can also visualize information assigning -1 released, +1 consumed 0 NA:","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <-  MetaProViz::dma(data=Media_Preprocessed[,-c(1:6)],                                metadata_sample=Media_Preprocessed[,c(1:4)],                                metadata_info = c(Conditions=\"Conditions\", Numerator=NULL, Denominator = \"HK2\"),                                pval =\"aov\",                                padj=\"fdr\",                                metadata_feature = MappingInfo,                                core=TRUE)  # Inspect the dma results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"dma\"]][[\"786-M1A_vs_HK2\"]] DMA_786O_vs_HK2 <- DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]  shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition HK2 82.35 % of the metabolites follow a normal distribution and 17.65 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.71 % of the metabolites follow a normal distribution and 4.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M1A 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 88.57 % of the metabolites follow a normal distribution and 11.43 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSRC2 92.86 % of the metabolites follow a normal distribution and 7.14 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSLM1B 85.71 % of the metabolites follow a normal distribution and 14.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition RFX631 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 67.65% of metabolites the group variances are equal. #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> We added +1 to the mean value of metabolite(s) , since the mean of the replicate values where 0. This was not due to missing values (NA/0). #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov. core_MetaInfo <- DMA_Annova[[\"Feature_Metadata\"]]"},{"path":"/articles/core-metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > dma","what":"ORA using the dma results","title":"core Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. Given core data important consider weather metabolite consumed released, sensible perform ORA metabolite cluster. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites. interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA dma results, ensure metabolite names match KEGG IDs KEGG trivial names. general, input_pathway requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells focusing pathways enriched consumed metabolites.","code":"# Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"dma\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   dma_res <- DMA_Annova[[\"dma\"]][[comparison]]   dma_res <- dma_res[complete.cases(dma_res),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway     tibble::remove_rownames()%>%     column_to_rownames(\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways    #Perform ORA: Here we use   DM_ORA_res[[comparison]] <- MetaProViz::cluster_ora(data=dma_res,                                                      metadata_info=c(ClusterColumn=\"core_specific\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                      remove_background=FALSE,#we do not have any background                                                      input_pathway=KEGG_Pathways,                                                      pathway_name=\"KEGG\",                                                      min_gssize=3,                                                      max_gssize=1000) }  # Lets check how the results look like: MC_ORA_786M1A_vs_HK2_Consumed <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"DF\"]][[\"Consumed\"]]"},{"path":"/articles/core-metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"core Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/core-metabolomics.html","id":"mca_core","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"mca_core","title":"core Metabolomics","text":"metabolite clustering method based logical regulatory rules sort metabolites metabolite clusters. additionally need intracellular samples corresponding core samples. define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. Lastly, also take account core direction, meaning metabolite : 1. “Released”, means released media conditions underlying comparison. 2. “Consumed”, means consumed media conditions underlying comparison. 3. “Released/Consumed”, means consumed/released one condition, whilst opposite occurs second condition underlying comparison. 4. “Detected”, means metabolite detected underlying comparison. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons (Intracellular core), can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods method_background following 1.1. - 1.4. restrictive least restrictive:1.1. Intra&core: stringend background setting lead small number metabolites.1.2. core: Focus metabolite abundance core.1.3. Intra: Focus metabolite abundance intracellular.1.4. Intra|core: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “core_UP”. three 6-state6-state4 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). order define group metabolite assigned , set two different thresholds. intracellular based differential metabolite abundance (Log2FC) significance (e.g. p.adj). core data based Log2 Distance significance (e.g. p.adj). Log2FC recommend threshold 0.5 1, whilst Log2 Distance one check distance ranges base threshold . Regulatory rules: Metabolite Clustering Analysis: core. Now can load corresponding pre-processed intracellular example data comparison 786M-1A versus HK2 (detailed pre-processing please see vignette “Standard Metabolomics”). MetaProViz::mca_core comparison 786-M1A versus HK2 cells intracellular core samples. MetaProViz::mca_core summary number metabolites per cluster. Now can also create Bargraphs clusters visualize results. create two summary bargraphs Regulation Grouping RG2 RG3:","code":"# Example of all possible flows: MCA_CoRe_Rule <- mca_core_rules # Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2 <- intracell_dma%>%   as.data.frame()  # Perform metabolite clustering: MCA_core_res <- MetaProViz::mca_core(data_intra =Intra_DMA_786M1A_vs_HK2,                                      data_core = DMA_786M1A_vs_HK2,                                      metadata_info_intra=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=0.8),                                      metadata_info_core=c(DirectionCol=\"core\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=28),                                      feature= \"Metabolite\",                                      method_background=\"Intra&core\",                                      path=NULL)  # Lets check how the results look like: MCA_res <- MCA_core_res[[\"MCA_core_Results\"]] Clustersummary <- MCA_core_res[[\"MCA_core_summary\"]]"},{"path":"/articles/core-metabolomics.html","id":"metalinksdb-metabolite-receptor-and-metabolite-transporter-sets","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MetaLinksDB metabolite-receptor and metabolite-transporter sets","title":"core Metabolomics","text":"MetaLinks database manually curated database metabolite-receptor metabolite-transporter sets can used study connection metabolites receptors transporters (Farr et al. 2024). remove potential false positives decrease number putative metabolite-receptor interactions, filter MetalinksDB resource metabolites annotated present kidney, blood, urine HMDB known extracellular. Now can use information understand metabolites consumed 786-M1A cells Released HK2 cells connected specific receptors transporters bioRCM cluster “Both_DOWN (Released/Consumed)","code":"# Selection as described in ST2 of Farr_Dimitrov2024: MetaLinksDB <- MetaProViz::metsigdb_metalinks(cell_location =c(\"Extracellular\"),                                              tissue_location = c(\"Kidney\", \"All Tissues\"),                                              biospecimen_location = c(\"Blood\",  \"Urine\"))  # Here we add a UniquePair column combining hmdb-protein connection, removing duplications originating from different PK resources MetaLinksDB_Select <- MetaLinksDB %>%                                            tidyr::unite(\"UniquePair\", c(\"hmdb\", \"gene_symbol\"), sep = \"_\", remove=FALSE)%>%                                            distinct(UniquePair, .keep_all = TRUE) #> The following metabolites are not connected to any receptor or transporter in the MetalinksDB: ornithine, N-acetylaspartate, acetylcholine, tryptophan, N-acetylglutamate #> The following metabolites are connected to at least one receptor or transporter in the MetalinksDB: phenylalanine, alanine, threonine, serine, methionine"},{"path":"/articles/core-metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"core Metabolomics","text":"Pathway Input MetaProViz::MC_ORA. MetaProViz::MC_ORA results RG2_Significant cluster Both_DOWN (Consumed). see pathways low amount genes included also part cluster pathways significant. due multiple factors, first start small number metabolites KEGG IDs secondly included metabolites detected , intracellular core samples (parameter method_background=\"Intra&core\"). Hence, example setting parameter method_background=\"Intra|core\", obtain larger metabolite clusters.","code":"MC_ORA_result<- MetaProViz::cluster_ora(data=MCA_core_res[[\"MCA_core_Results\"]]%>%column_to_rownames(\"Metabolite\"),                                        metadata_info=c(ClusterColumn=\"RG2_Significant\",                                                         BackgroundColumn=\"BG_method\",                                                         PathwayTerm= \"Pathway\", #This is the column name including the pathways names                                                         PathwayFeature= \"Metabolite\"),                                        remove_background=TRUE,                                        input_pathway=MappingInfo%>%rownames_to_column(\"Metabolite\"),                                        pathway_name=\"KEGG\",                                        min_gssize=3,                                        max_gssize=1000 ,                                        save_table= \"csv\")"},{"path":"/articles/core-metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"core Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_metadata_info user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_metadata_sample Plot_metadata_feature. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Media_Preprocessed[,c(1:2)]%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-MappingInfo"},{"path":"/articles/core-metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"core Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::viz_pca(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Given biological replicates numeric, can also set color_scale continuous: Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . Figure: samples cluster Cell status?","code":"Input_PCA <- Media_Preprocessed[,-c(1:4)] #remove columns that include Metadata such as cell type,... MetaProViz::viz_pca(data=Input_PCA) MetaProViz::viz_pca(metadata_info= c(color=\"Biological_Replicates\"),                    metadata_sample = MetaData_Sample ,                    data=Input_PCA,                   plot_name = \"Batch Effect\") MetaProViz::viz_pca(metadata_info= c(color=\"Biological_Replicates\"),                    metadata_sample = MetaData_Sample ,                    data=Input_PCA,                    scale_color = \"continuous\",                   plot_name = \"Batch Effect (continuous color scale)\") MetaProViz::viz_pca(metadata_info= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    metadata_sample = MetaData_Sample ,                    data=Input_PCA,                   plot_name = \"Sample Conditions\") MetaProViz::viz_pca(metadata_info=  c(color=\"Status\"),                    metadata_sample = MetaData_Sample ,                    data=Input_PCA,                   plot_name = \"Sample Status\")"},{"path":"/articles/core-metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"core Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::viz_heatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_featurenames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_metadata_info. time can still maintain metadata information , samples metabolites. together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.   can also choose make individual plots Sample Metadata using individual_Sample (e.g. patients may want plot male female separately). Moreover, can also use time.","code":"Input_Heatmap <-   Media_Preprocessed[,-c(1:6)] #remove columns that include Metadata such as cell type,...  # Add consumption-release information of each cell type: MetaData_Metab <- DMA_Annova[[\"Feature_Metadata\"]]%>%   column_to_rownames(\"Metabolite\") MetaProViz::viz_heatmap(data = Input_Heatmap,                       plot_name = \"Overview\") MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Status\")),                       plot_name = \"Colour Samples\") MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(color_Metab = list(\"Pathway\",  \"core_786-M1A\", \"core_HK2\", \"core_786-M2A\", \"core_786-O\", \"core_OSLM1B\", \"core_OSRC2\", \"core_RFX631\"),                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Status\")),                        metadata_feature =  MetaData_Metab,                       plot_name = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"core_786-M1A\", \"core_HK2\", \"core_786-M2A\", \"core_786-O\", \"core_OSLM1B\", \"core_OSRC2\", \"core_RFX631\")),                        metadata_feature =  MetaData_Metab,                       plot_name = \"Pathway\")"},{"path":"/articles/core-metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"core Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::viz_superplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).  Now, instance prefer boxplots bargraphs can simply change parameter plot_type:  can also change violin plots:","code":"Input_Superplot <-  Media_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... # Lets select metabolites to plot metabolite_list <- MCA_res %>%   filter(stringr::str_detect(RG2_Significant, \"Opposite\"))%>%   pull(Metabolite)   MetaProViz::viz_superplot(data =Input_Superplot%>%  select(any_of(metabolite_list)),#We just plot selected metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Bar\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::viz_superplot(data =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Box\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::viz_superplot(data =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Violin\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/core-metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"core Metabolomics","text":"Input_data MetaProViz::viz_volcano() example differential analysis results MetaProViz::dma().","code":""},{"path":"/articles/core-metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"core Metabolomics","text":"first look results differential analysis (see section dma ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying dma results. seek plot metabolite names can change paramter select_label default (select_label=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying dma results. parameter select_label can also pass vector Metabolite names labeled: Figure: Standard figure displaying dma results. explained , analyzing core data important take account metabolite consumed released. can use information colour code shape metabolites plot. need add information Metadata_Metabolite file: Metadata table including additional information Metabolites. Now can make different plots: Figure: Standard figure displaying dma results. Figure: Standard figure displaying dma results. Figure: Standard figure displaying dma results. course, may also want individual plot consumption/release metabolites. Figure: Standard figure displaying dma results. Figure: Standard figure displaying dma results. Figure: Standard figure displaying dma results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_metadata_info information (color) used Input_data. Figure: Standard figure displaying dma results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying dma results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying dma results colour coded metabolic pathways shaped metabolic clusters.","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\") # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        select_label = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        select_label = c(\"histidine\", \"phenylalanine\", \"lactate\")) # colour for consumption and release: For this we need to add this information into the Metadata_Metabolite file MetaData_Metab <- merge(MappingInfo%>%rownames_to_column(\"Metabolite\"), DMA_786M1A_vs_HK2[,c(1,6,8:10)], by=\"Metabolite\", all.y=TRUE)%>%   column_to_rownames(\"Metabolite\") # Now we need to add our Plot_SettingsFile and the Plot_metadata_info: MetaProViz::viz_volcano(plot_types=\"Standard\",                        metadata_info= c(color=\"core_specific\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A versus HK2\",                        subtitle= \"Results of dma. Colour coded for consumption/release\" ) # If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_metadata_info MetaProViz::viz_volcano(plot_types=\"Standard\",                        metadata_info= c(shape=\"core_specific\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A versus HK2\",                        subtitle= \"Results of dma. Shape for consumption/release, color for significance.\" ) # Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::viz_volcano(plot_types=\"Standard\",                        metadata_info= c(shape=\"core_specific\", color=\"core_specific\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A versus HK2\",                        subtitle= \"Results of dma. Shape and color for consumption/release.\" ) # individual plot for each metabolite behaviour: MetaProViz::viz_volcano(plot_types=\"Standard\",                        metadata_info= c(individual=\"core\", shape=\"core_specific\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A versus HK2\",                        subtitle= \"Results of dma.\" ) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). # Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::viz_volcano(plot_types=\"Standard\",                        metadata_info= c(individual=\"core\", shape=\"core_specific\", color=\"Pathway\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A versus HK2\",                        subtitle= \"Results of dma.\" ) #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Warning: Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`). #> Removed 2 rows containing missing values or values outside the scale range #> (`geom_vline()`)."},{"path":"/articles/core-metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"core Metabolomics","text":"parameter Plot_Settings=\"Compare\" helpful performed multiple comparisons seek compare two one plot: Figure: Comparison. course option use shape color customize graph well make individual plots: Figure: Comparison. Now individual plots :","code":"# Make the plot MetaProViz::viz_volcano(plot_types=\"Compare\",                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        data2= DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"786M1A_vs_HK\", data2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A vs HK2 compared to 7860 vs HK2\",                        subtitle= \"Results of dma\" ) # Make the plot MetaProViz::viz_volcano(plot_types=\"Compare\",                        metadata_info= c(color=\"Pathway\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        data2= DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"786M1A_vs_HK\", data2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A vs HK2 compared to 7860 vs HK2\",                        subtitle= \"Results of dma\" ) MetaProViz::viz_volcano(plot_types=\"Compare\",                        metadata_info= c(individual=\"Pathway\"),                        metadata_feature= MetaData_Metab,                        data=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        data2= DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"786M1A_vs_HK\", data2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        plot_name= \"786M1A vs HK2 compared to 7860 vs HK2\",                        subtitle= \"Results of dma\" )"},{"path":"/articles/core-metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"core Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. can example use results ORA performed differential expression results. Indeed DMA_786M1A_vs_HK2 performed ORA cluster (consumed, released, consumed/released). , plot ORA results metabolites released conditions, HK2 786-M1A.","code":"# Prepare the Input: # 1. data=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file metadata_feature. InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   column_to_rownames(\"KEGGCompound\")  # 2. data2=Pathway analysis output: Must have same column names as metadata_feature for Pathway name InputPEA2 <- MC_ORA_786M1A_vs_HK2_Consumed %>%   dplyr::rename(\"term\"=\"ID\")  # 3. metadata_feature= Pathways used for pathway analysis: Must have same column names as metadata_feature for Pathway name and feature names need to match features in the data. PEA_Feature passes this column name! MetaProViz::viz_volcano(plot_types=\"PEA\",                        metadata_info= c(PEA_Pathway=\"term\",# Needs to be the same in both, metadata_feature and data2.                                        PEA_stat=\"p.adjust\",#Column data2                                        PEA_score=\"GeneRatio\",#Column data2                                        PEA_Feature=\"Metabolite\"),# Column metadata_feature (needs to be the same as row names in data)                        metadata_feature= KEGG_Pathways,#Must be the pathways used for pathway analysis                        data= InputPEA, #Must be the data you have used as an input for the pathway analysis                        data2= InputPEA2, #Must be the results of the pathway analysis                        x= \"Log2(Distance)\",                        plot_name= \"KEGG\",                        subtitle= \"PEA\" ,                        select_label = NULL)"},{"path":"/articles/core-metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"core Metabolomics","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1    ggfortify_0.4.18 ggplot2_3.5.2    rlang_1.1.6      tibble_3.3.0     dplyr_1.1.4      #> [7] magrittr_2.0.3   MetaProViz_3.0.3 #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3              gridExtra_2.3          httr2_1.2.0            tcltk_4.4.3            logger_0.4.0           #>   [6] readxl_1.4.5           compiler_4.4.3         RSQLite_2.4.1          systemfonts_1.2.3      vctrs_0.6.5            #>  [11] reshape2_1.4.4         rvest_1.0.4            pkgconfig_2.0.3        crayon_1.5.3           fastmap_1.2.0          #>  [16] backports_1.5.0        labeling_0.4.3         rmarkdown_2.29         sessioninfo_1.2.3      tzdb_0.5.0             #>  [21] ggbeeswarm_0.7.2       ragg_1.4.0             purrr_1.1.0            bit_4.6.0              xfun_0.52              #>  [26] cachem_1.1.0           jsonlite_2.0.0         progress_1.2.3         blob_1.2.4             later_1.4.2            #>  [31] broom_1.0.8            parallel_4.4.3         prettyunits_1.2.0      R6_2.6.1               bslib_0.9.0            #>  [36] stringi_1.8.7          RColorBrewer_1.1-3     ComplexUpset_1.3.3     limma_3.65.1           car_3.1-3              #>  [41] lubridate_1.9.4        jquerylib_0.1.4        cellranger_1.1.0       Rcpp_1.1.0             knitr_1.50             #>  [46] R.utils_2.13.0         readr_2.1.5            splines_4.4.3          igraph_2.1.4           timechange_0.3.0       #>  [51] tidyselect_1.2.1       rstudioapi_0.17.1      qvalue_2.38.0          abind_1.4-8            yaml_2.3.10            #>  [56] curl_6.4.0             plyr_1.8.9             withr_3.0.2            inflection_1.3.6       evaluate_1.0.4         #>  [61] desc_1.4.3             zip_2.3.3              xml2_1.3.8             pillar_1.11.0          ggpubr_0.6.1           #>  [66] carData_3.0-5          checkmate_2.3.2        generics_0.1.4         vroom_1.6.5            hms_1.1.3              #>  [71] scales_1.4.0           gtools_3.9.5           OmnipathR_3.17.4       glue_1.8.0             pheatmap_1.0.13        #>  [76] scatterplot3d_0.3-44   tools_4.4.3            ggsignif_0.6.4         fs_1.6.6               XML_3.99-0.18          #>  [81] grid_4.4.3             tidyr_1.3.1            qcc_2.7                colorspace_2.1-1       patchwork_1.3.1        #>  [86] beeswarm_0.4.0         vipor_0.4.7            Formula_1.2-5          cli_3.6.5              rappdirs_0.3.3         #>  [91] kableExtra_1.4.0       textshaping_1.0.1      Polychrome_1.5.4       viridisLite_0.4.2      svglite_2.2.1          #>  [96] gtable_0.3.6           R.methodsS3_1.8.2      rstatix_0.7.2          hash_2.2.6.3           EnhancedVolcano_1.24.0 #> [101] sass_0.4.10            digest_0.6.37          ggrepel_0.9.6          htmlwidgets_1.6.4      farver_2.1.2           #> [106] memoise_2.0.1          htmltools_0.5.8.1      pkgdown_2.1.3          R.oo_1.27.1            factoextra_1.0.7       #> [111] lifecycle_1.0.4        httr_1.4.7             statmod_1.5.0          bit64_4.6.0-1          MASS_7.3-64"},{"path":"/articles/prior-knowledge.html","id":"section","dir":"Articles","previous_headings":"","what":"Prior Knowledge - Access & Integration","title":"Prior Knowledge - Access & Integration","text":"tutorial showcase use MetaProViz prior knowledge: - 1. understand detected metabolite IDs measured data. - 2. access metabolite prior knowledge metabolite-gene prior knowledge networks. - 3. link experimental data prior knowledge - ’s Don’ts. - 4. deal many--many mapping metabolite identifiers. - 5. perform pathway enrichment analysis. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools # devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  library(magrittr) library(rlang) library(purrr) library(dplyr) library(stringr) library(tibble)  # Please install the Biocmanager Dependencies: # BiocManager::install(\"clusterProfiler\") # BiocManager::install(\"EnhancedVolcano\") # BiocManager::install(\"cosmosR\")"},{"path":"/articles/prior-knowledge.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"Loading the example data","title":"Prior Knowledge - Access & Integration","text":"part MetaProViz package can load example feature metadata using function toy_data():1. Metadata cell line experiment (CellLine) Example datasets publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). 2. Metadata patients tissue experiment (Tissue) Example datasets publicly available paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. 3. Metadata Biocrates kit (Biocrates) use Biocrates kit feature information “MxP® Quant 500 XL kit” covers 1,000 metabolites various biochemical classes.","code":"# Load the Pre-processed intracellular data: FeatureMetadata_Cells <- cellular_meta%>%   column_to_rownames(\"Metabolite\") # Load the example data: FeatureMetadata_Tissue <- tissue_meta%>%   column_to_rownames(\"Metabolite\") # Load the example data: FeatureMetadata_Biocrates <- biocrates_features"},{"path":"/articles/prior-knowledge.html","id":"sect1","dir":"Articles","previous_headings":"","what":"1. Metabolite IDs in measured data","title":"Prior Knowledge - Access & Integration","text":"Assigning Metabolite IDs measured data difficulty assigning metabolite IDs measured data uncertainty detection metabolites. Indeed, differentiation structural isomers (constitutional isomers stereoisomers) example distinction enantiomers. leads loss information hence uncertainty assigning metabolite IDs. One example metabolite Alanine, can occur L- D- form. experiment enantiomers distinguished, correct way either assign two metabolite IDs (L- D-Alanine) general Alanine ID without chiral information. Yet, reality trivial: Available Alanine IDs HMDB ChEBI. Indeed, dependent database, Alanine metabolite can different IDs available:  instance, want assign HMDB ID, assign “HMDB0001310”, “HMDB0000161” metabolite Alanine, ChEBI assign one, “16449”, may lead problems ChEBI ID specific may part certain metabolic pathways. reason substrate chirality critical enzymatic processes stereo selectivity enzymes homochiral predominance one particular enantiomer (e.g. D-sugars, L-amino acids, etc.). showcase severity problem, can look occurrence metabolites metabolic pathways across different databases. searched metabolite IDs RaMP database (Braisted et al. 2023) extracted pathways part : Alanine IDs HMDB ChEBI mapped pathways wiki, KEGG Reactome using RamP.    showcases choose ChEBI ID Alanine (ChEBI ID 16449), experimentally distinction possible, map pathway even though metabolite part many pathways. Hence, recommend assign multiple IDs measured ID, specificity detection given. Yet, many metabolomics studies report multiple IDs, rather one ID per measured peak. cases chosen ID correct representing degree ambiguity detection, e.g. “Alanine-Zwitterion”, whilst cases specific ID, detected specificity, e.g. “L-Alanine”. cases can lead missed maps prior knowledge hence loss information discussed . Hence, assign multiple IDs measured peak, specificity detection may given (.e. amino acids). Preview DF FeatureMetadata_Cells_AddIDs including new columns potential additional HMDB IDs assign using MetaProViz::equivalent_id() function.","code":"# Example Cell-line data: Input_HMDB <- FeatureMetadata_Cells%>%   dplyr::filter(!HMDB == \"NA\")%>% # ID in the measured data we want to use, hence we remove NA's   dplyr::select(\"HMDB\", \"Pathway\") # only keep relevant columns  # Add equivalent IDs: FeatureMetadata_Cells_AddIDs <- MetaProViz::equivalent_id(data= Input_HMDB,                                                           metadata_info = c(InputID=\"HMDB\"),# ID in the measured data, here we use the HMDB ID                                                           from = \"hmdb\") #> Warning in MetaProViz::equivalent_id(data = Input_HMDB, metadata_info = #> c(InputID = \"HMDB\"), : The following IDs are duplicated and removed: #> HMDB0000725, HMDB0002013, HMDB0000267, HMDB0000755 #> chebi is used to find additional potential IDs for hmdb."},{"path":"/articles/prior-knowledge.html","id":"sect2","dir":"Articles","previous_headings":"","what":"2. Accessing Prior Knowledge","title":"Prior Knowledge - Access & Integration","text":"Metabolite prior knowledge (PK) essential interpretation metabolomics data. can used perform pathway enrichment analysis, compound class enrichment analysis, using specific PK databases, can used study connection metabolites receptors transporters.Since quality content PK dictate success downstream analysis biological interpretation, important ensure PK used correctly. Specifically metabolite PK, many different PK databases resources pose several issues. Indeed, metabolite identifiers (e.g. KEGG, HMDB, PubChem, etc.) standardized across databases, metabolite can multiple identifiers different databases. known many--many mapping problem. Moreover, metabolic pathways basis PK databases also includes co-factors ions small molecules part reactions, can also detected experimentally acquired data (e.g. H2O, CO2, etc). address issues provide standardized way access integrate metabolite PK, provide access several prior knowledge resources removed molecules water. terme collection metabolite sets MetSigDB (Metabolite signature database).","code":""},{"path":"/articles/prior-knowledge.html","id":"kegg-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"KEGG pathway-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways)  Preview DF KEGG_Pathways.","code":"# This will use KEGGREST to query the KEGG API to load the pathways: KEGG_Pathways <- MetaProViz::metsigdb_kegg()"},{"path":"/articles/prior-knowledge.html","id":"chemical-class-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Chemical class-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"chemical class-metabolite sets based classification metabolites chemical classes, can used perform compound class enrichment analysis. chemical class-metabolite sets curated RaMP-DB, used ClassyFire (Braisted et al. 2023). access via OmnipathR.  Preview DF ChemicalClass_MetabSet.","code":"ChemicalClass_MetabSet <- MetaProViz::metsigdb_chemicalclass() #> Cached file loaded from: ~/.cache/RaMP-ChemicalClass_Metabolite.rds"},{"path":"/articles/prior-knowledge.html","id":"create-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Create pathway-metabolite sets","title":"Prior Knowledge - Access & Integration","text":"function make_gene_metab_set can used convert gene names metabolite names using PK network metabolic reactions calls CosmosR (Dugourd et al. 2021). function useful want perform pathway enrichment analysis available gene-sets Hallmarks gene-sets MSigDB (Castanza et al. 2022). Moreover, enables perform combined pathway enrichment analysis metabolite-gene sets, data types proteomics measuring enzymes expression. Hallmarks (Liberzon et al. 2015) gene-set Gaude (Gaude Frezza 2016) gene-set available package MetaProViz can loaded using function metsigdb_hallmarks() metsigdb_gaude respectively.  Preview DF Hallmarks_Pathways including gene-sets usable pathway enrichment analysis.  Preview DF gaude_Pathways including gene-sets usable pathway enrichment analysis. Now can use function make_gene_metab_set translate gene names metabolite names.  Preview DF Hallmarks_GeneMetab including gene-sets usable pathway enrichment analysis.  Given gene-metabolite-sets, can now also run enrichment analysis combined data types, including metabolite Log2FC one including gene Log2FC e.g. transcriptomics proteomics data. Yet, important keep mind generally detect less metabolites genes hence may bias results obtained combined enrichment analysis.","code":"# Load the example gene-sets: Hallmark_Pathways <- hallmarks  Gaude_Pathways <- gaude_pathways # Translate gene names to metabolite names Hallmarks_GeneMetab <- MetaProViz::make_gene_metab_set(input_pk=Hallmark_Pathways,                                                      metadata_info=c(Target=\"gene\"),                                                      pk_name=\"Hallmarks\")  Gaude_GeneMetab <- MetaProViz::make_gene_metab_set(input_pk=Gaude_Pathways,                                                      metadata_info=c(Target=\"gene\"),                                                      pk_name=\"Gaude\")"},{"path":"/articles/prior-knowledge.html","id":"metalinksdb-metabolite-receptor-metabolite-transporter-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"MetaLinksDB metabolite-receptor & metabolite-transporter sets","title":"Prior Knowledge - Access & Integration","text":"MetaLinks database manually curated database metabolite-receptor metabolite-transporter sets can used study connection metabolites receptors transporters (Farr et al. 2024).  Preview DF MetaLinksDB including metabolite-receptor sets. Preview metabolite-receptor metabolite-transporter sets.","code":"MetaLinksDB <- MetaProViz::metsigdb_metalinks()"},{"path":"/articles/prior-knowledge.html","id":"comparison-of-pk-coverage","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Comparison of PK coverage","title":"Prior Knowledge - Access & Integration","text":"now loaded number different PK sources (details ) aim compare overlap coverage PK sources understand certain genes metabolites covered one PK resource others. example, compare resources containing gene-metabolite sets (Hallmarks, Gaude, MetalinksDB) using MetaProViz::compare_pk() function, generate combined datatable visualises Upset plot. Upset plot shows overlap coverage, similar Venn diagram works, enable visualize multiple combinations clearly. Preview DF pk_comp_res$summary_table showing coverage features (genes metabolites) across PK sources. upset plot shows MetalinksDB unique genes metabolites present resources. expected, since MetalinksDB focuses receptors, transporters metabolic enzymes, whilst Gaude Hallmakrs focus pathways. Since Gaude focuses metabolic enzymes pathways, contains low number genes hence small amount unique genes metabolites. regard makes sense Hallmarks includes many unique genes, since Hallmarks also includes genes pathways related metabolism. Hallmarks Gaude observe high overlap metabolites, can explained since gene sets assigned metabolites using metabolic pathways backend MetaProViz::make_gene_metab_set important keep mind dictates gene-metabolite associations added.","code":"# Compare the PK resources pk_comp_res <- MetaProViz::compare_pk(data = list(Hallmarks = as.data.frame(Hallmarks_GeneMetab[[\"GeneMetabSet\"]]),                                                   Gaude = as.data.frame(Gaude_GeneMetab[[\"GeneMetabSet\"]]),                                                   MetalinksDB = as.data.frame(MetaLinksDB))                                      )"},{"path":"/articles/prior-knowledge.html","id":"sect3","dir":"Articles","previous_headings":"","what":"3. Linking experimental data to prior knowledge","title":"Prior Knowledge - Access & Integration","text":"Now loaded prior knowledge inspected overlap genes metabolites different PK resources, section want link experimental data PK. experimental data example data loaded section 1 (Loading example data). Whichever resource experimental data resembles, recommend follow overall approach: 1. Determine metabolite identifiers experimental data inspect coverage. 2. Select metabolite identifiers experimental data, can used link PK interest. 3. Connect metabolite identifiers PK assess overlap. one can select combination experimental data PK. selection based experimental data hand biological research question. vignette, focus combination Biocrates experimental data MetalinksDB PK. reason using landscape metabolites included Biocrates Kit Biocrates assigned mutliple metabolite IDs measurement (Lipid maps, HMDB, ChEBI) needed assigned multiple IDs one measurement (e.g. two HMDB IDs L- D-Alanine).","code":""},{"path":"/articles/prior-knowledge.html","id":"determine-identifiers-and-inspect-coverage","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge","what":"1. Determine identifiers and inspect coverage","title":"Prior Knowledge - Access & Integration","text":"First determine identifiers inspect coverage. many experimentally aquired data, can different metabolite IDs used describe metabolite. Biocrates data available metabolite identifiers mostly CHEBI, HMDB, LIMID linked PK resources. Now select metabolite identifier columns count coverage look combinations coverage grouped class metabolite. helps us understand expect, linking data prior knowledge.   Preview DF pk_comp_res_biocft$summary_table showing coverage identifiers. results tell us : Less half metabolites CHEBI+HMDB+LIMID (n=413), isn’t great probably higher expected. relied upon - CHEBI: miss least 256 metabolites HMDB+LIMID HMDB: miss least 54 metabolites CHEBI+LIMID LIMID: miss least 89 metabolites CHEBI+HMDB However two things note observations . first numbers minimums, real values little higher add instance metabolites just CHEBI just LIMID, etc. actually, relying upon LIMID means miss 151 biocrates metabolites (89 HMDB/ChEBI + 15 CHEBI + 8 HMDB 39 LIMID/CHEBI/HMDB identifiers). second point nuanced just important: need keep mind direct 1:1 relationship number Biocrates metabolites , instance, ChEBI ID, number unique ChEBI IDs map . upset plot treating Biocrates metabolite individual entry categorising whether ChEBI, HMDB, LIMID ID, etc. However considering ChEBI, HMDB, LIMIDs actually . possible cases number metabolites higher, lower, number unique IDs due multimapping. example, 3 Biocrates metabolites HMDB IDs. count 3 entries upset plot. two Biocrates metabolites map HMDB ID, whereas Biocrates metabolite map 6 different HMDBs. case, 3 Biocrates metabolites HMDBs 7 unique HMDBs. Hence, important keep mind interpreting upset plot.","code":"pk_comp_res_biocft <- MetaProViz::compare_pk(data = list(Biocft = FeatureMetadata_Biocrates),                                              metadata_info = list(Biocft = c(\"CHEBI\", \"HMDB\", \"LIMID\")),                                              plot_name = \"Overlap of BioCrates Columns\")"},{"path":"/articles/prior-knowledge.html","id":"select-identifiers-to-link-to-pk-of-interest","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge","what":"2. Select identifiers to link to PK of interest","title":"Prior Knowledge - Access & Integration","text":"inspected experimental coverage metabolite IDs Biocrates kit. Next, choose metabolite identifier use link PK choice. Often choice dictated prior knowledge resource use specific identifier. use MetalinksDB, uses HMDB IDs metabolite identifiers, hence best use HMDB IDs link Biocrates features resource. Noteworthy, cases Biocrates metabolites multiple HMDB IDs listed per metabolite:  plot can make observations: 1. number biocrates cells without HMDB high (n=253). 2. Whilst number biocrates cells single HMDB ID associated (n=314), majority biocrates metabolites actually multiple entries (n=452). 3. multiple, ranges 2-20 HMDB entries per biocrates cell! many biocrates cells linked multiple HMDB IDs different ways deal (e.g. select single HMDB ID cases multiple). discuss pros cons later section: Bonus: multiple metabolite IDs helpful hindrance?. now, proceed making connections PK using HMDBs, MetaProViz function checkmatch_pk_to_data() designed handle.","code":"# Count entries and record NA information result_bioc_hmdb_count <- MetaProViz::count_id(FeatureMetadata_Biocrates, \"HMDB\") # Access the processed data: processed_df_bioc_hmdb_count <- result_bioc_hmdb_count$result"},{"path":"/articles/prior-knowledge.html","id":"make-connection-to-pk-and-assess-overlap","dir":"Articles","previous_headings":"3. Linking experimental data to prior knowledge","what":"3. Make connection to PK and assess overlap","title":"Prior Knowledge - Access & Integration","text":"connect experimental Biocrates table MetalinksDB PK using HMDB IDs using MetaProViz::checkmatch_pk_to_data() function. returns warning messages 4 tables: data_summary: summary table links prior knowledge. Includes pointers action required however NA values duplicates InputID (e.g. ‘HMDB’) removed table. GroupingVariable_summary: extended version summary, GroupingVariable extended. e.g. pathway-metabolite sets include duplicated InputIDs multiple pathways data_long: versus commparison enable checking case--case basis. cases expect input ID linked one entry PK. won’t always case, already discussed last section , many cases multiple HMDB IDs per single biocrates metabolite cell. MetaProViz::checkmatch_pk_to_data() designed mind, default splitting comma separated values InputID (PriorID) separate entities, counting number links , reporting user. Let’s take look results: Preview DF data_Matched showing coverage identifiers (columns hidden) metabolite classes biocrates kit every metabolite HMDB ID corresponding entry MetalinksDB. Whilst number classes metabolites, see represented MetalinksDB PK , either HMDB ID associated Biocrates metabolite, MetalinksDB include HMDB ID metabolite. poor coverage concern analysis interested analysing many classes, since mean case experimental results Phosphatidylglycerols instance linked PK. case certainly need keep mind downstream analysis interpretation results, don’t overinterpret results instance large number Amino Acids, falsely assume absence Phosphatidylinositols PK integration results means present important data. Let’s turn back consider number HMDB IDs Biocrates data ask ourself question: helpful detrimental multiple IDs? answer , take first HMDB cell multiple HMDB IDs test see worked.  Comparison IDs found MetalinksDB PK multiple versus random single HMDB ID measured data. shows using Multi HMDBs resulted metabolites Biocrates able linked MetalinksDB possible used first HMDB available us. Hence multiple IDs single detected peak may add complexity, recommend prematurely dropping IDs map PK thoroughly assessed impact removal may .","code":"Biocrates_to_MetalinksDB <- MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates,                                                               input_pk = MetaLinksDB,                                                               metadata_info = c(InputID=\"HMDB\", PriorID=\"hmdb\", grouping_variable=NULL)) #> Warning in MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates, #> : 253 NA values were removed from column HMDB #> Warning in MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates, #> : 4 duplicated IDs were removed from column HMDB #> No metadata_info grouping_variable provided. If this was not intentional, please check your input. #> Warning in MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates, #> : 40766 duplicated IDs were removed from PK column hmdb #> data has multiple IDs per measurement = TRUE. input_pk has multiple IDs per entry = FALSE. #> data has 762 unique entries with 2027 unique HMDB IDs. Of those IDs, 176 match, which is 8.68278243709916%. #> input_pk has 1128 unique entries with 1128 unique hmdb IDs. Of those IDs, 176 are detected in the data, which is 15.6028368794326%. #> Warning in MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates, #> : There are cases where multiple detected IDs match to multiple prior knowledge #> IDs of the same category #Number of matches: MultipleIDs <- Biocrates_to_MetalinksDB$data_summary%>%   summarise(total_matches_count = sum(matches_count, na.rm = TRUE))%>%   mutate(Name = \"MultipleIDs\")  ###################################### # Extract first ID: extract_first_id <- function(id_col) {   sapply(as.character(id_col), function(x) {     # Check for NA or empty string     if (is.na(x) || x == \"\") {       return(NA)     }     # Split on comma (adjust the delimiter if needed)     parts <- unlist(strsplit(x, split = \",\"))     # Return the first value after trimming any whitespace     return(trimws(parts[1]))   }) }  # Create a copy of the df FeatureMetadata_Biocrates_singleHMDB <- FeatureMetadata_Biocrates # Get the first entry of each HMDB ID FeatureMetadata_Biocrates_singleHMDB$HMDB_single <- extract_first_id(FeatureMetadata_Biocrates$HMDB)  # Visually check that the single ID function has worked # Count entries and record NA information result_bioc_hmdb_count_single <- MetaProViz::count_id(FeatureMetadata_Biocrates_singleHMDB, \"HMDB_single\") # Check the macthes: Biocrates_to_MetalinksDB_singleHMDB <- MetaProViz::checkmatch_pk_to_data(data = FeatureMetadata_Biocrates_singleHMDB,                                                                          input_pk = MetaLinksDB,                                                                          metadata_info = c(InputID=\"HMDB_single\", PriorID=\"hmdb\", grouping_variable=NULL)) #> Warning in MetaProViz::checkmatch_pk_to_data(data = #> FeatureMetadata_Biocrates_singleHMDB, : 253 NA values were removed from column #> HMDB_single #> Warning in MetaProViz::checkmatch_pk_to_data(data = #> FeatureMetadata_Biocrates_singleHMDB, : 49 duplicated IDs were removed from #> column HMDB_single #> No metadata_info grouping_variable provided. If this was not intentional, please check your input. #> Warning in MetaProViz::checkmatch_pk_to_data(data = #> FeatureMetadata_Biocrates_singleHMDB, : 40766 duplicated IDs were removed from #> PK column hmdb #> data has multiple IDs per measurement = FALSE. input_pk has multiple IDs per entry = FALSE. #> data has 717 unique entries with 717 unique HMDB_single IDs. Of those IDs, 147 match, which is 20.5020920502092%. #> input_pk has 1128 unique entries with 1128 unique hmdb IDs. Of those IDs, 147 are detected in the data, which is 13.031914893617%.   #Number of matches: SingleIDs <- Biocrates_to_MetalinksDB_singleHMDB$data_summary%>%   summarise(total_matches_count = sum(matches_count, na.rm = TRUE))%>%   mutate(Name = \"SingleID\")  ############################## #Compare: bind_rows(MultipleIDs, SingleIDs)%>%   kableExtra::kbl(caption = \"Comparison of IDs found in MetalinksDB PK when having multiple versus a random single HMDB ID in the measured data.\", row.names=FALSE) %>%   kableExtra::kable_classic(full_width = F, html_font = \"Cambria\", font_size = 12)"},{"path":"/articles/prior-knowledge.html","id":"sect4","dir":"Articles","previous_headings":"","what":"4. Translate IDs","title":"Prior Knowledge - Access & Integration","text":"Important Information: Translating IDs databases e.g. KEGG HMDB non-trivial task, expected one original ID link many translated IDs, vice versa. discuss implications throughout vignette leave user discretion select appropriate ID based research question data.  Across different prior knowledge resources (see also tables ) specific metabolite IDs used hence depending prior knowledge resource specific metabolite ID required. want convert ‘translate’ IDs another commonly used form ID, instance measured data uses another type ID, can make use MetaProViz::translate_id() function. based OmniPathR RaMP-DB (Braisted et al. 2023) backend function currently supports ID translation metabolites following formats: - KEGG - HMDB - ChEBI - PubChem example translating KEGG pathways loaded MetaProViz::metsigdb_kegg HMDB ids:  Translation KEGG IDs KEGG pathways HMDB & pubchem IDs can immediately see despite ID translation, translations KEGG MetaboliteID HMDB PubChem IDs failed, resulting NA values. get better understanding combinations , let’s visualise translation ID types.  can also note previous table becomes apparent translation IDs one--one mapping, rather one--many mapping. fact common ID one format genuine one--many relationship format (e.g. one KEGG ID maps multiple HMDB IDs) even many--many relationship, IDs new format link back multiple IDs original format (e.g. two different KEGG IDs map multiple HMDS IDs, shared ). comes many implications analysis discussed next section.","code":"KEGG_Pathways_Translated <- MetaProViz::translate_id(data= KEGG_Pathways,                                                      metadata_info = c(InputID=\"MetaboliteID\", grouping_variable=\"term\"),                                                      from = c(\"kegg\"),                                                      to = c(\"hmdb\", \"pubchem\"))"},{"path":"/articles/prior-knowledge.html","id":"mapping-problems","dir":"Articles","previous_headings":"4. Translate IDs","what":"4.1 Mapping problems","title":"Prior Knowledge - Access & Integration","text":"complexities translating metabolite IDs demonstrated (Fig.2). relationships Original IDs (e.g. KEGG) Translated IDs (e.g. HMDB), can quite complex fact encounter one--one (matches found ID), one--none ( direct #relationship established), one--many (multiple matches found ID. .e. ambiguously mapped) many--many ( considers relationships Translated IDs Original IDs , translated ID ambiguously maps back multiple different Original IDs) mappings. enrichment analysis translation KEGG IDs HMDB IDs increases pathways size, .e. many metabolites pathway “Glycolysis / Gluconeogenesis - Homo sapiens (human)”, turn inflate/deflate enrichment results hence desired keep number metabolites pathway consistent.  complexity output MetaProViz::translate_id() includes Translation table showcased , additionally information mapping ambiguity well summary relationships Original Translated IDs. Indeed, translation e.g. KEGG hmdb pubchem includes multiple data frames including summary mapping occurrences:  Mappingsummary_hmdb also ability extract long version DF includes row mapping occurrence, can useful downstream analysis. Yet, can become large dependent amount many--many mappings, hence default generate summary. Within MetaProViz::translate_id() can set parameter summary =TRUE case dataframe includes , original translated ID, can use function MetaProViz::mapping_ambiguity() generate long summary well mapping summary general.   Long summary mapping problems taking account directions, ----. table shown KEGG ID C00002 maps 3 different HMDB IDs, shown one HMDB IDs HMDB0000538 maps one KEGG ID, hence Mapping one--many. two HMDB Ids also table checked many KEGG IDs map. Additionally, passed grouping_variable = \"term\" pathways, also means mappings checked within pathway across pathways (e.g. C00002 shown twice, two different terms).  fact, perform enrichment analysis need column source (=e.g. term) want keep metabolite IDs across pathways consistent, avoid ambiguous mapping much possible (many--many mapping), metabolite ID selection guided IDs might available us measured input data (Fig. 3). crucial circumvent inflation deflation metabolite-sets, turn affect enrichment analysis results. Hence, can use measured metabolite IDs guide selection PK IDs. crucial circumvent inflation deflation metabolite-sets, turn affect enrichment analysis results. something currently working hope provide within next release, stay tuned.","code":"names(KEGG_Pathways_Translated) #> [1] \"TranslatedDF\"             \"TranslatedDF_MappingInfo\" #> [3] \"Mappingsummary_hmdb\"      \"Mappingsummary_pubchem\" # Option 1: KEGG_Pathways_TranslatedSum <- MetaProViz::translate_id(data= KEGG_Pathways,                                                     metadata_info = c(InputID=\"MetaboliteID\", grouping_variable=\"term\"),                                                     from = c(\"kegg\"),                                                     to = c(\"hmdb\", \"pubchem\"),                                                     summary =TRUE) # Option 2: MappingProblems <- MetaProViz::mapping_ambiguity(     data =         KEGG_Pathways_Translated[[\"TranslatedDF\"]] %>%         dplyr::rename(\"KEGG\"=\"MetaboliteID\") %>%         dplyr::select(Description, KEGG, term, Metabolite, hmdb),     from = \"KEGG\",     to = \"hmdb\",     grouping_variable = \"term\",     summary=TRUE )"},{"path":"/articles/prior-knowledge.html","id":"sect5","dir":"Articles","previous_headings":"","what":"5. Run enrichment analysis","title":"Prior Knowledge - Access & Integration","text":"two options: 1. Representation Analysis (ORA) determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test MetaProViz::cluster_ora. can applied clusters metabolites example results MetaProViz::mca_2cond() MetaProViz::core() function. want details clustering methods please visit vignette Standard Metabolomics core Metabolomics. 2. Enrichment analysis standard differential analysis results. offer ORA MetaProViz::standard_ora, many statistical tests can used enrichment analysis. full scope different methods beyond scope MetaProViz, available decoupleR (Badia--Mompel et al. 2022) packages group. part MetaProViz package can load example data using function toy_data() test enrichment analysis:1.Cell line experiment (CellLine) choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. performed pre-processing differential analysis (details can found vignette vignette Standard Metabolomics) load differential metabolite analysis results comparison 786M-1A versus HK2. 2. Tissue experiment (Tissue) chose publicly available data paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. performed differential analysis (details can found vignette Metadata Analysis) load differential metabolite analysis results comparison Tumour versus Normal.","code":"# Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2 <- intracell_dma # Load the example data: Tissue_TvsN <- tissue_dma Tissue_TvsN_Old <- tissue_dma_old Tissue_TvsN_Young <- tissue_dma_young"},{"path":"/articles/prior-knowledge.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Prior Knowledge - Access & Integration","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tibble_3.3.0     stringr_1.5.1    dplyr_1.1.4      purrr_1.1.0      rlang_1.1.6      magrittr_2.0.3   #> [7] MetaProViz_3.0.3 #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3            gridExtra_2.3        httr2_1.2.0          tcltk_4.4.3          logger_0.4.0         #>   [6] readxl_1.4.5         compiler_4.4.3       RSQLite_2.4.1        systemfonts_1.2.3    vctrs_0.6.5          #>  [11] reshape2_1.4.4       rvest_1.0.4          pkgconfig_2.0.3      crayon_1.5.3         fastmap_1.2.0        #>  [16] backports_1.5.0      labeling_0.4.3       rmarkdown_2.29       sessioninfo_1.2.3    tzdb_0.5.0           #>  [21] ggbeeswarm_0.7.2     ragg_1.4.0           ggfortify_0.4.18     bit_4.6.0            xfun_0.52            #>  [26] cachem_1.1.0         jsonlite_2.0.0       progress_1.2.3       blob_1.2.4           later_1.4.2          #>  [31] broom_1.0.8          parallel_4.4.3       prettyunits_1.2.0    R6_2.6.1             bslib_0.9.0          #>  [36] stringi_1.8.7        RColorBrewer_1.1-3   ComplexUpset_1.3.3   limma_3.65.1         car_3.1-3            #>  [41] lubridate_1.9.4      jquerylib_0.1.4      cellranger_1.1.0     Rcpp_1.1.0           knitr_1.50           #>  [46] R.utils_2.13.0       readr_2.1.5          splines_4.4.3        igraph_2.1.4         timechange_0.3.0     #>  [51] tidyselect_1.2.1     rstudioapi_0.17.1    qvalue_2.38.0        abind_1.4-8          yaml_2.3.10          #>  [56] curl_6.4.0           plyr_1.8.9           withr_3.0.2          inflection_1.3.6     evaluate_1.0.4       #>  [61] desc_1.4.3           zip_2.3.3            xml2_1.3.8           pillar_1.11.0        ggpubr_0.6.1         #>  [66] carData_3.0-5        checkmate_2.3.2      generics_0.1.4       vroom_1.6.5          hms_1.1.3            #>  [71] ggplot2_3.5.2        scales_1.4.0         gtools_3.9.5         OmnipathR_3.17.4     glue_1.8.0           #>  [76] scatterplot3d_0.3-44 tools_4.4.3          ggsignif_0.6.4       fs_1.6.6             XML_3.99-0.18        #>  [81] grid_4.4.3           tidyr_1.3.1          qcc_2.7              colorspace_2.1-1     patchwork_1.3.1      #>  [86] beeswarm_0.4.0       vipor_0.4.7          Formula_1.2-5        cli_3.6.5            rappdirs_0.3.3       #>  [91] kableExtra_1.4.0     textshaping_1.0.1    Polychrome_1.5.4     viridisLite_0.4.2    svglite_2.2.1        #>  [96] gtable_0.3.6         R.methodsS3_1.8.2    rstatix_0.7.2        hash_2.2.6.3         selectr_0.4-2        #> [101] sass_0.4.10          digest_0.6.37        ggrepel_0.9.6        htmlwidgets_1.6.4    farver_2.1.2         #> [106] memoise_2.0.1        htmltools_0.5.8.1    pkgdown_2.1.3        R.oo_1.27.1          factoextra_1.0.7     #> [111] lifecycle_1.0.4      httr_1.4.7           statmod_1.5.0        bit64_4.6.0-1        MASS_7.3-64"},{"path":[]},{"path":"/articles/sample-metadata.html","id":"section","dir":"Articles","previous_headings":"","what":"Sample Metadata Analysis","title":"Sample Metadata Analysis","text":"Tissue metabolomics experiment standard metabolomics experiment using tissue samples (e.g. animals patients).tutorial showcase use MetaProViz: perform differential metabolite analysis (dma) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors based patients demographics like age, gender tumour stage. Find main metabolite drivers separate patients based demographics like age, gender tumour stage. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools # devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  # dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(tidyr) library(tibble) library(stringr)  # Please install the Biocmanager Dependencies: # BiocManager::install(\"clusterProfiler\") # BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/sample-metadata.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Sample Metadata Analysis","text":"choose example datasets, publicly available paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs (Hakimi et al. 2016). Metabolomics done using company Metabolon, untargeted metabolomics. use median normalised data supplementary table 2 paper. combined metainformation patients metabolite measurements removed unidentified metabolites. Lastly, added column “Stage” Stage1 Stage2 patients summarised “EARLY-STAGE” Stage3 Stage4 patients “LATE-STAGE”. Moreover, added column “Age”, patients “AGE SURGERY” <42 defined “Young” patients AGE SURGERY >58 “Old” remaining patients “Middle”. #part MetaProViz package can load example data global environment using function toy_data():1. Tissue experiment (Intra) can access built-dataset tissue_norm, includes columns Sample information columns median normalised measured metabolite integrated peaks. Preview DF Tissue_Norm including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs, HMDB IDs, etc. selected pathways (MappingInfo) Preview DF Tissue_MetaData including trivial metabolite identifiers used experiment well IDs pathway information.","code":"# Load the example data: Tissue_Norm <- tissue_norm%>%   column_to_rownames(\"Code\") Tissue_MetaData <- tissue_meta%>%   column_to_rownames(\"Metabolite\")"},{"path":[]},{"path":"/articles/sample-metadata.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Sample Metadata Analysis","text":"done authors paper use median normalized data. want know can use MetaProViz pre-processing module, please check vignette: - Standard metabolomics data - Consumption-Release (core) metabolomics data cell culture media","code":""},{"path":"/articles/sample-metadata.html","id":"metadata-analysis","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Metadata analysis","title":"Sample Metadata Analysis","text":"can use patient’s metadata find main metabolite drivers separate patients based demographics like age, gender, etc. metadata analysis based principal component analysis (PCA), dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). MetaProViz::metadata_analysis() function perform PCA extract different PCs followed annova find main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_aov]] including main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_summary]] including metabolite drivers rows list patients demographics can separate.","code":"MetaRes <- MetaProViz::metadata_analysis(data=Tissue_Norm[,-c(1:13)],                                      metadata_sample= Tissue_Norm[,c(2,4:5,12:13)],                                      scaling = TRUE,                                      percentage = 0.1,                                      cutoff_stat= 0.05,                                      cutoff_variance = 1) #> The column names of the 'metadata_sample' contain special character that where removed. ##1. Tissue_Type TissueTypeList <- MetaRes[[\"res_summary\"]]%>%   filter(MainDriver_Term == \"TISSUE_TYPE\")%>%   filter(`MainDriver_Sum(VarianceExplained)`>30)%>%   select(feature)%>%   pull()  # select columns tissue_norm that are in TissueTypeList if they exist Input_Heatmap <- Tissue_Norm[ , names(Tissue_Norm) %in% TissueTypeList]#c(\"N1-methylguanosine\", \"N-acetylalanine\", \"lysylmethionine\")  # Heatmap: Metabolites that separate the demographics, like here TISSUE_TYPE MetaProViz:::viz_heatmap(data = Input_Heatmap,                        metadata_sample = Tissue_Norm[,c(1:13)],                        metadata_info = c(color_Sample = list(\"TISSUE_TYPE\")),                        scale =\"column\",                       plot_name = \"MainDrivers\")"},{"path":"/articles/sample-metadata.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Sample Metadata Analysis","text":"use Differential Metabolite Analysis (dma) compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. information please see vignette: - Standard metabolomics data - Consumption-Release (core) metabolomics data cell culture media perform multiple comparisons based different patient demographics available: 1. Tumour versus Normal: patients 2. Tumour versus Normal: Subset Early Stage patients 3. Tumour versus Normal: Subset Late Stage patients 4. Tumour versus Normal: Subset Young patients 5. Tumour versus Normal: Subset Old patients       can see different Volcano plots smaller p.adjusted values differences Log2FC range. can also use MetaproViz::viz_volcano() function plot comparisons together plot, Tumour versus Normal young old patients:  can observe Tumour versus Normal lower significance values Young patients compared Old patients. can due higher variance metabolite measurements Young patients compared Old patients. can also check top changed metabolites comparing Tumour versus Normal correlate main metabolite drivers separate patients based TISSUE_TYPE, Tumour Normal.","code":"# Prepare the different selections EarlyStage <- Tissue_Norm %>%   filter(STAGE== \"EARLY-STAGE\") LateStage <- Tissue_Norm %>%   filter(STAGE==\"LATE-STAGE\") Old <- Tissue_Norm %>%   filter(AGE==\"Old\") Young <- Tissue_Norm%>%   filter(AGE==\"Young\")  DFs <- list(\"TissueType\"= Tissue_Norm,\"EarlyStage\"= EarlyStage, \"LateStage\"= LateStage, \"Old\"= Old, \"Young\"=Young)  # Run dma ResList <- list() for(item in names(DFs)){   #Get the right DF:   data <- DFs[[item]]    message(paste(\"Running dma for\", item))   #Create folder for saving each comparison   dir.create(paste(getwd(),\"/MetaProViz_Results/dma/\", sep=\"\"), showWarnings = FALSE)   dir.create(paste(getwd(),\"/MetaProViz_Results/dma/\", item, sep=\"\"), showWarnings = FALSE)    #Perform dma   TvN <- MetaProViz::dma(data =  data[,-c(1:13)],                    metadata_sample =  data[,c(1:13)],                    metadata_info = c(Conditions=\"TISSUE_TYPE\", Numerator=\"TUMOR\" , Denominator = \"NORMAL\"),                    shapiro=FALSE, #The data have been normalized by the company that provided the results and include metabolites with zero variance as they were all imputed with the same missing value.                    path = paste(getwd(),\"/MetaProViz_Results/dma/\", item, sep=\"\"))    #Add Results to list   ResList[[item]] <- TvN } #> Running dma for TissueType #> There are no NA/0 values #> Running dma for EarlyStage #> There are no NA/0 values #> Running dma for LateStage #> There are no NA/0 values #> Running dma for Old #> There are no NA/0 values #> Running dma for Young #> There are no NA/0 values # Early versus Late Stage MetaProViz::viz_volcano(plot_types=\"Compare\",                        data=ResList[[\"EarlyStage\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        data2= ResList[[\"LateStage\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"EarlyStage\", data2= \"LateStage\"),                        plot_name= \"EarlyStage-TUMOR_vs_NORMAL compared to LateStage-TUMOR_vs_NORMAL\",                        subtitle= \"Results of dma\" ) # Young versus Old MetaProViz::viz_volcano(plot_types=\"Compare\",                        data=ResList[[\"Young\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        data2= ResList[[\"Old\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"Young\", data2= \"Old\"),                        plot_name= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        subtitle= \"Results of dma\" ) # Get the top changed metabolites top_entries <- ResList[[\"TissueType\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]] %>%   arrange(desc(t.val)) %>%   slice(1:25)%>%   select(Metabolite)%>%   pull() bottom_entries <- ResList[[\"TissueType\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]] %>%   arrange(desc(t.val)) %>%   slice((n()-24):n())%>%   select(Metabolite)  %>%   pull()  # Check if those overlap with the top demographics drivers ggVennDiagram::ggVennDiagram(list(top = top_entries,                                   Bottom = bottom_entries,                                   TissueTypeList = TissueTypeList))+   ggplot2::scale_fill_gradient(low = \"blue\", high = \"red\") MetaData_Metab <- merge(x=tissue_meta,                    y= MetaRes[[\"res_summary\"]][, c(1,5:6) ]%>%tibble::column_to_rownames(\"feature\"),                    by=0,                    all.y=TRUE)%>%   column_to_rownames(\"Row.names\")  # Make a Volcano plot: MetaProViz::viz_volcano(plot_types=\"Standard\",                        data=ResList[[\"TissueType\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        metadata_feature =  MetaData_Metab,                        metadata_info = c(color = \"MainDriver_Term\"),                       plot_name= \"TISSUE_TYPE-TUMOR_vs_NORMAL\",                        subtitle= \"Results of dma\" )"},{"path":"/articles/sample-metadata.html","id":"metabolite-id-qc","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Metabolite ID QC","title":"Sample Metadata Analysis","text":"perform enrichment analysis,important check availability metabolite IDs aim use. can first create overview plot: notice 76 features metabolite ID assigned, yet trivial name metabolite class assigned. 135 metabolites pubchem ID, yet HMDB KEGG ID. Next, try understand missing IDs focusing HMDb example: 200 metabolites HMDB ID HMDB ID assigned, one HMDB ID. assume experimental setup account stereoisomers IDs different degrees ambiguity possible (e.g. L-Alanine HMDB ID present add D-Alanine HMDB ID, see PK vignette details). enables us assign additional potential HMDB IDs per feature. Overview ID types metabolites without HMDB ID. inspect tables can check example, 16-hydroxypalmitate certainly HMDB ID, yet missing original metadata table. can check structures associated PubChem:10466 KEGG:C18218 indeed identical, expect, structure HMDB , ID HMDB0006294. can course IDs, KEGG IDs:   Lastly, new metadata table, can use enrichment analysis: compare results upset plot original metadata can see initially 251 metabolites pubchem, HMDB KEGG ID, whilst adding equivalent IDs translating IDs, now 285 metabolites three IDs. 135 metabolite Pubchem ID, whilst now found HMDB /KEGG IDs half metabolites 65 metabolites remaining Pubchem ID.","code":"#Load the feature metadata: MetaboliteIDs <- Tissue_MetaData %>%   rownames_to_column(\"Metabolite\")%>%   dplyr::rename(\"HMDB\"= \"Group_HMDB\")%>%   slice(1:577)# only keep entrys with trivial names  ccRCC_CompareIDs <- MetaProViz::compare_pk(data = list(Biocft = MetaboliteIDs |> dplyr::rename(\"Class\"=\"SUPER_PATHWAY\")),                                            name_col = \"Metabolite\",                                            metadata_info = list(Biocft = c(\"KEGG\", \"HMDB\", \"PUBCHEM\")),                                            plot_name = \"Overlap of ID types in ccRCC data\") Plot1_HMDB <- MetaProViz::count_id(MetaboliteIDs, \"HMDB\") Input_HMDB <- MetaboliteIDs %>%   dplyr::filter(!is.na(HMDB)) %>% # ID in the measured data we want to use, hence we remove NA's   dplyr::select(\"Metabolite\", \"HMDB\", \"SUPER_PATHWAY\") # only keep relevant columns  # Add equivalent IDs: tissue_meta_AddIDs_HMDB <- MetaProViz::equivalent_id(data= Input_HMDB,                                                            metadata_info = c(InputID=\"HMDB\"),# ID in the measured data, here we use the HMDB ID                                                            from = \"hmdb\") #> Warning in MetaProViz::equivalent_id(data = Input_HMDB, metadata_info = #> c(InputID = \"HMDB\"), : The following IDs are duplicated and removed: HMDB01859 #> chebi is used to find additional potential IDs for hmdb. # Let's see how this has changed the number of entries: tissue_meta_AddIDs_HMDB <- merge(x=MetaboliteIDs,                                        y=tissue_meta_AddIDs_HMDB,                                        by=\"HMDB\",                                        all.x=TRUE)  # Plot 2 after equivalent IDs where added Plot2_HMDB <- MetaProViz::count_id(tissue_meta_AddIDs_HMDB, \"AllIDs\") no_hmdb <- dplyr::filter(MetaboliteIDs, is.na(HMDB) & (!is.na(PUBCHEM) | !is.na(KEGG)))  tissue_meta_translated_HMDB <-   MetaProViz::translate_id(no_hmdb, metadata_info = list(InputID = \"PUBCHEM\", grouping_variable = \"SUPER_PATHWAY\"), from = \"pubchem\", to = \"hmdb\") |>   extract2(\"TranslatedDF\") |>   rename(hmdb_from_pubchem = hmdb) |>   MetaProViz::translate_id(metadata_info = list(InputID = \"KEGG\", grouping_variable = \"SUPER_PATHWAY\"), from = \"kegg\", to = \"hmdb\") |>   extract2(\"TranslatedDF\") |>   rename(hmdb_from_kegg = hmdb) #> Warning in MetaProViz::translate_id(no_hmdb, metadata_info = list(InputID = #> \"PUBCHEM\", : The following IDs are duplicated within one group: 5.24601e+13, #> 6.99312e+13  # Here we combine the tables above, created by equivalent_id and translate_id: Tissue_MetaData_HMDB <-   left_join(     tissue_meta_AddIDs_HMDB |>       select(Metabolite = Metabolite.x, SUPER_PATHWAY = SUPER_PATHWAY.x, SUB_PATHWAY ,COMP_ID, PLATFORM, RI, MASS, CAS, PUBCHEM, KEGG,  HMDB, hmdb_from_equivalentid = AllIDs),     tissue_meta_translated_HMDB |>       select(COMP_ID, hmdb_from_pubchem, hmdb_from_kegg) |> mutate(across(starts_with(\"hmdb_from\"), ~na_if(., \"\"))),     by = 'COMP_ID'   ) |>   rowwise() |>   mutate(hmdb_combined = list(unique(na.omit(unlist(stringr::str_split(across(starts_with(\"hmdb_from\")), \",\")))))) |>   mutate(hmdb_combined = paste0(hmdb_combined, collapse = ',')) |>  # we concatenate by \",\" only for the sake of printing in notebook   ungroup()  # Plot 3: Plot3_HMDB <- MetaProViz::count_id(Tissue_MetaData_HMDB, \"hmdb_combined\") Plot1_KEGG <- MetaProViz::count_id(MetaboliteIDs, \"KEGG\") ################################################################################################################## Input_KEGG <- Tissue_MetaData_HMDB %>%   dplyr::filter(!is.na(KEGG)) %>% # ID in the measured data we want to use, hence we remove NA's   dplyr::select(\"Metabolite\", \"KEGG\", \"SUPER_PATHWAY\") # only keep relevant columns  # Add equivalent IDs: tissue_meta_AddIDs_KEGG <- MetaProViz::equivalent_id(data= Input_KEGG,                                                 metadata_info = c(InputID=\"KEGG\"),# ID in the measured data, here we use the HMDB ID                                                 from = \"kegg\") #> Warning in MetaProViz::equivalent_id(data = Input_KEGG, metadata_info = #> c(InputID = \"KEGG\"), : The following IDs are duplicated and removed: C01585, #> C00474, C06804, C03594, C06429 #> chebi is used to find additional potential IDs for kegg.  # Let's see how this has changed the number of entries: tissue_meta_AddIDs_KEGG <- merge(x=Tissue_MetaData_HMDB,                                  y=tissue_meta_AddIDs_KEGG,                                  by=\"KEGG\",                                  all.x=TRUE)  Plot2_KEGG <-  MetaProViz::count_id(tissue_meta_AddIDs_KEGG, \"AllIDs\") ################################################################################################################### no_KEGG <- dplyr::filter(Tissue_MetaData_HMDB, is.na(KEGG) & (!is.na(PUBCHEM) | !is.na(HMDB)))  tissue_meta_translated_KEGG <-   MetaProViz::translate_id(no_KEGG, metadata_info = list(InputID = \"PUBCHEM\", grouping_variable = \"SUPER_PATHWAY\"), from = \"pubchem\", to = \"kegg\") |>   extract2(\"TranslatedDF\") |>   rename(kegg_from_pubchem = kegg) |>   MetaProViz::translate_id(metadata_info = list(InputID = \"HMDB\", grouping_variable = \"SUPER_PATHWAY\"), from = \"hmdb\", to = \"kegg\") |>   extract2(\"TranslatedDF\") |>   rename(kegg_from_hmdb = kegg) #> Warning in MetaProViz::translate_id(no_KEGG, metadata_info = list(InputID = #> \"PUBCHEM\", : The following IDs are duplicated within one group: 5.24601e+13, #> 6.99312e+13  # here we combine the tables above, created by equivalent_id and translate_id: Tissue_MetaData_KEGG <-   left_join(     tissue_meta_AddIDs_KEGG |>       select(Metabolite = Metabolite.x, SUPER_PATHWAY = SUPER_PATHWAY.x,SUB_PATHWAY, COMP_ID, PLATFORM, RI, MASS, CAS, PUBCHEM, HMDB=hmdb_combined , HMDB_Original = HMDB, hmdb_from_equivalentid, hmdb_from_kegg, hmdb_from_pubchem, , KEGG_Original = KEGG, kegg_from_equivalentid = AllIDs),     tissue_meta_translated_KEGG |>       select(COMP_ID, kegg_from_pubchem, kegg_from_hmdb) |> mutate(across(starts_with(\"kegg_from\"), ~na_if(., \"\"))),     by = 'COMP_ID'   ) |>   rowwise() |>   mutate(KEGG= list(unique(na.omit(unlist(stringr::str_split(across(starts_with(\"kegg_from\")), \",\")))))) |>   mutate(KEGG = paste0(KEGG, collapse = ',')) |>  # we concatenate by \",\" only for the sake of printing in notebook   ungroup()  # Lets see the count now: Plot3_KEGG <- MetaProViz::count_id(Tissue_MetaData_KEGG, \"KEGG\") Tissue_MetaData_Extended <-  Tissue_MetaData_KEGG[, c(1:10,19, 11:18)]%>%   mutate(     KEGG = ifelse(KEGG == \"\", NA, KEGG),     HMDB = ifelse(HMDB == \"\", NA, HMDB)   )  ccRCC_CompareIDs_Extended <- MetaProViz::compare_pk(data = list(Biocft = Tissue_MetaData_Extended |> dplyr::rename(\"Class\"=\"SUPER_PATHWAY\")),                                                     name_col = \"Metabolite\",                                                     metadata_info = list(Biocft = c(\"KEGG\", \"HMDB\", \"PUBCHEM\")),                                                     plot_name = \"Overlap of ID types in ccRCC data\")"},{"path":"/articles/sample-metadata.html","id":"ora","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"ORA","title":"Sample Metadata Analysis","text":"can perform Representation Analysis (ORA) using KEGG pathways comparison plot significant pathways. Noteworthy, since metabolites KEGG IDs, lose information. Given cases multiple KEGG IDs measured feature, check causes mapping multiple, different entries KEGG pathway-metabolite sets: Terms KEGG pathways measured feature mapps one ID, inflate enrichment analysis. Dependent biological question organism prior knowledge, one can either maintain metabolite ID likely metabolite (e.g. human moire likely L-aminoacid D-aminoacid) metabolite ID represented /less pathways (specificity). looking cases multiple IDs, cases match prior knowledge can just maintain one ID, whilst cases exactly one match maintain ID found prior knowledge. Terms KEGG pathways measured feature mapps one ID, may inflate enrichment analysis. case ActionRequired==\"Check\", can look column Action_Specific contains additional information. case entry KeepEachID, multiple matches prior knowledge found, yet features different pathways (=GroupingVariable). Yet, case KeepOneID, different IDs map pathway prior knowledge least one case therefore keeping inflate enrichment analysis. Lastly, need add column including selected IDs metadata table: results p.adjusted value < 0.1 minimum 10% pathway detected visualized Volcano plots:","code":"#Load Kegg pathways: KEGG_Pathways <- metsigdb_kegg()  #check mapping with metadata  ccRCC_to_KEGGPathways <- MetaProViz::checkmatch_pk_to_data(data = Tissue_MetaData_Extended,                                                            input_pk = KEGG_Pathways,                                                            metadata_info = c(InputID = \"KEGG\", PriorID = \"MetaboliteID\", grouping_variable = \"term\")) #> Warning in MetaProViz::checkmatch_pk_to_data(data = Tissue_MetaData_Extended, : #> 251 NA values were removed from column KEGG #> Warning in MetaProViz::checkmatch_pk_to_data(data = Tissue_MetaData_Extended, : #> 8 duplicated IDs were removed from column KEGG #> data has multiple IDs per measurement = TRUE. input_pk has multiple IDs per entry = FALSE. #> data has 318 unique entries with 334 unique KEGG IDs. Of those IDs, 250 match, which is 74.8502994011976%. #> input_pk has 6511 unique entries with 6511 unique MetaboliteID IDs. Of those IDs, 250 are detected in the data, which is 3.83965596682537%. #> Warning in MetaProViz::checkmatch_pk_to_data(data = Tissue_MetaData_Extended, : #> There are cases where multiple detected IDs match to multiple prior knowledge #> IDs of the same category  problems_terms <- ccRCC_to_KEGGPathways[[\"GroupingVariable_summary\"]]%>%   filter(!Group_Conflict_Notes== \"None\") # Select the cases where a feature has multiple IDs multipleIDs <- ccRCC_to_KEGGPathways[[\"data_summary\"]]%>%   filter(original_count>1) SelectedIDs <- ccRCC_to_KEGGPathways[[\"data_summary\"]]%>%   #Expand rows where Action == KeepEachID by splitting `matches`   dplyr::mutate(matches_split = if_else(Action_Specific == \"KeepEachID\", matches, NA_character_)) %>%   separate_rows(matches_split, sep = \",\\\\s*\") %>%   mutate(InputID_select = if_else(Action_Specific  == \"KeepEachID\", matches_split, InputID_select)) %>%   select(-matches_split) %>%   #Select one ID for AcionSpecific==KeepOneID   dplyr::mutate(InputID_select = case_when(     Action_Specific == \"KeepOneID\" & matches == \"C03460, C03722\" ~ \"C03722\", # 2-Methylprop-2-enoyl-CoA versus Quinolinate. No evidence, hence we keep the one present in more pathways ( C03722=7 pathways, C03460=2 pathway)     Action_Specific == \"KeepOneID\" & matches ==  \"C00221, C00031\" ~ \"C00031\", # These are D- and L-Glucose. We have human samples, so in this conflict we will maintain L-Glucose     Action_Specific == \"KeepOneID\" & matches ==  \"C17737, C00695\" ~ \"C00695\", # Allocholic acid versus Cholic acid. No evidence, hence we keep the one present in more pathways (C00695 = 4 pathways, C17737 = 1 pathway)     Action_Specific == \"KeepOneID\" ~ InputID_select,  # Keep NA where not matched manually     TRUE ~ InputID_select   )) Tissue_MetaData_Extended <- merge(x= SelectedIDs %>%                                         dplyr::select(KEGG, InputID_select),                                   y= Tissue_MetaData_Extended,                                   by= \"KEGG\",                                   all.y=TRUE) # Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  for(comparison in names(ResList)){#Res list includes the different comparisons we performed above <-   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   dma_res <- merge(x= Tissue_MetaData_Extended,                    y= ResList[[comparison]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]],                     by=\"Metabolite\",                     all=TRUE)      #Ensure unique IDs and full background --> we include measured features that do not have a KEGG ID.   dma_res <- dma_res[,c(3,21:25)]%>%     dplyr::mutate(InputID_select = if_else(       is.na(InputID_select),       paste0(\"NA_\", cumsum(is.na(InputID_select))),       InputID_select       ))%>% #remove duplications and keep the higher Log2FC measurement     group_by(InputID_select) %>%     slice_max(order_by = Log2FC, n = 1, with_ties = FALSE) %>%     ungroup()%>%     remove_rownames()%>%     tibble::column_to_rownames(\"InputID_select\")      #Perform ORA   Res <- MetaProViz::standard_ora(data= dma_res, #Input data requirements: column `t.val` and column `Metabolite`                                  metadata_info=c(pvalColumn=\"p.adj\", percentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"MetaboliteID\"),                                  input_pathway=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                  pathway_name=paste0(\"KEGG_\", comparison, sep=\"\"),                                  min_gssize=3,                                  max_gssize=1000,                                  cutoff_stat=0.01,                                  cutoff_percentage=10)    DM_ORA_res[[comparison]] <- Res    #Select to plot:   Res_Select <- Res[[\"ClusterGosummary\"]]%>%     filter(p.adjust<0.1)%>%     #filter(pvalue<0.05)%>%     filter(percentage_of_Pathway_detected>10)    if(is.null(Res_Select)==FALSE){      MetaProViz::viz_volcano(plot_types=\"PEA\",                        data= dma_res, #Must be the data you have used as an input for the pathway analysis                        data2=as.data.frame(Res_Select )%>%dplyr::rename(\"term\"=\"ID\"),                        metadata_info= c(PEA_Pathway=\"term\",# Needs to be the same in both, metadata_feature and data2.                                        PEA_stat=\"p.adjust\",#Column data2                                        PEA_score=\"GeneRatio\",#Column data2                                        PEA_Feature=\"MetaboliteID\"),# Column metadata_feature (needs to be the same as row names in data)                        metadata_feature= KEGG_Pathways,#Must be the pathways used for pathway analysis                        plot_name= paste(\"KEGG_\", comparison, sep=\"\"),                        subtitle= \"PEA\" )   } }"},{"path":"/articles/sample-metadata.html","id":"biological-regulated-clustering","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Biological regulated clustering","title":"Sample Metadata Analysis","text":"understand metabolites changing independent patients age, hence due tumour versus normal, metabolites change independent tumour versus normal, hence due different age, can use MetaProViz::mca_2cond() function. Metabolite Clustering Analysis (MCA) enables clustering metabolites groups based logical regulatory rules. set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Thereby “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. information can also check vignettes. Now can use information colour code volcano plot. plot individual vocano plots metabolite pathway defined feature metadata provided part data (Hakimi et al. 2016).","code":"MCAres <-  MetaProViz::mca_2cond(data_c1=ResList[[\"Young\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]],                                  data_c2=ResList[[\"Old\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]],                                  metadata_info_c1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1),                                  metadata_info_c2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1),                                  feature = \"Metabolite\",                                  save_table = \"csv\",                                  method_background=\"C1&C2\"#Most stringend background setting, only includes metabolites detected in both comparisons                                  ) # Add metabolite information such as KEGG ID or pathway to results MetaData_Metab <- merge(x=Tissue_MetaData,                    y= MCAres[[\"MCA_2Cond_Results\"]][, c(1, 14:15)]%>%tibble::column_to_rownames(\"Metabolite\"),                    by=0,                    all.y=TRUE)%>%   tibble::column_to_rownames(\"Row.names\")  MetaProViz::viz_volcano(plot_types=\"Compare\",                        data=ResList[[\"Young\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        data2= ResList[[\"Old\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"Young\", data2= \"Old\"),                        metadata_feature =  MetaData_Metab,                       plot_name= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        subtitle= \"Results of dma\",                        metadata_info = c(individual = \"SUPER_PATHWAY\",                                         color = \"RG2_Significant\"))  MetaProViz::viz_volcano(plot_types=\"Compare\",                        data=ResList[[\"Young\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        data2= ResList[[\"Old\"]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                        name_comparison= c(data=\"Young\", data2= \"Old\"),                        metadata_feature =  MetaData_Metab,                       plot_name= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL_Sub\",                        subtitle= \"Results of dma\",                        metadata_info = c(individual = \"SUB_PATHWAY\",                                         color = \"RG2_Significant\"))"},{"path":"/articles/sample-metadata.html","id":"pathway-enrichment","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pathway enrichment","title":"Sample Metadata Analysis","text":"Next, perform Representation Analysis (ORA) using KEGG pathways comparison.","code":"# Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  KEGG_Pathways <- MetaProViz::metsigdb_kegg()  for(comparison in names(ResList)){   dma_res <- merge(x= Tissue_MetaData_Extended,                    y=ResList[[comparison]][[\"dma\"]][[\"TUMOR_vs_NORMAL\"]],                     by=\"Metabolite\",                     all=TRUE)      #Ensure unique IDs and full background --> we include measured features that do not have a KEGG ID.   dma_res <- dma_res[,c(3,21:25)]%>%     dplyr::mutate(InputID_select = if_else(       is.na(InputID_select),       paste0(\"NA_\", cumsum(is.na(InputID_select))),       InputID_select       ))%>% #remove duplications and keep the higher Log2FC measurement     group_by(InputID_select) %>%     slice_max(order_by = Log2FC, n = 1, with_ties = FALSE) %>%     ungroup()%>%     remove_rownames()%>%     tibble::column_to_rownames(\"InputID_select\")         #Perform ORA   Res <- MetaProViz::standard_ora(data= dma_res, #Input data requirements: column `t.val` and column `Metabolite`                                  metadata_info=c(pvalColumn=\"p.adj\", percentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"MetaboliteID\"),                                  input_pathway=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                  pathway_name=paste0(\"KEGG_\", comparison, sep=\"\"),                                  min_gssize=3,                                  max_gssize=1000,                                  cutoff_stat=0.01,                                  cutoff_percentage=10)    DM_ORA_res[[comparison]] <- Res    #Select to plot:   Res_Select <- Res[[\"ClusterGosummary\"]]%>%     filter(p.adjust<0.1)%>%     #filter(pvalue<0.05)%>%     filter(percentage_of_Pathway_detected>10)    if(is.null(Res_Select)==FALSE){      MetaProViz::viz_volcano(plot_types=\"PEA\",                        data= dma_res, #Must be the data you have used as an input for the pathway analysis                        data2=as.data.frame(Res_Select )%>%dplyr::rename(\"term\"=\"ID\"),                        metadata_info= c(PEA_Pathway=\"term\",# Needs to be the same in both, metadata_feature and data2.                                        PEA_stat=\"p.adjust\",#Column data2                                        PEA_score=\"GeneRatio\",#Column data2                                        PEA_Feature=\"MetaboliteID\"),# Column metadata_feature (needs to be the same as row names in data)                        metadata_feature= KEGG_Pathways,#Must be the pathways used for pathway analysis                       plot_name= paste(\"KEGG_\", comparison, sep=\"\"),                        subtitle= \"PEA\" )   } }"},{"path":"/articles/sample-metadata.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Sample Metadata Analysis","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] stringr_1.5.1    tibble_3.3.0     tidyr_1.3.1      rlang_1.1.6      dplyr_1.1.4      magrittr_2.0.3   #> [7] MetaProViz_3.0.3 #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3              gridExtra_2.3          httr2_1.2.0            tcltk_4.4.3            logger_0.4.0           #>   [6] readxl_1.4.5           compiler_4.4.3         RSQLite_2.4.1          systemfonts_1.2.3      vctrs_0.6.5            #>  [11] reshape2_1.4.4         rvest_1.0.4            pkgconfig_2.0.3        crayon_1.5.3           fastmap_1.2.0          #>  [16] backports_1.5.0        labeling_0.4.3         rmarkdown_2.29         sessioninfo_1.2.3      tzdb_0.5.0             #>  [21] ggbeeswarm_0.7.2       ragg_1.4.0             ggfortify_0.4.18       purrr_1.1.0            bit_4.6.0              #>  [26] xfun_0.52              cachem_1.1.0           jsonlite_2.0.0         progress_1.2.3         blob_1.2.4             #>  [31] later_1.4.2            broom_1.0.8            parallel_4.4.3         prettyunits_1.2.0      R6_2.6.1               #>  [36] bslib_0.9.0            stringi_1.8.7          RColorBrewer_1.1-3     ComplexUpset_1.3.3     limma_3.65.1           #>  [41] car_3.1-3              lubridate_1.9.4        jquerylib_0.1.4        cellranger_1.1.0       Rcpp_1.1.0             #>  [46] knitr_1.50             R.utils_2.13.0         readr_2.1.5            splines_4.4.3          igraph_2.1.4           #>  [51] timechange_0.3.0       tidyselect_1.2.1       rstudioapi_0.17.1      qvalue_2.38.0          abind_1.4-8            #>  [56] yaml_2.3.10            ggVennDiagram_1.5.4    curl_6.4.0             plyr_1.8.9             withr_3.0.2            #>  [61] inflection_1.3.6       evaluate_1.0.4         desc_1.4.3             zip_2.3.3              xml2_1.3.8             #>  [66] pillar_1.11.0          ggpubr_0.6.1           carData_3.0-5          checkmate_2.3.2        generics_0.1.4         #>  [71] vroom_1.6.5            hms_1.1.3              ggplot2_3.5.2          scales_1.4.0           gtools_3.9.5           #>  [76] OmnipathR_3.17.4       glue_1.8.0             pheatmap_1.0.13        scatterplot3d_0.3-44   tools_4.4.3            #>  [81] ggsignif_0.6.4         fs_1.6.6               XML_3.99-0.18          grid_4.4.3             qcc_2.7                #>  [86] colorspace_2.1-1       patchwork_1.3.1        beeswarm_0.4.0         vipor_0.4.7            Formula_1.2-5          #>  [91] cli_3.6.5              rappdirs_0.3.3         kableExtra_1.4.0       textshaping_1.0.1      Polychrome_1.5.4       #>  [96] viridisLite_0.4.2      svglite_2.2.1          gtable_0.3.6           R.methodsS3_1.8.2      rstatix_0.7.2          #> [101] hash_2.2.6.3           selectr_0.4-2          EnhancedVolcano_1.24.0 sass_0.4.10            digest_0.6.37          #> [106] ggrepel_0.9.6          htmlwidgets_1.6.4      farver_2.1.2           memoise_2.0.1          htmltools_0.5.8.1      #> [111] pkgdown_2.1.3          R.oo_1.27.1            factoextra_1.0.7       lifecycle_1.0.4        httr_1.4.7             #> [116] statmod_1.5.0          bit64_4.6.0-1          MASS_7.3-64"},{"path":[]},{"path":"/articles/standard-metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"Standard Metabolomics","title":"Standard Metabolomics","text":"standard metabolomics experiment refers intracellular extracts (e.g. cell bacteria culture), tissue samples (e.g. animals patients), plasma samples (e.g. blood) many types experimental setups.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (dma) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS). # 2. Install the latest development version from GitHub using devtools # devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)   # dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(ggfortify) library(tibble)  # Please install the Biocmanager Dependencies: # BiocManager::install(\"clusterProfiler\") # BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/standard-metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Standard Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. Intracellular experiment (Intra) raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. can access built-dataset intracell_raw, includes columns Sample information columns measured metabolite integrated peaks. Preview DF Intra including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Intra <- intracell_raw%>%   column_to_rownames(\"Code\") MappingInfo <- cellular_meta%>%   column_to_rownames(\"Metabolite\") # This will use KEGGREST to query the KEGG API to load the pathways: KEGG_Pathways <- MetaProViz::metsigdb_kegg()"},{"path":"/articles/standard-metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"Standard Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/standard-metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Standard Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter tic_Normalization refers total Ion Count (tic) normalisation, often used LC-MS derived metabolomics data. tic_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, tic normalisation used small number features (= metabolites), since tic assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter mvi refers Missing Value Imputation (mvi) mvi = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter hotellins_confidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations tic part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.    Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition 786-M2A, can see based Hotellin’s T2 test, one sample detected outlier first round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see viz_pca() function. proceed, remove outlier: may noticed, example dataset several biological replicates injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function replicate_sum(), task save results: Using pre-processed data, can now use MetaProViz visualization module generate overview Heatmaps viz_heatmap() PCA plots viz_pca(). can see examples .","code":"#### Select Pool samples: # Get the Pool data PoolData <- intracell_raw %>%   subset(Conditions==\"Pool\", select = -c(1:3)) # we remove the columns \"Conditions\", \"Analytical_Replicates\" and \"Biological_Replicates\"  # Check the metabolite variability Pool_Estimation_result<- MetaProViz::pool_estimation(data = PoolData,                                                      cutoff_cv = 30) #### Alternatively a full dataset can be added. Here, the Conditions and PoolSamples name have to be specified in the Input_metadata_info Pool_Estimation_result<- MetaProViz::pool_estimation(data = Intra[,-c(1:3)],                                                      metadata_sample = Intra[,1:3],                                                      metadata_info = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                      cutoff_cv = 30)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] PreprocessingResults <- MetaProViz::processing(data=Intra[-c(49:58) ,-c(1:3)], #remove pool samples and columns with sample information                                                    metadata_sample=Intra[-c(49:58) , c(1:3)], #remove pool samples and columns with metabolite measurements                                                    metadata_info = c(Conditions = \"Conditions\",                                                                      Biological_Replicates = \"Biological_Replicates\"),                                                    featurefilt = \"Modified\",                                                    cutoff_featurefilt = 0.8,                                                    tic = TRUE,                                                    mvi = TRUE,                                                    hotellins_confidence = 0.99,# We perform outlier testing using 0.99 confidence intervall                                                    core = FALSE,                                                    save_plot = \"svg\",                                                    save_table= \"csv\",                                                    print_plot = TRUE,                                                    path = NULL)   # This is the results table: Intra_Preprocessed <- PreprocessingResults[[\"DF\"]][[\"Preprocessing_output\"]] #> feature_filtering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: AICAR, FAICAR, SAICAR #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> total Ion Count (tic) normalization: total Ion Count (tic) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360-378, doi:https://doi.org/10.1214/aoms/1177732979). hotellins_confidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS55_29 Intra_Preprocessed <- Intra_Preprocessed%>%   filter(Outliers==\"no\")#remove MS55_29 Intra_Preprocessed <- MetaProViz::replicate_sum(data=Intra_Preprocessed[,-c(1:4)],                                                metadata_sample=Intra_Preprocessed[,c(1:4)],                                                metadata_info = c(Conditions=\"Conditions\", Biological_Replicates=\"Biological_Replicates\", Analytical_Replicates=\"Analytical_Replicates\"))"},{"path":"/articles/standard-metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Standard Metabolomics","text":"Differential Metabolite Analysis (dma) used compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior dma. Moreover, require Input_metadata_sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_metadata_feature containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_metadata_info parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) Noteworthy, performed missing value imputation hence data includes NAs 0 values features, deal dma() function: 1. use parameter STAT_pval=\"lmFit\", limma performed. Limma baesian fit data substracts Mean(Condition1 fit) - Mean(Condition2 fit). , unless values feature NA, Limma can deal NAs. 2. Standard Log2FC: log2(Mean(Condition1)) - log2(Mean(Condition2)) . values replicates one condition NA/0 feature (=metabolite): Log2FC= Inf/-Inf statistics NA b. values replicates one condition NA/0 feature (=metabolite): Log2FC= positive negative value, statistics NA important mention case STAT_pval=\"lmFit\", perform log2 transformation data prior running limma enable calculation log2FC, hence provide log2 transformed data. , example data four different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A 786-O), hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview dma results comparison 786-M1A versus HK2 cells. Using dma results, can now use MetaProViz visualization module generate customized Volcano plots viz_volcano(). can see examples .","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <- MetaProViz::dma(data=Intra_Preprocessed[,-c(1:3)], #we need to remove columns that do not include metabolite measurements                               metadata_sample=Intra_Preprocessed[,c(1:3)],#only maintain the information about condition and replicates                               metadata_info = c(Conditions=\"Conditions\", Numerator=NULL , Denominator = \"HK2\"),# we compare all_vs_HK2                               metadata_feature = MappingInfo,# Adds metadata for the metabolites such as KEGG_ID, Pathway, retention time,...                               pval =\"aov\",                               padj=\"fdr\")  # Inspect the dma results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"dma\"]][[\"786-M1A_vs_HK2\"]] shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition 786-M1A 94.41 % of the metabolites follow a normal distribution and 5.59 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 97.79 % of the metabolites follow a normal distribution and 2.21 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.03 % of the metabolites follow a normal distribution and 4.97 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition HK2 96.13 % of the metabolites follow a normal distribution and 3.87 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 83.24% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov."},{"path":"/articles/standard-metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > DMA","what":"ORA using the dma results","title":"Standard Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites (see MCA ). interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA dma results, ensure metabolite names match KEGG IDs KEGG trivial names. general, input_pathway requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells.","code":"# Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"dma\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.   dma <- DMA_Annova[[\"dma\"]][[comparison]]   dma <- dma[complete.cases(dma),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway   dplyr::rename(\"Metabolite\"=\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways    #Perform ORA   DM_ORA_res[[comparison]] <- MetaProViz::standard_ora(data= dma%>%remove_rownames()%>%tibble::column_to_rownames(\"Metabolite\"), #Input data requirements: column `t.val` and column `Metabolite`                                                        metadata_info=c(pvalColumn=\"p.adj\", percentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                        input_pathway=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                                        pathway_name=\"KEGG\",                                                        min_gssize=3,                                                        max_gssize=1000,                                                        cutoff_stat=0.01,                                                        cutoff_percentage=10)   }  # Lets check how the results look like: DM_ORA_786M1A_vs_HK2 <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"ClusterGosummary\"]]"},{"path":"/articles/standard-metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"Standard Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups either based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/standard-metabolomics.html","id":"mca-2cond","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MCA-2Cond","title":"Standard Metabolomics","text":"metabolite clustering method based Regulatory Clustering method (RCM) developed part Signature Regulatory Clustering (SiRCle) model (Mora et al. (2024)). part SiRCleR package, also variation initial RCM method proposed clustering based two comparisons (e.g. KO versus WT hypoxia normoxia). set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons, can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods method_background following 1.1. - 1.4. restrictive least restrictive:1.1. C1&C2: stringend background setting lead small number metabolites.1.2. C1: Focus metabolite abundance Condition 1 (C1).1.3. C2: Focus metabolite abundance Condition 2 (C2).1.4. C1|C2: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “core_UP”. two 6-state6 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). Metabolite Clustering Analysis: 2 Conditions. Now let’s use data clustering: summary MCA: 2 Conditions.","code":"# Example of all possible flows: MCA2Cond_Rules <- mca_twocond_rules MCAres <-  MetaProViz::mca_2cond(data_c1=DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]],                                  data_c2=DMA_Annova[[\"dma\"]][[\"786-M1A_vs_HK2\"]],                                  metadata_info_c1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1),                                  metadata_info_c2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1),                                  feature = \"Metabolite\",                                  save_table = \"csv\",                                  method_background=\"C1&C2\",                                  path=NULL)    # Check how our data looks like: Clustersummary <- MCAres[[\"MCA_2Cond_summary\"]]"},{"path":"/articles/standard-metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"Standard Metabolomics","text":"Pathway Input MetaProViz::MC_ORA.","code":""},{"path":"/articles/standard-metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"Standard Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_metadata_info user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_metadata_sample Plot_metadata_feature. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Intra_Preprocessed[,c(1:2)]%>%    mutate(Celltype = case_when(Conditions==\"HK2\" ~ 'Healthy',                                Conditions==\"786-O\" ~ 'Primary Tumour',                                TRUE ~ 'Metastatic Tumour'))%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-merge(MappingInfo%>%tibble::rownames_to_column(\"Metabolite\"), MCAres[[\"MCA_2Cond_Results\"]][,c(1, 14,15)], by=\"Metabolite\", all.y=TRUE)%>%   tibble::column_to_rownames(\"Metabolite\")"},{"path":"/articles/standard-metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"Standard Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::viz_pca(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . becomes apparent cell status responsible 64% variance (x-axis). Figure: samples cluster Cell status? can separate cancerous cell lines metastatic primary. shows us separated y-axis accounts 30%variance. Figure: samples cluster Cell type? Lastly, worth mentioning one can also change many style parameters customize plot.","code":"Input_PCA <- Intra_Preprocessed[,-c(1:5)]#remove columns that include Metadata such as cell type,... MetaProViz::viz_pca(data=Input_PCA,                    ) MetaProViz::viz_pca(metadata_info= c(color=\"Biological_Replicates\"),                    metadata_sample = MetaData_Sample ,                    data=Input_PCA,                   plot_name = \"Batch Effect\") MetaProViz::viz_pca(metadata_info= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    metadata_sample= MetaData_Sample,                    data=Input_PCA,                   plot_name = \"Sample Conditions\") MetaProViz::viz_pca(metadata_info= c(color=\"Status\"),                    metadata_sample= MetaData_Sample,                    data=Input_PCA,                   plot_name = \"Sample Status\") MetaProViz::viz_pca(metadata_info= c(color=\"Celltype\", shape=\"Status\"),                    metadata_sample= MetaData_Sample,                    data=Input_PCA,                   plot_name = \"Cell type\")"},{"path":"/articles/standard-metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"Standard Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::viz_heatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_featurenames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_metadata_info. time can still maintain metadata information , samples metabolites. together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.","code":"Input_Heatmap <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz::viz_heatmap(data = Input_Heatmap,                       plot_name = \"Overview\") MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Celltype\", \"Status\")),                       plot_name = \"Colour Samples\") # row annotation: Color for Metabolites MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(color_Metab = list(\"Pathway\")),                        metadata_feature =  MappingInfo,                       plot_name = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::viz_heatmap(data = Input_Heatmap,                        metadata_sample = MetaData_Sample,                        metadata_info = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"RG2_Significant\")),                        metadata_feature =  MetaData_Metab,                       plot_name = \"Pathway\")"},{"path":"/articles/standard-metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"Standard Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::viz_superplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).   Now, instance prefer boxplots bargraphs can simply change parameter plot_type:  can also change violin plots:","code":"Input_Superplot <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz::viz_superplot(data =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Bar\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz::viz_superplot(data =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Box\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz::viz_superplot(data =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            metadata_sample =MetaData_Sample,                                            metadata_info = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            plot_type = \"Violin\", #Bar, Box, Violin                                            plot_conditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            stat_comparison = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/standard-metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"Standard Metabolomics","text":"Input_data MetaProViz::viz_volcano() example differential analysis results MetaProViz::dma(). Input_data MetaProViz::viz_volcano() example pathway enrichment results MetaProViz::DM_ORA().","code":""},{"path":"/articles/standard-metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"Standard Metabolomics","text":"first look results differential analysis (see section dma ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying dma results. seek plot metabolite names can change paramter select_label default (select_label=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying dma results. parameter select_label can also pass vector Metabolite names labeled: Figure: Standard figure displaying dma results. Next may interested understand metabolite clusters based MCA metabolites plot correspond . order can provide Plot_SettingsFile additional information use information color code /shape dots volcano plot. order choose right column need provide vector Plot_metadata_info information. Figure: Standard figure displaying dma results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying dma results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying dma results colour coded/shaped metabolic clusters MCA results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_metadata_info information (color) used Input_data. Figure: Standard figure displaying dma results colour coded metabolic pathways shaped metabolic clusters MCA results. immediately see many pathways displayed plot, can make difficult interpret. Hence, change plot settings order get individual plots pathways:","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\")) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        select_label = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::viz_volcano(data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                        select_label = c(\"N-acetylaspartylglutamate\", \"cystathionine\", \"orotidine\")) # Now we need to add our Plot_SettingsFile and the Plot_metadata_info: MetaProViz::viz_volcano(plot_types=\"Standard\",                         metadata_info= c(color=\"RG2_Significant\"),                         metadata_feature= MetaData_Metab,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A versus HK2\",                         subtitle= \"Results of dma. Colour coded for metabolic clusters\" ) # If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_metadata_info MetaProViz::viz_volcano(plot_types=\"Standard\",                         metadata_info= c(shape=\"RG2_Significant\"),                         metadata_feature= MetaData_Metab,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A versus HK2\",                         subtitle= \"Results of dma. Shape for metabolic clusters, color for significance.\" ) # Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::viz_volcano(plot_types=\"Standard\",                         metadata_info= c(shape=\"RG2_Significant\", color=\"RG2_Significant\"),                         metadata_feature= MetaData_Metab,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A versus HK2\",                         subtitle= \"Results of dma. Shape and color for metabolic clusters.\" ) # Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::viz_volcano(plot_types=\"Standard\",                         metadata_info= c(color=\"Pathway\"),                         metadata_feature= MappingInfo,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A versus HK2 Results of dma. Colour for metabolic pathways.\",                         subtitle= \"Results of dma. Colour for metabolic pathways.\" ) # Now we can generate a plot for each pathway and color for the metabolite clusters: MetaProViz::viz_volcano(plot_types=\"Standard\",                         metadata_info= c(color=\"RG2_Significant\", individual=\"Pathway\"),                         metadata_feature= MetaData_Metab,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A versus HK2\",                         subtitle= \"Results of dma. Colour for metabolic pathways.\" )"},{"path":"/articles/standard-metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"Standard Metabolomics","text":"Figure: Comparison. Now individual plots :","code":"MetaProViz::viz_volcano(plot_types=\"Compare\",                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         data2= DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                         name_comparison= c(data=\"786M1A_vs_HK\", data2= \"786-O_vs_HK2\"),                         plot_name= \"786M1A vs HK2 compared to 7860 vs HK2\",                         subtitle= \"Results of dma\" ) MetaProViz::viz_volcano(plot_types=\"Compare\",                         metadata_info= c(individual=\"Pathway\"),                         metadata_feature= MappingInfo,                         data=DMA_786M1A_vs_HK2%>%tibble::column_to_rownames(\"Metabolite\"),                         data2= DMA_Annova[[\"dma\"]][[\"786-O_vs_HK2\"]]%>%tibble::column_to_rownames(\"Metabolite\"),                         plot_name= \"786M1A vs HK2 compared to 7860 vs HK2\",                         subtitle= \"Results of dma\" )"},{"path":"/articles/standard-metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"Standard Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. need prepare correct input data including pathways used run pathway analysis, differential metabolite data used input pathway analysis results pathway analysis: Now can produce plots:","code":"# Prepare the Input: # 1. data=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file metadata_feature. InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   tibble::column_to_rownames(\"KEGGCompound\")  # 2. data2=Pathway analysis output: Must have same column names as metadata_feature for Pathway name InputPEA2 <- DM_ORA_786M1A_vs_HK2 %>%   dplyr::rename(\"term\"=\"ID\")  # 3. metadata_feature= Pathways used for pathway analysis: Must have same column names as metadata_feature for Pathway name and feature names need to match features in the data. PEA_Feature passes this column name! MetaProViz::viz_volcano(plot_types=\"PEA\",                        metadata_info= c(PEA_Pathway=\"term\",# Needs to be the same in both, metadata_feature and data2.                                        PEA_stat=\"p.adjust\",#Column data2                                        PEA_score=\"GeneRatio\",#Column data2                                        PEA_Feature=\"Metabolite\"),# Column metadata_feature (needs to be the same as row names in data)                        metadata_feature= KEGG_Pathways,#Must be the pathways used for pathway analysis                        data= InputPEA, #Must be the data you have used as an input for the pathway analysis                        data2= InputPEA2, #Must be the results of the pathway analysis                        plot_name= \"KEGG\",                        subtitle= \"PEA\" ,                        select_label = NULL)"},{"path":"/articles/standard-metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Standard Metabolomics","text":"","code":"#> R version 4.4.3 (2025-02-28) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 24.04.2 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/blas/libblas.so.3.12.0  #> LAPACK: /usr/lib/x86_64-linux-gnu/lapack/liblapack.so.3.12.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] tibble_3.3.0     ggfortify_0.4.18 ggplot2_3.5.2    rlang_1.1.6      dplyr_1.1.4      magrittr_2.0.3   #> [7] MetaProViz_3.0.3 #>  #> loaded via a namespace (and not attached): #>   [1] DBI_1.2.3              gridExtra_2.3          httr2_1.2.0            tcltk_4.4.3            logger_0.4.0           #>   [6] readxl_1.4.5           compiler_4.4.3         RSQLite_2.4.1          systemfonts_1.2.3      vctrs_0.6.5            #>  [11] reshape2_1.4.4         rvest_1.0.4            stringr_1.5.1          pkgconfig_2.0.3        crayon_1.5.3           #>  [16] fastmap_1.2.0          backports_1.5.0        labeling_0.4.3         rmarkdown_2.29         sessioninfo_1.2.3      #>  [21] tzdb_0.5.0             ggbeeswarm_0.7.2       ragg_1.4.0             purrr_1.1.0            bit_4.6.0              #>  [26] xfun_0.52              cachem_1.1.0           jsonlite_2.0.0         progress_1.2.3         blob_1.2.4             #>  [31] later_1.4.2            broom_1.0.8            parallel_4.4.3         prettyunits_1.2.0      R6_2.6.1               #>  [36] bslib_0.9.0            stringi_1.8.7          RColorBrewer_1.1-3     ComplexUpset_1.3.3     limma_3.65.1           #>  [41] car_3.1-3              lubridate_1.9.4        jquerylib_0.1.4        cellranger_1.1.0       Rcpp_1.1.0             #>  [46] knitr_1.50             R.utils_2.13.0         readr_2.1.5            splines_4.4.3          igraph_2.1.4           #>  [51] timechange_0.3.0       tidyselect_1.2.1       rstudioapi_0.17.1      qvalue_2.38.0          abind_1.4-8            #>  [56] yaml_2.3.10            curl_6.4.0             plyr_1.8.9             withr_3.0.2            inflection_1.3.6       #>  [61] evaluate_1.0.4         desc_1.4.3             zip_2.3.3              xml2_1.3.8             pillar_1.11.0          #>  [66] ggpubr_0.6.1           carData_3.0-5          checkmate_2.3.2        generics_0.1.4         vroom_1.6.5            #>  [71] hms_1.1.3              scales_1.4.0           gtools_3.9.5           OmnipathR_3.17.4       glue_1.8.0             #>  [76] pheatmap_1.0.13        scatterplot3d_0.3-44   tools_4.4.3            ggsignif_0.6.4         fs_1.6.6               #>  [81] XML_3.99-0.18          grid_4.4.3             tidyr_1.3.1            qcc_2.7                colorspace_2.1-1       #>  [86] patchwork_1.3.1        beeswarm_0.4.0         vipor_0.4.7            Formula_1.2-5          cli_3.6.5              #>  [91] rappdirs_0.3.3         kableExtra_1.4.0       textshaping_1.0.1      Polychrome_1.5.4       viridisLite_0.4.2      #>  [96] svglite_2.2.1          gtable_0.3.6           R.methodsS3_1.8.2      rstatix_0.7.2          hash_2.2.6.3           #> [101] EnhancedVolcano_1.24.0 sass_0.4.10            digest_0.6.37          ggrepel_0.9.6          htmlwidgets_1.6.4      #> [106] farver_2.1.2           memoise_2.0.1          htmltools_0.5.8.1      pkgdown_2.1.3          R.oo_1.27.1            #> [111] factoextra_1.0.7       lifecycle_1.0.4        httr_1.4.7             statmod_1.5.0          bit64_4.6.0-1          #> [116] MASS_7.3-64"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christina Schmidt. Author, maintainer. Denes Turei. Author. Dimitrios Prymidis. Author. Macabe Daley. Author. Julio Saez-Rodriguez. Author. Christian Frezza. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schmidt C, Turei D, Prymidis D, Daley M, Saez-Rodriguez J, Frezza C (2025). MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation. R package version 3.0.3, https://saezlab.github.io/MetaProViz.","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},   author = {Christina Schmidt and Denes Turei and Dimitrios Prymidis and Macabe Daley and Julio Saez-Rodriguez and Christian Frezza},   year = {2025},   note = {R package version 3.0.3},   url = {https://saezlab.github.io/MetaProViz}, }"},{"path":[]},{"path":"/index.html","id":"short-introduction","dir":"","previous_headings":"","what":"Short Introduction","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz (Metabolomics Processing, functional analysis Visualization), free open-source R-package provides mechanistic hypotheses metabolomics data integrating prior knowledge literature metabolomics. MetaProViz offers interactive framework consisting five modules: Processing, differential analysis, prior knwoledge access refactoring, functional analysis visualization intracellular exometabolomics (=consumption-release (CoRe) data). modules functions can used independently combination (Fig.1). Fig. 1: Overview MetaProViz functions. first module, MetaProViz, Processing, allows customized processing raw peak metabolomics data different experimental setups, including options perform feature filtering due missingness, Total Ion Count (TIC) normalisation, Missing Value Imputation (MVI) based half-minimum outlier detection based Hotellin’s T2. pre-processing parameters can customized combined needed. second module MetaProViz, Differential Metabolite Analysis (DMA), allows user perform differential analysis two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value, whereby user can choose test statistics. input can either output Preprocessing module DF including metabolite values information conditions compared. third module MetaProViz, Functional Analysis, includes different methods create clusters metabolites based distribution across data using logical regulatory rules, prior knowledge enrichment analysis functions perform representation analysis (ORA). , user can either input output Processing Differential Metabolite Analysis (DMA) module, DF including Log2FC statistics metabolite values. fourth module MetaProViz, Visualization, can easily create customized visualizations output results MetaProViz modules custom files. enable overview plots PCA, heatmap, Volcano plot, also individual graphs metabolite bar graphs, box plots violin plots. Moreover, user can provide additional information pathways metabolites correspond , clusters metabolites assigned meta-information customize plots color, shape selections, thus enabling biological interpretation results otherwise missed data.","code":""},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"generated several tutorials showcasing different functionalities MetaProViz offers using publicly available datasets, included example data within MetaProViz. can find tutorial top “Tutorials” button, can follow specific user case examples different analysis. Otherwise, can also follow links : - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media - Prior Knowledge Access & Integration - Sample Metadata Analysis find brief overview information installation package dependencies.","code":""},{"path":"/index.html","id":"example-data","dir":"","previous_headings":"","what":"Example Data","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"clear cell Renal Cell Carcinoma (ccRCC) patients data Hakimi et. al including 138 matched tumour normal tissue pairs (Hakimi et al. 2016). Cell-lines data intra- extracellular metabolomics data cell culture media metabolomics workbench project PR001418.  Additionally also added transcriptomics proteomics data ccRCC patients processed SiRCle (Mora et al. 2024), originally PDC000127 (Clark et al. 2019).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz R package install package, start R enter: Now MetaProViz can imported :","code":"devtools::install_github(\"https://github.com/saezlab/MetaProViz\") library(MetaProViz)"},{"path":"/index.html","id":"windows-specifications","dir":"","previous_headings":"Installation","what":"Windows specifications","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"Note running Windows might issue long paths, can resolve registry Windows 10: Computer Configuration > Administrative Templates > System > Filesystem > Enable Win32 long paths (different version Windows, just google “Long paths fix” Windows version)","code":""},{"path":"/index.html","id":"liscence","dir":"","previous_headings":"","what":"Liscence","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},    author = {Christina Schmidt, Denes Turei, Dimitrios Prymidis, Macabe Daley, Julio Saez-Rodriguez and Christian Frezza},   year = {2024},   note = {R package version 3.0.3},  }"},{"path":[]},{"path":"/reference/MetaProViz.html","id":null,"dir":"Reference","previous_headings":"","what":"The MetaProViz package — MetaProViz","title":"The MetaProViz package — MetaProViz","text":"MetaProViz (Metabolomics Processing, functional analysis Visualization), free open-source R-package provides mechanistic hypotheses metabolomics data integrating prior knowledge literature metabolomics. MetaProViz offers interactive framework consisting five modules: Processing, differential analysis, prior knwoledge access refactoring, functional analysis visualization intracellular exometabolomics (=consumption-release (core) data).","code":""},{"path":[]},{"path":"/reference/MetaProViz.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The MetaProViz package — MetaProViz","text":"Christina Schmidt <\\email{christina.schmidt@uni-heidelberg.de}> Denes Turei <\\email{turei.denes@gmail.com}> Dimitrios Prymidis Macabe Daley Julio Saez-Rodriguez Christian Frezza","code":""},{"path":"/reference/alanine_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"alanine_pathways — alanine_pathways","title":"alanine_pathways — alanine_pathways","text":"Manually curated table amino acid alanine toshowcase pathways (wiki, reactome, etc.) alanine IDs (chebi, hmdb, etc.) included pathways","code":""},{"path":"/reference/alanine_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"alanine_pathways — alanine_pathways","text":"","code":"alanine_pathways"},{"path":"/reference/alanine_pathways.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"alanine_pathways — alanine_pathways","text":"Columns include pathway_name, pathwayId pathwaySource well inputID  commonName.","code":""},{"path":"/reference/alanine_pathways.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"alanine_pathways — alanine_pathways","text":"Schmidt et al, MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation version 2.1.7, GitHub 2025.","code":""},{"path":"/reference/biocrates_features.html","id":null,"dir":"Reference","previous_headings":"","what":"biocrates_features — biocrates_features","title":"biocrates_features — biocrates_features","text":"Biocrates kit feature information \"MxP Quant 500 XL kit\" covers 1,000 metabolites biochemical class information exported different metabolite IDs (HMDB, KEGG, etc.).","code":""},{"path":"/reference/biocrates_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"biocrates_features — biocrates_features","text":"","code":"biocrates_features"},{"path":"/reference/biocrates_features.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"biocrates_features — biocrates_features","text":"Columns include metabolite trivial name, metabolite class, metabolite IDs (HMDB, KEGG, etc.), metabolite structural information (INCHI, Key, etc.).","code":""},{"path":"/reference/biocrates_features.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"biocrates_features — biocrates_features","text":"Biocrates MxP® Quant 500 XL kit, https://biocrates.com/mxp-quant-500-xl/","code":""},{"path":"/reference/cellular_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"cellular_meta — cellular_meta","title":"cellular_meta — cellular_meta","text":"Metabolomics workbench project PR001418, study ST002226 ST002224 measured metabolites assigned HMDB KEGG IDs well one main metabolic pathway.","code":""},{"path":"/reference/cellular_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"cellular_meta — cellular_meta","text":"","code":"cellular_meta"},{"path":"/reference/cellular_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"cellular_meta — cellular_meta","text":"Columns include Metabolite IDs (HMDB, KEGG), Main metabolic pathway row names metabolite trivial names.","code":""},{"path":"/reference/cellular_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"cellular_meta — cellular_meta","text":"Sciacovelli & Dugourd et. al., Dynamic partitioning branched-chain amino acids-derived nitrogen supports renal cancer progression , Nature Communications 2022, doi:10.1038/s41467-022-35036-4","code":""},{"path":"/reference/checkmatch_pk_to_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Check and summarize prior_knowledge-to-MeasuredFeatures relationship — checkmatch_pk_to_data","title":"Check and summarize prior_knowledge-to-MeasuredFeatures relationship — checkmatch_pk_to_data","text":"Check summarize prior_knowledge--MeasuredFeatures relationship","code":""},{"path":"/reference/checkmatch_pk_to_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check and summarize prior_knowledge-to-MeasuredFeatures relationship — checkmatch_pk_to_data","text":"","code":"checkmatch_pk_to_data(   data,   input_pk,   metadata_info = c(InputID = \"HMDB\", PriorID = \"HMDB\", grouping_variable = \"term\"),   save_table = \"csv\",   path = NULL )"},{"path":"/reference/checkmatch_pk_to_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check and summarize prior_knowledge-to-MeasuredFeatures relationship — checkmatch_pk_to_data","text":"data dataframe least one column detected metabolite IDs (e.g. HMDB). multiple IDs per detected peak, please separate comma (\",\" \", \" chr list). main ID additional IDs, please provide separate columns. input_pk dataframe least one column metabolite ID (e.g. HMDB) need match data metabolite IDs \"source\" (e.g. term). multiple IDs, original pathway IDs (e.g. KEGG) translated (e.g. HMDB), please separate comma (\",\" \", \" chr list). metadata_info Colum name Metabolite IDs data input_pk well column name grouping_variable input_pk. Default = c(InputID=\"HMDB\", PriorID=\"HMDB\", grouping_variable=\"term\") save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/checkmatch_pk_to_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check and summarize prior_knowledge-to-MeasuredFeatures relationship — checkmatch_pk_to_data","text":"","code":"DetectedIDs <-  cellular_meta %>%dplyr::select(\"Metabolite\", \"HMDB\")%>%tidyr::drop_na() input_pathway <- MetaProViz::translate_id(data= MetaProViz::metsigdb_kegg(), metadata_info = c(InputID=\"MetaboliteID\", grouping_variable=\"term\"), from = c(\"kegg\"), to = c(\"hmdb\"))[[\"TranslatedDF\"]]%>%tidyr::drop_na() Res <- MetaProViz::checkmatch_pk_to_data(data= DetectedIDs, input_pk= input_pathway, metadata_info = c(InputID=\"HMDB\", PriorID=\"hmdb\", grouping_variable=\"term\")) #> Warning: 4 duplicated IDs were removed from column HMDB #> Warning: 8802 duplicated IDs were removed from PK column hmdb #> Error in mutate(., Count_FeatureIDs_to_GroupingVariable = case_when(is.na(!!sym(metadata_info[[\"grouping_variable\"]])) ~     NA_integer_, TRUE ~ n_distinct(!!sym(metadata_info[[\"PriorID\"]]),     na.rm = TRUE))): ℹ In argument: `Count_FeatureIDs_to_GroupingVariable = case_when(...)`. #> ℹ In group 1: `HMDB = \"HMDB0000001\"` `term = \"Histidine metabolism, Metabolic #>   pathways\"`. #> Caused by error in `case_when()`: #> ! Failed to evaluate the right-hand side of formula 2. #> Caused by error in `n_distinct()`: #> ! could not find function \"n_distinct\""},{"path":"/reference/cluster_ora.html","id":"-","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— cluster_ora  — cluster_ora","text":"cluster_ora","code":""},{"path":"/reference/cluster_ora.html","id":null,"dir":"Reference","previous_headings":"","what":" ————————— cluster_ora  — cluster_ora","title":" ————————— cluster_ora  — cluster_ora","text":"Uses enricher run ORA metabolite cluster MCA functions using pathway list","code":""},{"path":"/reference/cluster_ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" ————————— cluster_ora  — cluster_ora","text":"","code":"cluster_ora(   data,   metadata_info = c(ClusterColumn = \"RG2_Significant\", BackgroundColumn = \"BG_method\",     PathwayTerm = \"term\", PathwayFeature = \"Metabolite\"),   remove_background = TRUE,   input_pathway,   pathway_name = \"\",   min_gssize = 10,   max_gssize = 1000,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/cluster_ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" ————————— cluster_ora  — cluster_ora","text":"data DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) input_pathway. metadata_info Optional:  Pass ColumnName column including cluster names ORA performed (=ClusterColumn). BackgroundColumn passes column name needed remove_background=TRUE. Also pass ColumnName input_pathway including term feature names. (ClusterColumn= ColumnName data, BackgroundColumn = ColumnName data, PathwayTerm= ColumnName input_pathway, PathwayFeature= ColumnName input_pathway) c(FeatureName=\"Metabolite\", ClusterColumn=\"RG2_Significant\", BackgroundColumn=\"BG_method\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") remove_background Optional:  TRUE, column BackgroundColumn  name needs metadata_info, includes TRUE/FALSE metabolite fall background based chosen Background method e.g. mca_2cond removed universe. default: TRUE input_pathway DF must include column \"term\" pathway name, column \"Feature\" Metabolite name ID column \"Description\" pathway description. pathway_name Optional:  Name pathway list used default: \"\" min_gssize Optional:  minimum group size ORA default: 10 max_gssize Optional:  maximum group size ORA default: 1000 save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/cluster_ora.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" ————————— cluster_ora  — cluster_ora","text":"Saves results individual .csv files.","code":""},{"path":"/reference/compare_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"function compares gene /metabolite features across multiple prior knowledge (PK) resources , single resource provided vector column names metadata_info, compares columns within resource.","code":""},{"path":"/reference/compare_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"","code":"compare_pk(   data,   metadata_info = NULL,   filter_by = c(\"both\", \"gene\", \"metabolite\"),   plot_name = \"Overlap of Prior Knowledge Resources\",   name_col = \"TrivialName\",   palette_type = \"polychrome\",   save_plot = \"svg\",   save_table = \"csv\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/compare_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"data named list element corresponds prior knowledge (PK) resource. element can : data frame containing gene/metabolite identifiers (additional columns within-resource comparison), character string indicating resource name. Recognized names include (limited ): \"Hallmarks\", \"Gaude\", \"MetalinksDB\", \"RAMP\" (\"metsigdb_chemicalclass\"). latter case, function attempt load corresponding data automatically. metadata_info named list (names matching data) element either character string character vector indicating column name(s) extract features. multiple-resource comparisons, refer columns containing feature identifiers. within-resource comparisons, vector list columns compare (e.g., c(\"CHEBI\", \"HMDB\", \"LIMID\")). within-resource mode, input data frame expected contain column named \"Class\" (grouping column specified via class_col attribute). grouping column found, default grouping column named \"Group\" (rows assigned value) created. filter_by Character. Optional filter resulting features comparing multiple resources. Options : \"\" (default), \"gene\", \"metabolite\". parameter ignored within-resource mode. plot_name Optional:  String added output files Upsetplot Default = \"\" palette_type Character. Color palette used plot. Default \"polychrome\". save_plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" print_plot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE path Optional: Path folder results saved . Default = NULL output_file Character. Optional file path save generated plot; NULL, plot saved.","code":""},{"path":"/reference/compare_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"list containing two elements: summary_table: data frame representing either: binary summary matrix feature presence/absence across multiple resources, original data frame (augmented binary columns None column) within-resource mode. upset_plot: UpSet plot object generated function.","code":""},{"path":"/reference/compare_pk.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"multi-resource mode, element data represents PK resource (either data frame recognized resource name) set features extracted. binary summary table constructed used create UpSet plot. within-resource mode, single data frame provided (data containing one element) metadata_info entry vector column names compare (e.g., binary indicators different annotations). case, function expects data frame grouping column named \"Class\" (, alternatively, column specified via class_col attribute metadata_info) used grouping UpSet plot.","code":""},{"path":"/reference/compare_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot — compare_pk","text":"","code":"## Example 1: Multi-Resource Comparison  # Using automatic data loading for multiple resources. data <- list(hallmarks = hallmarks, gaude = gaude_pathways,                 metalinksdb = metsigdb_metalinks(), ramp = metsigdb_chemicalclass())  # Filtering to include only gene features: res_genes <- MetaProViz::compare_pk(data = data, filter_by = \"gene\") #> Error in MetaProViz::compare_pk(data = data, filter_by = \"gene\"): Column(s) feature not found in resource hallmarks  ## Example 2: Within-Resource Comparison (Comparing Columns Within a Single data Frame)  # biocrates_features is a data frame with columns: \"TrivialName\", \"CHEBI\", \"HMDB\", \"LIMID\", and \"Class\". # Here the \"Class\" column is used as the grouping variable in the UpSet plot. data_single <- list(Biocft = biocrates_features) metadata_info_single <- list(Biocft = c(\"CHEBI\", \"HMDB\", \"LIMID\"))  res_single <- MetaProViz::compare_pk(data = data_single, metadata_info = metadata_info_single,                           plot_name = \"Overlap of BioCrates Columns\")   ## Example 3: Custom data Frames with Custom Column Names  # Example with preloaded data frames and custom column names: hallmarks_df <- data.frame(feature = c(\"HMDB0001\", \"GENE1\", \"GENE2\"), stringsAsFactors = FALSE) gaude_df <- data.frame(feature = c(\"GENE2\", \"GENE3\"), stringsAsFactors = FALSE) metalinks_df <- data.frame(hmdb = c(\"HMDB0001\", \"HMDB0002\"),                            gene_symbol = c(\"GENE1\", \"GENE4\"), stringsAsFactors = FALSE) ramp_df <- data.frame(class_source_id = c(\"HMDB0001\", \"HMDB0003\"), stringsAsFactors = FALSE) data <- list(Hallmarks = hallmarks_df, Gaude = gaude_df,                 MetalinksDB = metalinks_df, RAMP = ramp_df) metadata_info <- list(Hallmarks = \"feature\", Gaude = \"feature\",                      MetalinksDB = c(\"hmdb\", \"gene_symbol\"), RAMP = \"class_source_id\") res <- MetaProViz::compare_pk(data = data, metadata_info = metadata_info, filter_by = \"metabolite\")"},{"path":"/reference/count_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Count Entries and Generate a Histogram Plot for a Specified Column — count_id","title":"Count Entries and Generate a Histogram Plot for a Specified Column — count_id","text":"function processes data frame column counting number entries within cell. considers NA values empty strings zero entries, categorizes cell \"ID\", \"Single ID\", \"Multiple IDs\" based count. histogram generated visualize distribution entry counts.","code":""},{"path":"/reference/count_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count Entries and Generate a Histogram Plot for a Specified Column — count_id","text":"","code":"count_id(   data,   column,   delimiter = \",\",   fill_colors = c(`No ID` = \"#FB8072\", `Single ID` = \"#B3DE69\", `Multiple IDs` =     \"#80B1D3\"),   binwidth = 1,   title_prefix = NULL,   save_plot = \"svg\",   save_table = \"csv\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/count_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count Entries and Generate a Histogram Plot for a Specified Column — count_id","text":"data data frame containing data analyzed. column string specifying name column data analyze. delimiter string specifying delimiter used split cell values. Defaults \",\". fill_colors named character vector providing colors category. Defaults c(\"ID\" = \"#FB8072\", \"Single ID\" = \"#B3DE69\", \"Multiple IDs\" = \"#80B1D3\"). binwidth Numeric value specifying bin width histogram. Defaults 1. title_prefix string use title plot. NULL (default), title generated \"Number  IDs per Biocrates Cell\". save_plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" print_plot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/count_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count Entries and Generate a Histogram Plot for a Specified Column — count_id","text":"list two elements: result data frame includes three additional columns: was_na (logical indicator missing empty cells), entry_count (number entries cell), id_label (categorical label based entry count). plot ggplot object representing histogram entry counts.","code":""},{"path":"/reference/dma.html","id":null,"dir":"Reference","previous_headings":"","what":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","text":"function allows perform differential metabolite analysis obtain Log2FC, pval, padj tval comparing two multiple conditions.","code":""},{"path":"/reference/dma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","text":"","code":"dma(   data,   metadata_sample,   metadata_info = c(Conditions = \"Conditions\", Numerator = NULL, Denominator = NULL),   pval = \"lmFit\",   padj = \"fdr\",   metadata_feature = NULL,   core = FALSE,   vst = FALSE,   shapiro = TRUE,   bartlett = TRUE,   transform = TRUE,   save_plot = \"svg\",   save_table = \"csv\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/dma.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","text":"data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. metadata_sample DF contains metadata information samples, combined input data based unique sample identifiers used rownames. metadata_info Optional:  Named vector including information conditions column information numerator denominator c(Conditions=\"ColumnName_SettingsFile\", Numerator = \"ColumnName_SettingsFile\", Denominator  = \"ColumnName_SettingsFile\"). Denominator Numerator specify comparison(s) done (one-vs-one, -vs-one, -vs-), e.g. Denominator=NULL Numerator =NULL selects condition performs multiple comparison -vs-. Log2FC obtained dividing numerator denominator, thus positive Log2FC values mean higher expression numerator. Default = c(conditions=\"Conditions\", numerator = NULL, denumerator = NULL) pval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test, wilcox.test, \"chisq.test\", \"cor.test\" lmFit (=limma), one-vs--vs-comparison choose aov (=anova), welch(=welch anova), kruskal.test lmFit (=limma) Default = \"lmFit\" padj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = \"fdr\" metadata_feature Optional:  DF contains metadata information , .e. pathway information, retention time,..., metabolite. row names must match metabolite names columns data. Default = NULL core Optional:  TRUE FALSE whether Consumption/Release  input used. Default = FALSE vst TRUE FALSE whether use variance stabilizing transformation data linear modeling used hypothesis testing. Default = FALSE shapiro TRUE FALSE whether perform shapiro.test get informed data distribution (normal versus -normal distribution. Default = TRUE bartlett TRUE FALSE whether perform bartlett.test. Default = TRUE transform TRUE FALSE. TRUE expect data log2 transformed log2 transformation performed within limma function Log2FC calculation. FALSE expect data log2 transformed impacts Log2FC calculation limma. Default= TRUE save_plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" print_plot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/dma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","text":"Dependent parameter settings, list lists returned dma (DF comparison), shapiro (Includes DF Plot), bartlett (Includes DF Histogram), vst (Includes DF Plot) VolcanoPlot (Plots comparison).","code":""},{"path":"/reference/dma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — dma","text":"","code":"Intra <- intracell_raw[-c(49:58) ,]%>%tibble::column_to_rownames(\"Code\") ResI <- MetaProViz::dma(data=Intra[ ,-c(1:3)],                        metadata_sample=Intra[ , c(1:3)],                        metadata_info = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\")) #> In `Numerator` 786-O, 786-M1A, 786-M2A, NA/0 values exist in 5 Metabolite(s). and in `denominator`HK2 2 Metabolite(s).. Those metabolite(s) might return p.val= NA, p.adj.= NA, t.val= NA. The Log2FC = Inf, if all replicates are 0/NA. #> There are NA's/0s in the data. This can impact the output of the SHapiro-Wilk test for all metabolites that include NAs/0s. #> Error occurred during shapiro that performs the shapiro-Wilk test. Message: all 'x' values are identical #> For 32.97% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using lmFit. #> Warning: Partial NA coefficients for 1 probe(s)"},{"path":"/reference/equivalent_features.html","id":null,"dir":"Reference","previous_headings":"","what":"equivalent_features — equivalent_features","title":"equivalent_features — equivalent_features","text":"Manually curated list aminoacids aminoacid-related metabolites corresponding metabolite identifiers (HMDB, KEGG, etc.) irrespective chirality.","code":""},{"path":"/reference/equivalent_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"equivalent_features — equivalent_features","text":"","code":"equivalent_features"},{"path":"/reference/equivalent_features.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"equivalent_features — equivalent_features","text":"Columns include metabolite trivial names, metabolite IDs (HMDB, KEGG, etc.), metabolite structural information (=INCHI).","code":""},{"path":"/reference/equivalent_features.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"equivalent_features — equivalent_features","text":"Schmidt et al, MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation version 2.1.7, GitHub 2025.","code":""},{"path":"/reference/equivalent_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Find additional potential IDs for ","title":"Find additional potential IDs for ","text":"Find additional potential IDs  \"kegg\", \"pubchem\", \"chebi\", \"hmdb\"","code":""},{"path":"/reference/equivalent_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find additional potential IDs for ","text":"","code":"equivalent_id(   data,   metadata_info = c(InputID = \"MetaboliteID\"),   from = \"hmdb\",   save_table = \"csv\",   path = NULL )"},{"path":"/reference/equivalent_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find additional potential IDs for ","text":"data dataframe least one column detected metabolite IDs (one ID per row). metadata_info Optional:  Column name metabolite IDs. Default = list(InputID=\"MetaboliteID\") ID type present data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = \"hmdb\" save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/equivalent_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find additional potential IDs for ","text":"Input DF additional column including potential additional IDs.","code":""},{"path":"/reference/equivalent_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find additional potential IDs for ","text":"","code":"DetectedIDs <- cellular_meta%>%tidyr::drop_na() Res <- MetaProViz::equivalent_id(data= DetectedIDs, metadata_info = c(InputID=\"HMDB\"), from = \"hmdb\") #> Warning: The following IDs are duplicated and removed: HMDB0000725, HMDB0000267, HMDB0000755 #> chebi is used to find additional potential IDs for hmdb."},{"path":"/reference/gaude_pathways.html","id":null,"dir":"Reference","previous_headings":"","what":"gaude_pathways — gaude_pathways","title":"gaude_pathways — gaude_pathways","text":"gaude_pathways","code":""},{"path":"/reference/gaude_pathways.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"gaude_pathways — gaude_pathways","text":"","code":"gaude_pathways"},{"path":"/reference/gaude_pathways.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"gaude_pathways — gaude_pathways","text":"?","code":""},{"path":"/reference/gaude_pathways.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"gaude_pathways — gaude_pathways","text":"?","code":""},{"path":"/reference/hallmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"hallmarks — hallmarks","title":"hallmarks — hallmarks","text":"hallmarks","code":""},{"path":"/reference/hallmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"hallmarks — hallmarks","text":"","code":"hallmarks"},{"path":"/reference/hallmarks.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"hallmarks — hallmarks","text":"Data frame columns: term, gene","code":""},{"path":"/reference/hallmarks.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"hallmarks — hallmarks","text":"?","code":""},{"path":"/reference/intracell_dma.html","id":null,"dir":"Reference","previous_headings":"","what":"intracell_dma — intracell_dma","title":"intracell_dma — intracell_dma","text":"Metabolomics workbench project PR001418, study ST002224 performed differential metabolite analysis comparing intracellular metabolomics 786-M1A versus HK2 cells.","code":""},{"path":"/reference/intracell_dma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"intracell_dma — intracell_dma","text":"","code":"intracell_dma"},{"path":"/reference/intracell_dma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"intracell_dma — intracell_dma","text":"Columns include Log2FC, stats, metabolite identifiers, metabolite pathways normalised metabolite values used input row names metabolitetrivial names.","code":""},{"path":"/reference/intracell_dma.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"intracell_dma — intracell_dma","text":"Sciacovelli & Dugourd et. al., Dynamic partitioning branched-chain amino acids-derived nitrogen supports renal cancer progression , Nature Communications 2022, doi:10.1038/s41467-022-35036-4","code":""},{"path":"/reference/intracell_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"intracell_raw — intracell_raw","title":"intracell_raw — intracell_raw","text":"Metabolomics workbench project PR001418, study ST002224 exported integrated raw peak values intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A.","code":""},{"path":"/reference/intracell_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"intracell_raw — intracell_raw","text":"","code":"intracell_raw"},{"path":"/reference/intracell_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"intracell_raw — intracell_raw","text":"data frame multiple rows columns: Conditions Character vector indicating cell line identity Analytical_Replicate Integer replicate number analytical replicates Biological_Replicate Integer replicate number biological replicates ... Numeric columns measured metabolite (raw peak values)","code":""},{"path":"/reference/intracell_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"intracell_raw — intracell_raw","text":"Sciacovelli & Dugourd et. al., Dynamic partitioning branched-chain amino acids-derived nitrogen supports renal cancer progression, Nature Communications 2022, DOI:10.1038/s41467-022-35036-4.","code":""},{"path":"/reference/make_gene_metab_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — make_gene_metab_set","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — make_gene_metab_set","text":"Function add metabolite HMDB IDs existing genesets based cosmosR prior knowledge","code":""},{"path":"/reference/make_gene_metab_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — make_gene_metab_set","text":"","code":"make_gene_metab_set(   input_pk,   metadata_info = c(Target = \"gene\"),   pk_name = NULL,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/make_gene_metab_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — make_gene_metab_set","text":"input_pk dataframe two columns source (=term) Target (=gene), e.g. Hallmarks. metadata_info Optional:   Column name Target input_pk. Default = c(Target=\"gene\") pk_name Optional:  Name prior knowledge resource. default: NULL save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/mapping_ambiguity.html","id":null,"dir":"Reference","previous_headings":"","what":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","title":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","text":"Create Mapping Ambiguities two ID types","code":""},{"path":"/reference/mapping_ambiguity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","text":"","code":"mapping_ambiguity(   data,   from,   to,   grouping_variable = NULL,   summary = FALSE,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/mapping_ambiguity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","text":"data Translated DF MetaProViz::translate_id reults dataframe least one column target metabolite ID another MetaboliteID type. One IDs can one ID per row, ID can either separated comma list. Optional: add columns source (e.g. term). Column name secondary translated metabolite identifier data. can multiple IDs per row either separated comma \" ,\" list IDs. Column name original metabolite identifier data. one ID per row. grouping_variable Optional:  NULL groups used. TRUE provide column name data containing grouping_variable features grouped. Default = NULL summary Optional:  TRUE long summary tables created. Default = FALSE save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/mapping_ambiguity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","text":"List least 4 DFs: 1-3) --: 1. MappingIssues, 2. MappingIssues summary, 3. Long summary (summary=TRUE) & 4-6) --: 4. MappingIssues, 5. MappingIssues summary, 6. Long summary (summary=TRUE) & 7) Combined summary table (summary=TRUE)","code":""},{"path":"/reference/mapping_ambiguity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create Mapping Ambiguities between two ID types — mapping_ambiguity","text":"","code":"KEGG_Pathways <- MetaProViz::metsigdb_kegg() InputDF <- MetaProViz::translate_id(data= KEGG_Pathways, metadata_info = c(InputID=\"MetaboliteID\", grouping_variable=\"term\"), from = c(\"kegg\"), to = c(\"pubchem\"))[[\"TranslatedDF\"]] Res <- MetaProViz::mapping_ambiguity(data= InputDF, from = \"MetaboliteID\", to = \"pubchem\", grouping_variable = \"term\", summary=TRUE)"},{"path":"/reference/mca_2cond.html","id":"-","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules conditions.","code":""},{"path":[]},{"path":"/reference/mca_2cond.html","id":"--1","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules conditions.","code":""},{"path":"/reference/mca_2cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"","code":"mca_2cond(   data_c1,   data_c2,   metadata_info_c1 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", cutoff_stat = 0.05,     ValueCutoff = 1),   metadata_info_c2 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", cutoff_stat = 0.05,     ValueCutoff = 1),   feature = \"Metabolite\",   save_table = \"csv\",   method_background = \"C1&C2\",   path = NULL )"},{"path":"/reference/mca_2cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"data_c1 DF data (results e.g. dma) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. data_c2 DF data (results e.g. dma) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. metadata_info_c1 Optional:  Pass ColumnNames Cutoffs condition 1 including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_data_c1,StatCol=ColumnName_data_c1, cutoff_stat= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1) metadata_info_c2 Optional:  Pass ColumnNames Cutoffs condition 2 includingthe value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_data_c2,StatCol=ColumnName_data_c2, cutoff_stat= NumericValue, ValueCutoff=NumericValue)Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1) feature Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" Default = \"csv\" method_background Optional:  Background method C1|C2, C1&C2, C2, C1 * Default=\"C1&C2\" path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/mca_2cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"List two DFs: 1. summary cluster count 2. detailed information metabolites clusters.","code":""},{"path":"/reference/mca_2cond.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":" ————————— This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between conditions.  — mca_2cond","text":"","code":"Intra <- intracell_raw%>%tibble::column_to_rownames(\"Code\") Input <- MetaProViz::dma(data=Intra[-c(49:58) ,-c(1:3)], metadata_sample=Intra[-c(49:58) , c(1:3)], metadata_info = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\")) #> In `Numerator` 786-O, 786-M1A, 786-M2A, NA/0 values exist in 5 Metabolite(s). and in `denominator`HK2 2 Metabolite(s).. Those metabolite(s) might return p.val= NA, p.adj.= NA, t.val= NA. The Log2FC = Inf, if all replicates are 0/NA. #> There are NA's/0s in the data. This can impact the output of the SHapiro-Wilk test for all metabolites that include NAs/0s. #> Error occurred during shapiro that performs the shapiro-Wilk test. Message: all 'x' values are identical #> For 32.97% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using lmFit. #> Warning: Partial NA coefficients for 1 probe(s)      Res <- MetaProViz::mca_2cond(data_c1 = Input[[\"dma\"]][[\"786-O_vs_HK2\"]],                              data_c2 = Input[[\"dma\"]][[\"786-M1A_vs_HK2\"]]) #> Warning: data_c1 includes NAs in Log2FC and/or in p.adj. 1 metabolites containing NAs are removed. #> Warning: data_c2 includes NAs in Log2FC and/or inp.adj. 1 metabolites containing NAs are removed."},{"path":"/reference/mca_core.html","id":null,"dir":"Reference","previous_headings":"","what":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","text":"script performs metabolite clustering analysis computes clusters metabolites based regulatory rules Intracellular culture media metabolomics (core experiment).","code":""},{"path":"/reference/mca_core.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","text":"","code":"mca_core(   data_intra,   data_core,   metadata_info_intra = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", cutoff_stat = 0.05,     ValueCutoff = 1),   metadata_info_core = c(DirectionCol = \"core\", ValueCol = \"Log2(Distance)\", StatCol =     \"p.adj\", cutoff_stat = 0.05, ValueCutoff = 1),   feature = \"Metabolite\",   save_table = \"csv\",   method_background = \"Intra&core\",   path = NULL )"},{"path":"/reference/mca_core.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","text":"data_intra DF data (results e.g. dma) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. data_core DF data (results e.g. dma) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. additionally require metadata_info_intra Optional:  Pass ColumnNames Cutoffs intracellular metabolomics including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_data_intra,StatCol=ColumnName_data_intra, cutoff_stat= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1) metadata_info_core Optional:  Pass ColumnNames Cutoffs consumption-release metabolomics including direction column, value column (e.g. Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(DirectionCol= ColumnName_data_core,ValueCol=ColumnName_data_core,StatCol=ColumnName_data_core, cutoff_stat= NumericValue, ValueCutoff=NumericValue)Default=c(DirectionCol=\"core\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", cutoff_stat= 0.05, ValueCutoff=1) feature Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" method_background Optional:  Background method `Intra|core, Intra&core, core, Intra * Default=\"Intra&core\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/mca_core.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","text":"List two DFs: 1. summary cluster count 2. detailed information metabolites clusters.","code":""},{"path":"/reference/mca_core.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script performs metabolite clustering analysis and computes clusters of metabolites based on regulatory rules between Intracellular and culture media metabolomics (core experiment). — mca_core","text":"","code":"Media <- medium_raw %>%tibble::column_to_rownames(\"Code\") ResM <- MetaProViz::processing(data = Media[-c(40:45) ,-c(1:3)],                                   metadata_sample = Media[-c(40:45) ,c(1:3)] ,                                   metadata_info = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\", core_norm_factor = \"GrowthFactor\", core_media = \"blank\"),                                   core=TRUE) #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> feature_filtering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs mvi is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> total Ion Count (tic) normalization: total Ion Count (tic) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> 8 of variables have high variability (CV > 30) in the core_media control samples. Consider checking the pooled samples to decide whether to remove these metabolites or not. #> Warning: The core_media samples  MS51-06  were found to be different from the rest. They will not be included in the sum of the core_media samples. #> core data are normalised by substracting mean (blank) from each sample and multiplying with the core_norm_factor #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360-378, doi:https://doi.org/10.1214/aoms/1177732979). hotellins_confidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS51-06   #> Filtering round  2  Outlier Samples:  MS51-09                    MediaDMA <- MetaProViz::dma(data=ResM[[\"DF\"]][[\"Preprocessing_output\"]][ ,-c(1:4)],                             metadata_sample=ResM[[\"DF\"]][[\"Preprocessing_output\"]][ , c(1:4)],                             metadata_info = c(Conditions = \"Conditions\", Numerator = NULL, Denominator  = \"HK2\"),                             pval =\"aov\",                             core=TRUE) #> There are no NA/0 values #> For the condition HK2 75.71 % of the metabolites follow a normal distribution and 24.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.83 % of the metabolites follow a normal distribution and 4.17 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M1A 97.22 % of the metabolites follow a normal distribution and 2.78 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 88.89 % of the metabolites follow a normal distribution and 11.11 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSRC2 93.06 % of the metabolites follow a normal distribution and 6.94 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSLM1B 86.11 % of the metabolites follow a normal distribution and 13.89 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition RFX631 97.22 % of the metabolites follow a normal distribution and 2.78 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 62.86% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov.                IntraDMA <- intracell_raw %>%tibble::column_to_rownames(\"Code\")  Res <- MetaProViz::mca_core(data_intra = IntraDMA%>%tibble::rownames_to_column(\"Metabolite\"),                             data_core = MediaDMA[[\"dma\"]][[\"786-M1A_vs_HK2\"]]) #> Error in check_param_mca(data_c1 = NULL, data_c2 = NULL, data_core = data_core,     data_intra = data_intra, metadata_info_c1 = NULL, metadata_info_c2 = NULL,     metadata_info_core = metadata_info_core, metadata_info_intra = metadata_info_intra,     method_background = method_background, feature = feature,     save_table = save_table): The Log2FC column selected as ValueCol in metadata_info_intra was not found in data_intra. Please check your input."},{"path":"/reference/mca_core_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"mca_core_rules — mca_core_rules","title":"mca_core_rules — mca_core_rules","text":"Manually curated table defining flow information Conusuption-Release Intracellular metabolomics biological regulatory clusters Regulatory labels different grouping methods.","code":""},{"path":"/reference/mca_core_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mca_core_rules — mca_core_rules","text":"","code":"mca_core_rules"},{"path":"/reference/mca_core_rules.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mca_core_rules — mca_core_rules","text":"Columns include Intra, core, core_Detection including state entries (e.g. , , etc.) Regulator Clustering columns (RG1-RG3)","code":""},{"path":"/reference/mca_core_rules.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"mca_core_rules — mca_core_rules","text":"Schmidt et al, MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation version 2.1.7, GitHub 2025.","code":""},{"path":"/reference/mca_twocond_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"mca_twocond_rules — mca_twocond_rules","title":"mca_twocond_rules — mca_twocond_rules","text":"Manually curated table defining flow information two condition biological regulatory clusters Regulatory labels different grouping methods.","code":""},{"path":"/reference/mca_twocond_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"mca_twocond_rules — mca_twocond_rules","text":"","code":"mca_twocond_rules"},{"path":"/reference/mca_twocond_rules.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"mca_twocond_rules — mca_twocond_rules","text":"Columns include Intra, core, core_Detection including state entries (e.g. , , etc.) Regulator Clustering columns (RG1-RG3)","code":""},{"path":"/reference/mca_twocond_rules.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"mca_twocond_rules — mca_twocond_rules","text":"Schmidt et al, MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation version 2.1.7, GitHub 2025.","code":""},{"path":"/reference/medium_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"medium_raw — medium_raw","title":"medium_raw — medium_raw","text":"Metabolomics workbench project PR001418, study ST002226 exported integrated raw peak values intracellular metabolomics HK2 cccRCC cell lines 786-O, 786-M1A, 786-M2A, OS-RC-2, OS-LM1 RFX-631.","code":""},{"path":"/reference/medium_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"medium_raw — medium_raw","text":"","code":"medium_raw"},{"path":"/reference/medium_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"medium_raw — medium_raw","text":"Columns include Conditions (=Cell lines, blanks),Biological_Replicate, GrowthFactor numeric column measured metabolite (raw data)","code":""},{"path":"/reference/medium_raw.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"medium_raw — medium_raw","text":"Sciacovelli & Dugourd et. al., Dynamic partitioning branched-chain amino acids-derived nitrogen supports renal cancer progression , Nature Communications 2022, doi:10.1038/s41467-022-35036-4","code":""},{"path":"/reference/meta_pk.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta prior-knowledge — meta_pk","title":"Meta prior-knowledge — meta_pk","text":"Meta prior-knowledge","code":""},{"path":"/reference/meta_pk.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta prior-knowledge — meta_pk","text":"","code":"meta_pk(   data,   metadata_sample,   metadata_info = NULL,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/meta_pk.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta prior-knowledge — meta_pk","text":"data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. metadata_sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL metadata_info Optional:  NULL vector column names used, .e. c(\"Age\", \"gender\", \"Tumour-stage\"). default: NULL save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/meta_pk.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Meta prior-knowledge — meta_pk","text":"DF prior knowledge based patient metadata","code":""},{"path":"/reference/meta_pk.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta prior-knowledge — meta_pk","text":"","code":"Tissue_Norm <- tissue_norm %>%tibble::column_to_rownames(\"Code\") Res <- MetaProViz::meta_pk(data=Tissue_Norm[,-c(1:13)],                           metadata_sample= Tissue_Norm[,c(2,4:5,12:13)])"},{"path":"/reference/metadata_analysis.html","id":null,"dir":"Reference","previous_headings":"","what":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","text":"function performs PCA analysis input data combines sample metadata perform ANOVA test identify significant differences groups.","code":""},{"path":"/reference/metadata_analysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","text":"","code":"metadata_analysis(   data,   metadata_sample,   scaling = TRUE,   percentage = 0.1,   cutoff_stat = 0.05,   cutoff_variance = 1,   save_table = \"csv\",   save_plot = \"svg\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/metadata_analysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","text":"data DF rows unique samples columns features, numerical values columns, metabolite identifiers column names. Use NA metabolites detected. Includes experimental design outlier column. metadata_sample Optional:  DF contains information samples, combined input data based join specification . Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE percentage Optional:  percentage top bottom features displayed results summary. Default = 0.1 cutoff_stat Optional:  Cutoff adjusted p-value ANOVA test results summary heatmap. Default = 0.05 cutoff_variance Optional:  Cutoff PCs variance displayed heatmap. Default = 1 save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" save_plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg print_plot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/metadata_analysis.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","text":"List DFs: prcomp results, loadings, top-Bottom features, annova results, results summary","code":""},{"path":"/reference/metadata_analysis.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function performs a PCA analysis on the input data and combines it with the sample metadata to perform an ANOVA test to identify significant differences between the groups. — metadata_analysis","text":"","code":"Res <- metadata_analysis(     data = tissue_norm[,-c(2:14)]%>%tibble::column_to_rownames(\"Code\"),     metadata_sample = tissue_norm[,c(1,3,5:6,13:14)]%>%tibble::column_to_rownames(\"Code\") ) #> The column names of the 'metadata_sample' contain special character that where removed."},{"path":"/reference/metaproviz_config_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Current config file path of MetaProViz — metaproviz_config_path","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Current config file path MetaProViz","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path(user = FALSE)"},{"path":"/reference/metaproviz_config_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"user Logical: prioritize user level config even config current working directory available.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Character: path config file.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path() #> [1] \"~/.config/MetaProViz/metaproviz.yml\""},{"path":"/reference/metaproviz_load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the package configuration from a config file — metaproviz_load_config","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Load package configuration config file","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"metaproviz_load_config(path = NULL, title = \"default\", user = FALSE, ...)"},{"path":"/reference/metaproviz_load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the package configuration from a config file — metaproviz_load_config","text":"path Path config file. title Load config title. One config file might contain multple configurations, identified title. title available first section config file used. user Force use user level config even config file exists current directory. default, local config files prioroty user level config. ... Passed yaml::yaml.load_file.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Invisibly returns config list.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"if (FALSE) { # \\dontrun{ # load the config from a custom config file: metaproviz_load_config(path = 'my_custom_metaproviz_config.yml') } # }"},{"path":"/reference/metaproviz_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse the current MetaProViz log file — metaproviz_log","title":"Browse the current MetaProViz log file — metaproviz_log","text":"Browse current MetaProViz log file","code":""},{"path":"/reference/metaproviz_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse the current MetaProViz log file — metaproviz_log","text":"","code":"metaproviz_log()"},{"path":"/reference/metaproviz_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse the current MetaProViz log file — metaproviz_log","text":"Returns NULL.","code":""},{"path":[]},{"path":"/reference/metaproviz_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse the current MetaProViz log file — metaproviz_log","text":"","code":"if (FALSE) { # \\dontrun{ metaproviz_log() # then you can browse the log file, and exit with `q` } # }"},{"path":"/reference/metaproviz_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to the current MetaProViz log file — metaproviz_logfile","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"Path current MetaProViz log file","code":""},{"path":"/reference/metaproviz_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"","code":"metaproviz_logfile()"},{"path":"/reference/metaproviz_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"Character: path current logfile, NULL logfile available.","code":""},{"path":[]},{"path":"/reference/metaproviz_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"","code":"metaproviz_logfile() #> [1] \"/__w/MetaProViz/MetaProViz/docs/reference/metaproviz-log/metaproviz-20250716-1413.log\" # [1] \"path/metaproviz/metaproviz-log/metaproviz-20210309-1642.log\""},{"path":"/reference/metaproviz_reset_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"Restore built-default values config parameters MetaProViz","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"metaproviz_reset_config(save = NULL, reset_all = FALSE)"},{"path":"/reference/metaproviz_reset_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"save path, restored config also saved file. TRUE, config saved current default config path (see metaproviz_config_path). reset_all Reset defaults also options already set R options.","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"config list.","code":""},{"path":[]},{"path":"/reference/metaproviz_reset_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"if (FALSE) { # \\dontrun{ # restore the defaults and write them to the default config file: metaproviz_reset_config() metaproviz_save_config() } # }"},{"path":"/reference/metaproviz_save_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the current package configuration — metaproviz_save_config","title":"Save the current package configuration — metaproviz_save_config","text":"Save current package configuration","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"metaproviz_save_config(path = NULL, title = \"default\", local = FALSE)"},{"path":"/reference/metaproviz_save_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the current package configuration — metaproviz_save_config","text":"path Path config file. Directories file created exist. title Save config title. One config file might contain multiple configurations, identified title. local Save config file current directory instead user level config file. loading, config current directory priority user level config.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the current package configuration — metaproviz_save_config","text":"Returns NULL.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"if (FALSE) { # \\dontrun{ # after this, all downloads will default to commercial licenses # i.e. the resources that allow only academic use will be excluded: options(metaproviz.console_loglevel = 'trace') metaproviz_save_config() } # }"},{"path":"/reference/metaproviz_set_loglevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the log level for the package logger — metaproviz_set_loglevel","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"Sets log level package logger","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"","code":"metaproviz_set_loglevel(level, target = \"logfile\")"},{"path":"/reference/metaproviz_set_loglevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"level Character class loglevel. desired log level. target Character, either 'logfile' 'console'","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"Returns NULL.","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"","code":"metaproviz_set_loglevel(logger::FATAL, target = 'console')"},{"path":"/reference/metsigdb_chemicalclass.html","id":null,"dir":"Reference","previous_headings":"","what":"Prior Knowledge Import — metsigdb_chemicalclass","title":"Prior Knowledge Import — metsigdb_chemicalclass","text":"Import process file create Prior Knowledge.","code":""},{"path":"/reference/metsigdb_chemicalclass.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prior Knowledge Import — metsigdb_chemicalclass","text":"","code":"metsigdb_chemicalclass(version = \"2.5.4\", save_table = \"csv\", path = NULL)"},{"path":"/reference/metsigdb_chemicalclass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prior Knowledge Import — metsigdb_chemicalclass","text":"version Optional:  Version RaMP database loaded OmniPathR. default: \"2.5.4\" save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/metsigdb_chemicalclass.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prior Knowledge Import — metsigdb_chemicalclass","text":"data frame containing Prior Knowledge.","code":""},{"path":"/reference/metsigdb_chemicalclass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prior Knowledge Import — metsigdb_chemicalclass","text":"","code":"ChemicalClass <- MetaProViz::metsigdb_chemicalclass() #> Cached file loaded from: ~/.cache/RaMP-ChemicalClass_Metabolite.rds"},{"path":"/reference/metsigdb_kegg.html","id":null,"dir":"Reference","previous_headings":"","what":"KEGG — metsigdb_kegg","title":"KEGG — metsigdb_kegg","text":"Import process KEGG.","code":""},{"path":"/reference/metsigdb_kegg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KEGG — metsigdb_kegg","text":"","code":"metsigdb_kegg()"},{"path":"/reference/metsigdb_kegg.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KEGG — metsigdb_kegg","text":"data frame containing KEGG pathways ORA.","code":""},{"path":"/reference/metsigdb_kegg.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KEGG — metsigdb_kegg","text":"Imports KEGG pathways environment","code":""},{"path":"/reference/metsigdb_kegg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"KEGG — metsigdb_kegg","text":"","code":"KEGG_Pathways <- MetaProViz::metsigdb_kegg()"},{"path":"/reference/metsigdb_metalinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotated metabolite-protein interactions from MetalinksDB — metsigdb_metalinks","title":"Annotated metabolite-protein interactions from MetalinksDB — metsigdb_metalinks","text":"Annotated metabolite-protein interactions MetalinksDB","code":""},{"path":"/reference/metsigdb_metalinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotated metabolite-protein interactions from MetalinksDB — metsigdb_metalinks","text":"","code":"metsigdb_metalinks(   types = NULL,   cell_location = NULL,   tissue_location = NULL,   biospecimen_location = NULL,   disease = NULL,   pathway = NULL,   hmdb_ids = NULL,   uniprot_ids = NULL,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/metsigdb_metalinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotated metabolite-protein interactions from MetalinksDB — metsigdb_metalinks","text":"types Desired edge types. Options : \"lr\", \"pd\", 'lr' stands 'ligand-receptor' 'pd' stands 'production-degradation'.default: NULL cell_location Desired metabolite cell locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Cytoplasm\", \"Endoplasmic reticulum\", \"Extracellular\", \"Lysosome\" , \"Mitochondria\", \"Peroxisome\", \"Membrane\", \"Nucleus\", \"Golgi apparatus\" , \"Inner mitochondrial membrane\". default: NULL tissue_location Desired metabolite tissue locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Placenta\", \"Adipose Tissue\",\"Bladder\", \"Brain\", \"Epidermis\",\"Kidney\", \"Liver\", \"Neuron\", \"Pancreas\", \"Prostate\", \"Skeletal Muscle\", \"Spleen\", \"Testis\", \"Thyroid Gland\", \"Adrenal Medulla\", \"Erythrocyte\",\"Fibroblasts\", \"Intestine\", \"Ovary\", \"Platelet\", \"Tissues\", \"Semen\", \"Adrenal Gland\", \"Adrenal Cortex\", \"Heart\", \"Lung\", \"Hair\", \"Eye Lens\", \"Leukocyte\", Retina\", \"Smooth Muscle\", \"Gall Bladder\", \"Bile\",  \"Bone Marrow\", \"Blood\", \"Basal Ganglia\", \"Cartilage\". default: NULL biospecimen_location Desired metabolite biospecimen locations.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\").View options setting \"?\".  \"Blood\", \"Feces\", \"Saliva\", \"Sweat\", \"Urine\", \"Breast Milk\", \"Cellular Cytoplasm\", \"Cerebrospinal Fluid (CSF)\", \"Amniotic Fluid\" , \"Aqueous Humour\", \"Ascites Fluid\", \"Lymph\", \"Tears\", \"Breath\", \"Bile\", \"Semen\", \"Pericardial Effusion\".default: NULL disease Desired metabolite diseases.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". default: NULL pathway Desired metabolite pathways.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL hmdb_ids Desired HMDB IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL uniprot_ids Desired UniProt IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/pool_estimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Find metabolites with high variability across total pool samples — pool_estimation","title":"Find metabolites with high variability across total pool samples — pool_estimation","text":"Find metabolites high variability across total pool samples","code":""},{"path":"/reference/pool_estimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find metabolites with high variability across total pool samples — pool_estimation","text":"","code":"pool_estimation(   data,   metadata_sample = NULL,   metadata_info = NULL,   cutoff_cv = 30,   save_plot = \"svg\",   save_table = \"csv\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/pool_estimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find metabolites with high variability across total pool samples — pool_estimation","text":"data DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. Can either full dataset dataset pool samples. metadata_sample Optional:  DF contains information samples full dataset inserted Input_data. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), exist.Default = NULL metadata_info Optional:  NULL Named vector including Conditions PoolSample information (Name Conditions column Name pooled samples Conditions Input_SettingsFile)  : c(Conditions=\"ColumnNameConditions, PoolSamples=NamePoolCondition. Conditions added Input_metadata_info, assumed conditions column named 'Conditions' Input_SettingsFile. ). Default = NULL cutoff_cv Optional:  Filtering cutoff high variance metabolites using Coefficient Variation. Default = 30 save_plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" print_plot Optional:  TRUE prints overview resulting plots. Default = TRUE path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/pool_estimation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find metabolites with high variability across total pool samples — pool_estimation","text":"List two elements: DF (including input output table) Plot (including plots generated)","code":""},{"path":"/reference/pool_estimation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find metabolites with high variability across total pool samples — pool_estimation","text":"","code":"Intra <- intracell_raw %>%tibble::column_to_rownames(\"Code\") Res <- pool_estimation(data=Intra[ ,-c(1:3)],                                 metadata_sample=Intra[ , c(1:3)],                                 metadata_info = c(PoolSamples = \"Pool\", Conditions=\"Conditions\")) #> Warning: ggrepel: 36 unlabeled data points (too many overlaps). Consider increasing max.overlaps"},{"path":"/reference/processing.html","id":null,"dir":"Reference","previous_headings":"","what":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","text":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation Outlier Detection: HotellingT2.","code":""},{"path":"/reference/processing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","text":"","code":"processing(   data,   metadata_sample,   metadata_info,   featurefilt = \"Modified\",   cutoff_featurefilt = 0.8,   tic = TRUE,   mvi = TRUE,   mvi_percentage = 50,   hotellins_confidence = 0.99,   core = FALSE,   save_plot = \"svg\",   save_table = \"csv\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/processing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","text":"data DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. metadata_sample DF contains information samples, combined input data based unique sample identifiers used rownames. metadata_info Named vector containing information names experimental parameters. c(Conditions=\"ColumnName_Plot_SettingsFile\", Biological_Replicates=\"ColumnName_Plot_SettingsFile\"). Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"BiologicalReplicates\" including numerical values. core = TRUE core_norm_factor = \"Columnname_Input_SettingsFile\" core_media = \"Columnname_Input_SettingsFile\", also added. Column core_norm_factor used normalization core_media used specify name media controls Conditions. featurefilt Optional: NULL, feature filtering performed. set \"Standard\" applies 80%-filtering rule (Bijlsma S. et al., 2006) metabolite features whole dataset. set \"Modified\",filtering done based different conditions, thus column named \"Conditions\" must provided Input_SettingsFile input file including individual conditions want apply filtering (Yang, J et al., 2015). Default = \"Standard\" cutoff_featurefilt Optional:  percentage feature filtering. Default = 0.8 tic Optional:  TRUE, total Ion Count normalization performed. Default = TRUE mvi Optional:  TRUE, Missing Value Imputation (mvi) based half minimum performed Default = TRUE mvi_percentage Optional:  percentage 0-100 imputed value based minimum value. Default = 50 hotellins_confidence Optional:  Defines Confidence Outlier identification HotellingT2 test. Must numeric.Default = 0.99 core Optional:  TRUE, consumption-release experiment performed core value calculated. Please consider providing Normalisation factor column called \"core_norm_factor\" \"Input_SettingsFile\" DF, column \"Conditions\" matches. normalisation factor must numerical value obtained growth rate obtained growth curve growth factor obtained ratio cell count/protein quantification start point cell count/protein quantification end point.. Additionally control media samples available \"Input\" DF defined \"core_media\" samples \"Conditions\" column \"Input_SettingsFile\" DF. Default = FALSE save_plot Optional:  Select file type output plots. Options svg, png, pdf. set NULL, plots saved. Default = svg save_table Optional:  Select file type output table. Options \"csv\", \"xlsx\", \"txt\". set NULL, plots saved. Default = \"csv\" print_plot Optional:  TRUE prints overview resulting plots. Default = TRUE path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/processing.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","text":"List two elements: DF (including output tables generated) Plot (including plots generated)","code":""},{"path":"/reference/processing.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modularised Normalization: 80%-filtering rule, total-ion count normalization, missing value imputation and Outlier Detection: HotellingT2. — processing","text":"","code":"Intra <- intracell_raw %>%tibble::column_to_rownames(\"Code\") ResI <- MetaProViz::processing(data=Intra[-c(49:58) ,-c(1:3)],                                  metadata_sample=Intra[-c(49:58) , c(1:3)],                                  metadata_info = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\")) #> feature_filtering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: AICAR, FAICAR, SAICAR #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> total Ion Count (tic) normalization: total Ion Count (tic) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360-378, doi:https://doi.org/10.1214/aoms/1177732979). hotellins_confidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS55_29               Media <- medium_raw %>%tibble::column_to_rownames(\"Code\") ResM <- MetaProViz::processing(data = Media[-c(40:45) ,-c(1:3)],                                   metadata_sample = Media[-c(40:45) ,c(1:3)] ,                                   metadata_info = c(Conditions = \"Conditions\", Biological_Replicates = \"Biological_Replicates\", core_norm_factor = \"GrowthFactor\", core_media = \"blank\"),                                   core=TRUE) #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> feature_filtering: Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values (REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004). Filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing Value Imputation: Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs mvi is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> total Ion Count (tic) normalization: total Ion Count (tic) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> 8 of variables have high variability (CV > 30) in the core_media control samples. Consider checking the pooled samples to decide whether to remove these metabolites or not. #> Warning: The core_media samples  MS51-06  were found to be different from the rest. They will not be included in the sum of the core_media samples. #> core data are normalised by substracting mean (blank) from each sample and multiplying with the core_norm_factor #> Outlier detection: Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) (REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360-378, doi:https://doi.org/10.1214/aoms/1177732979). hotellins_confidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round  1  Outlier Samples:  MS51-06   #> Filtering round  2  Outlier Samples:  MS51-09"},{"path":"/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"/reference/replicate_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges the analytical replicates of an experiment — replicate_sum","title":"Merges the analytical replicates of an experiment — replicate_sum","text":"Merges analytical replicates experiment","code":""},{"path":"/reference/replicate_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges the analytical replicates of an experiment — replicate_sum","text":"","code":"replicate_sum(   data,   metadata_sample,   metadata_info = c(Conditions = \"Conditions\", Biological_Replicates =     \"Biological_Replicates\", Analytical_Replicates = \"Analytical_Replicates\"),   save_table = \"csv\",   path = NULL )"},{"path":"/reference/replicate_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges the analytical replicates of an experiment — replicate_sum","text":"data DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. metadata_sample DF contains information samples Column \"Conditions\", \"Biological_replicates\" \"Analytical_Replicates exist. metadata_info Optional:  Named vector including Conditions Replicates information: c(Conditions=\"ColumnNameConditions\", Biological_Replicates=\"ColumnName_metadata_sample\", Analytical_Replicates=\"ColumnName_metadata_sample\").Default = NULL save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/replicate_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merges the analytical replicates of an experiment — replicate_sum","text":"DF merged analytical replicates","code":""},{"path":"/reference/replicate_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merges the analytical replicates of an experiment — replicate_sum","text":"","code":"Intra <- intracell_raw %>%tibble::column_to_rownames(\"Code\") Res <- replicate_sum(data=Intra[-c(49:58) ,-c(1:3)],                                 metadata_sample=Intra[-c(49:58) , c(1:3)],                                 metadata_info = c(Conditions=\"Conditions\", Biological_Replicates=\"Biological_Replicates\", Analytical_Replicates=\"Analytical_Replicates\"))"},{"path":"/reference/standard_ora.html","id":null,"dir":"Reference","previous_headings":"","what":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — standard_ora","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — standard_ora","text":"Uses enricher run ORA differential metabolites (DM) using pathway list","code":""},{"path":"/reference/standard_ora.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — standard_ora","text":"","code":"standard_ora(   data,   metadata_info = c(pvalColumn = \"p.adj\", percentageColumn = \"t.val\", PathwayTerm =     \"term\", PathwayFeature = \"Metabolite\"),   cutoff_stat = 0.05,   cutoff_percentage = 10,   input_pathway,   pathway_name = \"\",   min_gssize = 10,   max_gssize = 1000,   save_table = \"csv\",   path = NULL )"},{"path":"/reference/standard_ora.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — standard_ora","text":"data DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) input_pathway. metadata_info Optional:  Pass ColumnName column including parameters use cutoff_stat cutoff_percentage. Also pass ColumnName input_pathway including term feature names. (pvalColumn = ColumnName data, percentageColumn= ColumnName data, PathwayTerm= ColumnName input_pathway, PathwayFeature= ColumnName input_pathway) c(pvalColumn=\"p.adj\", percentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") cutoff_stat Optional:  p-adjusted value cutoff ORA results. Must numeric value. default: 0.05 cutoff_percentage Optional:  percentage cutoff metabolites considered ORA. Selects top/Bottom % selected percentageColumn, usually t.val Log2FC default: 10 input_pathway DF must include column \"term\" pathway name, column \"Metabolite\" Metabolite name ID column \"Description\" pathway description depicted plots. pathway_name Optional:  Name input_pathway used default: \"\" min_gssize Optional:  minimum group size ORA default: 10 max_gssize Optional:  maximum group size ORA default: 1000 save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/standard_ora.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Uses enricher to run ORA on the differential metabolites (DM) using a pathway list — standard_ora","text":"Saves results individual .csv files.","code":""},{"path":"/reference/tissue_dma.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_dma — tissue_dma","title":"tissue_dma — tissue_dma","text":"performed differential metabolite analysis comparing ccRCC tissue versus adjacent normal tissue using median normalised data supplementary table 2 Hakimi et. al.(=\"Tissue_Norm\").","code":""},{"path":"/reference/tissue_dma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_dma — tissue_dma","text":"","code":"tissue_dma"},{"path":"/reference/tissue_dma.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_dma — tissue_dma","text":"Columns include Log2FC, stats, metabolite identifiers, metabolite pathways normalised metabolite values used input row names metabolite trivial names.","code":""},{"path":"/reference/tissue_dma.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_dma — tissue_dma","text":"Hakimi et. al, integrated metabolic atlas clear cell renal cell carcinoma, Cancer Cell 2016, doi:10.1016/j.ccell.2015.12.004","code":""},{"path":"/reference/tissue_dma_old.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_dma_old — tissue_dma_old","title":"tissue_dma_old — tissue_dma_old","text":"performed differential metabolite analysis comparing ccRCC tissue versus adjacent normal tissue patient's subset old patient's (age > 58 years) using median normalised data supplementary table 2 Hakimi et. al.(=\"Tissue_Norm\").","code":""},{"path":"/reference/tissue_dma_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_dma_old — tissue_dma_old","text":"","code":"tissue_dma_old"},{"path":"/reference/tissue_dma_old.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_dma_old — tissue_dma_old","text":"Columns include Log2FC, stats, metabolite identifiers, metabolite pathways normalised metabolite values used input row names metabolite trivial names.","code":""},{"path":"/reference/tissue_dma_old.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_dma_old — tissue_dma_old","text":"Hakimi et. al, integrated metabolic atlas clear cell renal cell carcinoma, Cancer Cell 2016, doi:10.1016/j.ccell.2015.12.004","code":""},{"path":"/reference/tissue_dma_young.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_dma_young — tissue_dma_young","title":"tissue_dma_young — tissue_dma_young","text":"performed differential metabolite analysis comparing ccRCC tissue versus adjacent normal tissue patient's subset young patient's (age <42 years) using median normalised data supplementary table 2 Hakimi et. al.(=\"Tissue_Norm\").","code":""},{"path":"/reference/tissue_dma_young.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_dma_young — tissue_dma_young","text":"","code":"tissue_dma_young"},{"path":"/reference/tissue_dma_young.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_dma_young — tissue_dma_young","text":"Columns include Log2FC, stats, metabolite identifiers, metabolite pathways normalised metabolite values used input row names metabolite trivial names.","code":""},{"path":"/reference/tissue_dma_young.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_dma_young — tissue_dma_young","text":"Hakimi et. al, integrated metabolic atlas clear cell renal cell carcinoma, Cancer Cell 2016, doi:10.1016/j.ccell.2015.12.004","code":""},{"path":"/reference/tissue_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Tissue_Metadata — tissue_meta","title":"Tissue_Metadata — tissue_meta","text":"Hakimi et. al. metabolites assigned metabolite IDs, pathways, platform, mass fetaure metainformation.","code":""},{"path":"/reference/tissue_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tissue_Metadata — tissue_meta","text":"","code":"tissue_meta"},{"path":"/reference/tissue_meta.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tissue_Metadata — tissue_meta","text":"Columns include Metabolite IDs (HMDB, KEGG, etc), platform, mass, metabolic pathway row names metabolite trivial names.","code":""},{"path":"/reference/tissue_meta.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tissue_Metadata — tissue_meta","text":"Hakimi et. al, integrated metabolic atlas clear cell renal cell carcinoma, Cancer Cell 2016, doi:10.1016/j.ccell.2015.12.004","code":""},{"path":"/reference/tissue_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_norm — tissue_norm","title":"tissue_norm — tissue_norm","text":"median normalised data supplementary table 2 Hakimi et al metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs.","code":""},{"path":"/reference/tissue_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_norm — tissue_norm","text":"","code":"tissue_norm"},{"path":"/reference/tissue_norm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_norm — tissue_norm","text":"Columns include patient metadata (e.g. age, gender, sage, etc.) numeric column measured metabolite (normalised data)","code":""},{"path":"/reference/tissue_norm.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_norm — tissue_norm","text":"Hakimi et. al, integrated metabolic atlas clear cell renal cell carcinoma, Cancer Cell 2016, doi:10.1016/j.ccell.2015.12.004","code":""},{"path":"/reference/tissue_tvn_proteomics.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_tvn_proteomics — tissue_tvn_proteomics","title":"tissue_tvn_proteomics — tissue_tvn_proteomics","text":"processed proteomics data downloaded supplementary table 3 Mora & Schmidt et. al., used study Clark et. al. Proteomics data Commons PDC000127.","code":""},{"path":"/reference/tissue_tvn_proteomics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_tvn_proteomics — tissue_tvn_proteomics","text":"","code":"tissue_tvn_proteomics"},{"path":"/reference/tissue_tvn_proteomics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_tvn_proteomics — tissue_tvn_proteomics","text":"Columns include Log2FC, stats, gene name SiRCle cluster information summarises genes based regulation","code":""},{"path":"/reference/tissue_tvn_proteomics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_tvn_proteomics — tissue_tvn_proteomics","text":"Mora & Schmidt, SiRCle (Signature Regulatory Clustering) model integration reveals mechanisms phenotype regulation renal cancer, Genome Medicine 2024, doi:10.1186/s13073-024-01415-3  Clark et. al, Integrated proteogenomic characterization clear cell renal cell carcinoma, Cell 2019, doi:10.1016/j.cell.2019.10.007","code":""},{"path":"/reference/tissue_tvn_rnaseq.html","id":null,"dir":"Reference","previous_headings":"","what":"tissue_tvn_rnaseq — tissue_tvn_rnaseq","title":"tissue_tvn_rnaseq — tissue_tvn_rnaseq","text":"processed transcriptomics data downloaded supplementary table 3 Mora & Schmidt et. al., used study Clark et. al. Proteomics data Commons PDC000127.","code":""},{"path":"/reference/tissue_tvn_rnaseq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tissue_tvn_rnaseq — tissue_tvn_rnaseq","text":"","code":"tissue_tvn_rnaseq"},{"path":"/reference/tissue_tvn_rnaseq.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"tissue_tvn_rnaseq — tissue_tvn_rnaseq","text":"Columns include Log2FC, stats, gene name SiRCle cluster information summarises genes based regulation","code":""},{"path":"/reference/tissue_tvn_rnaseq.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"tissue_tvn_rnaseq — tissue_tvn_rnaseq","text":"Mora & Schmidt, SiRCle (Signature Regulatory Clustering) model integration reveals mechanisms phenotype regulation renal cancer, Genome Medicine 2024, doi:10.1186/s13073-024-01415-3  Clark et. al, Integrated proteogenomic characterization clear cell renal cell carcinoma, Cell 2019, doi:10.1016/j.cell.2019.10.007","code":""},{"path":"/reference/translate_id.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","text":"Translate IDs /KEGG, PubChem, Chebi, HMDB","code":""},{"path":"/reference/translate_id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","text":"","code":"translate_id(   data,   metadata_info = c(InputID = \"MetaboliteID\", grouping_variable = \"term\"),   from = \"kegg\",   to = c(\"pubchem\", \"chebi\", \"hmdb\"),   summary = FALSE,   save_table = \"csv\",   path = NULL,   plot = FALSE )"},{"path":"/reference/translate_id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","text":"data dataframe least one column target (e.g. metabolite), can add columns source (e.g. term). Must \"long\" DF, meaning one ID per row. metadata_info Optional:  Column name Target input_pk. Default = list(InputID=\"MetaboliteID\" , grouping_variable=\"term\") ID type present data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = \"kegg\" One multiple ID types want translate data. Choose \"kegg\", \"pubchem\", \"chebi\", \"hmdb\". Default = c(\"pubchem\",\"chebi\",\"hmdb\") summary Optional:  TRUE long summary tables created. Default = FALSE save_table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/translate_id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","text":"List least three DFs: 1) Original data new column translated ids spearated comma. 2) Mapping information Original ID Translated ID. 3) Mapping summary Original ID Translated ID.","code":""},{"path":"/reference/translate_id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Translate IDs to/from KEGG, PubChem, Chebi, HMDB — translate_id","text":"","code":"KEGG_Pathways <- MetaProViz::metsigdb_kegg() Res <- MetaProViz::translate_id(data= KEGG_Pathways, metadata_info = c(InputID=\"MetaboliteID\", grouping_variable=\"term\"), from = c(\"kegg\"), to = c(\"pubchem\", \"hmdb\"))"},{"path":"/reference/viz_heatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Heatmap visualization — viz_heatmap","title":"Heatmap visualization — viz_heatmap","text":"Heatmap visualization","code":""},{"path":"/reference/viz_heatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Heatmap visualization — viz_heatmap","text":"","code":"viz_heatmap(   data,   metadata_info = NULL,   metadata_sample = NULL,   metadata_feature = NULL,   plot_name = \"\",   scale = \"row\",   save_plot = \"svg\",   enforce_featurenames = FALSE,   enforce_samplenames = FALSE,   print_plot = TRUE,   path = NULL )"},{"path":"/reference/viz_heatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Heatmap visualization — viz_heatmap","text":"data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. metadata_info Optional:  NULL Named vector  can include vectors lists annotation c(individual_Metab= \"ColumnName_metadata_feature\",individual_Sample= \"ColumnName_metadata_sample\", color_Metab=\"ColumnName_metadata_feature\", color_Sample= list(\"ColumnName_metadata_sample\", \"ColumnName_metadata_sample\",...)).Default = NULL metadata_sample DF contains information samples, combined input data based unique sample identifiers. columns required plot_typeInfo.Default = NULL metadata_feature Optional:  DF column \"Metabolite\" including Metabolite names (needs match Metabolite names Input_data) columns required plot_typeInfo. Default = NULL plot_name Optional:  String added output files plot scale Optional:  String information scale row, column none. Default = row save_plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" enforce_featurenames Optional:  100 features rownames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE enforce_samplenames Optional:  50 sampless colnames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE print_plot Optional:  print plots active graphic device. path Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/viz_heatmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Heatmap visualization — viz_heatmap","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/viz_heatmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Heatmap visualization — viz_heatmap","text":"","code":"Intra <- intracell_raw%>%tibble::column_to_rownames(\"Code\") Res <- MetaProViz::viz_heatmap(data=Intra[,-c(1:3)])"},{"path":"/reference/viz_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","text":"script allows perform PCA plot visualization using results MetaProViz analysis PCA plot visualization","code":""},{"path":"/reference/viz_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","text":"","code":"viz_pca(   data,   metadata_info = NULL,   metadata_sample = NULL,   color_palette = NULL,   scale_color = \"discrete\",   shape_palette = NULL,   show_loadings = FALSE,   scaling = TRUE,   pcx = 1,   pcy = 2,   theme = NULL,   plot_name = \"\",   save_plot = \"svg\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/viz_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","text":"data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. metadata_info Optional:  NULL Named vector including least one three information : c(color=\"ColumnName_Plot_SettingsFile\", shape= \"ColumnName_Plot_SettingsFile\"). Default = NULL metadata_sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL color_palette Optional:  Provide customiced color-palette vector format. continuous scale use e.g. scale_color_gradient(low = \"#88CCEE\", high = \"red\") discrete scale c(\"#88CCEE\",  \"#DDCC77\",\"#661100\",  \"#332288\")Default = NULL scale_color Optional:  Either \"continuous\" \"discrete\" colour scale. numeric integer can choose either, character choose discrete. Default = NULL shape_palette Optional:  Provide customiced shape-palette vector format. Default = NULL show_loadings Optional:  TRUE FALSE whether PCA loadings also plotted PCA (biplot) Default = FALSE scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE pcx Optional:  Numeric value PC plotted x-axis Default = 1 pcy Optional:  Numeric value PC plotted y-axis Default = 2 theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. default=NULL use theme_classic(). Default = \"discrete\" plot_name Optional:  String added output files PCA Default = \"\" save_plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg print_plot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE path Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/viz_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/viz_pca.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis PCA plot visualization — viz_pca","text":"","code":"Intra <- intracell_raw[,-c(1:3)]%>%tibble::column_to_rownames(\"Code\") #> Error in tibble::column_to_rownames(., \"Code\"): Can't find column `Code` in `.data`. Res <- viz_pca(Intra) #> Error: object 'Intra' not found"},{"path":"/reference/viz_superplot.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","text":"script allows perform different visualizations (bar, box, violin plots) using results MetaProViz analysis Bar, Box Violin plot Superplot style visualization","code":""},{"path":"/reference/viz_superplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","text":"","code":"viz_superplot(   data,   metadata_sample,   metadata_info = c(Conditions = \"Conditions\", Superplot = NULL),   plot_type = \"Box\",   plot_name = \"\",   plot_conditions = NULL,   stat_comparison = NULL,   pval = NULL,   padj = NULL,   xlab = NULL,   ylab = NULL,   theme = NULL,   color_palette = NULL,   color_palette_dot = NULL,   save_plot = \"svg\",   print_plot = TRUE,   path = NULL )"},{"path":"/reference/viz_superplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","text":"data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. metadata_sample DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\". metadata_info Named vector including least information conditions column: c(Conditions=\"ColumnName_metadata_sample\"). Additionally Superplots can made adding Superplot =\"ColumnName_metadata_sample\", usually biological replicates patient IDs. Default = c(Conditions=\"Conditions\", Superplot = NULL) plot_type String information Graph style. Available options Bar. Box Violin  Default = Box plot_name Optional:  String added output files plot. plot_conditions Vector names selected Conditions plot. Can also used order Conditions way displayed x-axis plot. Default = NULL stat_comparison List numeric vectors containing Condition pairs compare based order plot_conditions vector. Default = NULL pval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test wilcox.test , one-vs--vs-comparison choose aov (=anova) kruskal.test Default = NULL padj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = NULL xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL color_palette Optional:  Provide customized color_palette vector format. Default = NULL color_palette_dot Optional:  Provide customized color_palette vector format. Default = NULL save_plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = svg print_plot Optional:  TRUE FALSE, TRUE plots saved overview results. Default = TRUE path Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/viz_superplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/viz_superplot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis Bar, Box or Violin plot in Superplot style visualization — viz_superplot","text":"","code":"Intra <- intracell_raw[,c(1:6)]%>%tibble::column_to_rownames(\"Code\") Res <- viz_superplot(data=Intra[,-c(1:3)], metadata_sample=Intra[,c(1:3)], metadata_info = c(Conditions=\"Conditions\", Superplot = NULL)) #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: Removed 10 rows containing non-finite outside the scale range #> (`stat_bracket()`).  #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: no non-missing arguments to max; returning -Inf #> Warning: Removed 10 rows containing non-finite outside the scale range #> (`stat_bracket()`)."},{"path":"/reference/viz_volcano.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","text":"script allows perform different data visualizations using results MetaProViz analysis Volcano plot visualization","code":""},{"path":"/reference/viz_volcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","text":"","code":"viz_volcano(   plot_types = \"Standard\",   data,   metadata_info = NULL,   metadata_feature = NULL,   data2 = NULL,   y = \"p.adj\",   x = \"Log2FC\",   xlab = NULL,   ylab = NULL,   cutoff_x = 0.5,   cutoff_y = 0.05,   connectors = FALSE,   select_label = \"\",   plot_name = \"\",   subtitle = \"\",   name_comparison = c(data = \"Cond1\", data2 = \"Cond2\"),   color_palette = NULL,   shape_palette = NULL,   theme = NULL,   save_plot = \"svg\",   path = NULL,   feature = \"Metabolites\",   print_plot = TRUE )"},{"path":"/reference/viz_volcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","text":"plot_types Optional:  Choose \"Standard\" (data), \"Compare\" (plot two comparisons together data data2) \"PEA\" (Pathway Enrichment Analysis) Default = \"Standard\" data DF metabolites row names columns including Log2FC stat (p-value, p.adjusted) value columns. metadata_info Optional:  NULL Named vector including least one three information Settings=\"Standard\" \"Compare\": c(color =\"ColumnName_metadata_feature\", shape = \"ColumnName_metadata_feature\", individual=\"ColumnName_metadata_feature\"). Settings=\"PEA\" named vector : PEA_Pathway=\"ColumnName_data2\"=pathway plotted, PEA_score=\"ColumnName_data2\", PEA_stat= \"ColumnName_data2\"= usually p.adj column, \"PEA_Feature=\"ColumnName_data2\"= usually Metabolites), optionally can additionally include c(color_Metab=\"ColumnName_metadata_feature\", shape= \"ColumnName_metadata_feature\").Default = NULL metadata_feature Optional:  DF column including Metabolite names (needs match Metabolite names Metabolite column name data) columns required plot_typeInfo. Default = NULL data2 Optional:  DF compare main Input_data column names x y (Settings=\"Compare\") metabolites row names Pathway enrichment analysis results (Settings=\"PEA\"). Default = NULL y Optional:  Column name including values used y-axis. Usually include p.adjusted value. Default = \"p.adj\" x Optional:  Column name including values used x-axis. Usually include Log2FC value. Default = \"Log2FC\" xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL cutoff_x Optional:  Number desired log fold change cutoff assessing significance. Default = 0.5 cutoff_y Optional:  Number desired p value cutoff assessing significance. Default = 0.05 connectors Optional:  TRUE FALSE whether connectors names points added plot. Default =  FALSE select_label Optional:  set NULL, feature labels plotted randomly. vector provided, e.g. c(\"MetaboliteName1\", \"MetaboliteName2\"), selected names plotted. set default \"\", feature names plotted. Default = \"\" plot_name Optional:  String added output files plot. Default = \"\" subtitle Optional:  Default = \"\" name_comparison Optional:  Named vector including information two datasets compared plots choosing Settings= \"Compare\". Default = c(data=\"Cond1\", data2= \"Cond2\") color_palette Optional:  Provide customiced color-palette vector format. Default = NULL shape_palette Optional:  Provide customiced shape-palette vector format. Default = NULL theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL save_plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" path Optional: Path folder results saved . default: NULL feature Optional:  Name feature plotted, e.g. \"Metabolites\", \"RNA\", \"Proteins\", \"Genes\", etc. Default = \"metabolites\" print_plot Optional:  print plots active graphic device.","code":""},{"path":"/reference/viz_volcano.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","text":"List two elements: Plot Plot_Sized","code":""},{"path":"/reference/viz_volcano.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis Volcano plot visualization — viz_volcano","text":"","code":"Intra <- intracell_dma%>%tibble::column_to_rownames(\"Metabolite\") Res <- MetaProViz::viz_volcano(data=Intra)"}]
