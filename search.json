[{"path":"/articles/CoRe Metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"CoRe Metabolomics","title":"CoRe Metabolomics","text":"Consumption-Release (CoRe) metabolomics experiment usually refers cell culture experiment metabolomics performed cell culture media.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (DMA) generate Log2Distance statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS).  # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(ggfortify)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/CoRe Metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"CoRe Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media. use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. CoRe experiment (CoRe) raw data available via metabolomics workbench study ST002226 exometabolomics HK2 ccRCC cell lines 786-O, 786-M1A, 786-M2A, OS-RC-2, OS-LM1 RFX-631 performed. Preview DF CoRe including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis. (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Media <- MetaProViz::ToyData(Data=\"CultureMedia_Raw\") MappingInfo <- MetaProViz::ToyData(Data=\"Cells_MetaData\") #This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG() #> Cached file loaded from: C:\\Users\\chris\\AppData\\Local/Cache/KEGG_Metabolite.rds"},{"path":"/articles/CoRe Metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"CoRe Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/CoRe Metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"CoRe Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. case CoRe experiment, blank samples ignored feature filtering, since often metabolites released cell naturally present culture media leading detection blank. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter TIC_Normalization refers Total Ion Count (TIC) normalisation, often used LC-MS derived metabolomics data. TIC_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, TIC normalisation used small number features (= metabolites), since TIC assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter MVI refers Missing Value Imputation (MVI) MVI = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter HotellinsConfidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations TIC part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.   Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed. Importantly, able specify CoRe experiment setting parameter CoRe=TRUE, case additional data processing steps applied:1. Blank sample: refers media samples cells cultured , used blank. detail, mean blank sample feature (= metabolite) substracted values measured sample feature. column “Condition” Experimental_design DF, need label blank samples “blank”.2. Growth factor growth rate: refers different conditions either based cell count protein quantification start experiment (t0) end experiment (t1) resulting growth factor (t1/t0). Otherwise, one can experimentally estimate growth rate condition. Ultimately, measure used normalize data, since amount growth impact consumption release metabolites media hence need account . information, set 1, yet aware may affect results. can pass additional information via parameter Input_SettingsInfo, passing column name CoRe_norm_factor Input_SettingsFile condition name CoRe_media Input_data file.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition HK2 CCM, can see based Hotellin’s T2 test, samples detected outliers first second round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see VizPCA() function. proceed, remove outlier: metabolomics, sometimes samples injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function ReplicateSum(), summarize save results.","code":"Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = Media[,-c(1:3)],                                                     SettingsFile_Sample = Media[,1:3],                                                     SettingsInfo = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                     CutoffCV = 100)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Bin width defaults to 1/30 of the range of the data. Pick better value with #> `binwidth`. #Prepare the input: Media_input <- Media%>%   subset(!Conditions==\"Pool\", select = -c(1:3))#remove pool samples and remove the information columns  Media_Metadata <- Media%>%   subset(!Conditions==\"Pool\", select = c(1:3))#remove pool samples and keep the information columns only  PreProcessing_res <-  MetaProViz::PreProcessing(InputData=Media_input,                                                 SettingsFile_Sample =Media_Metadata,                                                 SettingsInfo = c(Conditions = \"Conditions\",                                                                        Biological_Replicates = \"Biological_Replicates\",                                                                        CoRe_norm_factor = \"GrowthFactor\",                                                                        CoRe_media = \"blank\"),                                                 FeatureFilt = \"Modified\",                                                 FeatureFilt_Value = 0.8,                                                 TIC = TRUE,# As we have raw data we will perform total ion count norm                                                 MVI=TRUE, #We assume the values are not missing at random and perform half minimum MVI                                                 MVI_Percentage=50,                                                 HotellinsConfidence = 0.99,# We perform outlier testing using 0.99 confidence interval                                                 CoRe = TRUE)   # Now we can have a look at the results table: Media_Preprocessed <-  PreProcessing_res[[\"DF\"]][[\"Preprocessing_output\"]] #> For Consumption Release experiment we are using the method from Jain M.  REF: Jain et. al, (2012), Science 336(6084):1040-4, doi: 10.1126/science.1218595. #> Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values. REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004) #> filtering value selected: 0.8 #> 3 metabolites where removed: N-acetylaspartylglutamate, hypotaurine, S-(2-succinyl)cysteine #> Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> NA values were found in Control_media samples for metabolites. For metabolites including NAs MVI is performed unless all samples of a metabolite are NA. #> Metabolites with high NA load (>20%) in Control_media samples are: dihydroorotate. #> Metabolites with only NAs (=100%) in Control_media samples are: hydroxyphenylpyruvate. Those NAs are set zero as we consider them true zeros #> Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> CoRe data are normalised by substracting mean (blank) from each sample and multiplying with the CoRe_norm_factor #> Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360–378, doi:https://doi.org/10.1214/aoms/1177732979. #> HotellinsConfidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round 1 Outlier Samples: MS51-06 #> Filtering round 2 Outlier Samples: MS51-09 Media_Preprocessed <-Media_Preprocessed%>%   subset(!Outliers==\"Outlier_filtering_round_1\")"},{"path":"/articles/CoRe Metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"CoRe Metabolomics","text":"Differential Metabolite Analysis (DMA) two conditions (e.g. Tumour versus Healthy) usually calculates Log2FC, p-value, adjusted p-value t-value. Yet, CoRe experiment normalized metabolite values can either negative value, metabolite consumed media, positive value, metabolite released cell culture media. Since can calculate Log2FC using negative values, calculate absolute difference mean Condition 1 versus mean Condition 2. absolute difference log2 transformed order make values comparable different metabolites, resulting Log2Dist. result doesn’t consider whether one product larger ; looks magnitude difference. reflect direction change two conditions multiply -1 C1 < C2. setting paramteter CoRe = TRUE, instead calclulating Log2FC, Log2 Distance calculated. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior DMA. Moreover, require Input_SettingsFile_Sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_SettingsFile_Metab containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_SettingsInfo parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) input use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values information conditions compared (even though recommend normalize data remove outliers prior DMA). example data seven different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A, 786-O, OSRC2, OSLM1B RFX631) hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview DMA results comparison 786-M1A versus HK2 cells. Using DMA results, can now use MetaProViz visualization module generate customized Volcano plots VizVolcano(). can see examples .","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <-  MetaProViz::DMA(InputData=Media_Preprocessed[,-c(1:6)],                                SettingsFile_Sample=Media_Preprocessed[,c(1:4)],                                SettingsInfo = c(Conditions=\"Conditions\", Numerator=NULL, Denominator = \"HK2\"),                                StatPval =\"aov\",                                StatPadj=\"fdr\",                                SettingsFile_Metab = MappingInfo,                                 CoRe=TRUE)  #Inspect the DMA results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]] Shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition HK2 82.35 % of the metabolites follow a normal distribution and 17.65 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.71 % of the metabolites follow a normal distribution and 4.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M1A 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 88.57 % of the metabolites follow a normal distribution and 11.43 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSRC2 92.86 % of the metabolites follow a normal distribution and 7.14 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition OSLM1B 85.71 % of the metabolites follow a normal distribution and 14.29 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition RFX631 97.14 % of the metabolites follow a normal distribution and 2.86 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 67.65% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov."},{"path":"/articles/CoRe Metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > DMA","what":"ORA using the DMA results","title":"CoRe Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. Given CoRe data important consider weather metabolite consumed released, sensible perform ORA metabolite cluster. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites. interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA DMA results, ensure metabolite names match KEGG IDs KEGG trivial names. general, PathwayFile requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells focusing pathways enriched consumed metabolites.","code":"#Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"DMA\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.    DMA <- DMA_Annova[[\"DMA\"]][[comparison]]   DMA <- DMA[complete.cases(DMA),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway     remove_rownames()%>%     column_to_rownames(\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways      #Perform ORA: Here we use    DM_ORA_res[[comparison]] <- MetaProViz::ClusterORA(InputData=DMA,                                                      SettingsInfo=c(ClusterColumn=\"CoRe_specific\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                      RemoveBackground=FALSE,#we do not have any background                                                      PathwayFile=KEGG_Pathways,                                                      PathwayName=\"KEGG\",                                                      minGSSize=3,                                                      maxGSSize=1000) } #> Number of metabolites in cluster `Released in 786-M1A and Consumed HK2`: 10 #>  #> Number of metabolites in cluster `Consumed in 786-M1A  and Released HK2`: 25 #> Number of metabolites in cluster `Consumed`: 16 #> Number of metabolites in cluster `Released`: 8 #> Number of metabolites in cluster `Released in 786-M2A and Consumed HK2`: 10 #> Number of metabolites in cluster `Consumed in 786-M2A  and Released HK2`: 23 #> Number of metabolites in cluster `Consumed`: 16 #> Number of metabolites in cluster `Released`: 10 #> Number of metabolites in cluster `Consumed`: 14 #> Number of metabolites in cluster `Released in 786-O and Consumed HK2`: 12 #> Number of metabolites in cluster `Consumed in 786-O  and Released HK2`: 24 #> Number of metabolites in cluster `Released`: 9 #> Number of metabolites in cluster `Consumed`: 16 #> Number of metabolites in cluster `Consumed in OSLM1B  and Released HK2`: 14 #> Number of metabolites in cluster `Released in OSLM1B and Consumed HK2`: 10 #> Number of metabolites in cluster `Released`: 19 #> Number of metabolites in cluster `Released in OSRC2 and Consumed HK2`: 9 #> Number of metabolites in cluster `Consumed`: 17 #> Number of metabolites in cluster `Consumed in OSRC2  and Released HK2`: 21 #> Number of metabolites in cluster `Released`: 12 #> Number of metabolites in cluster `Released in RFX631 and Consumed HK2`: 8 #> Number of metabolites in cluster `Consumed`: 18 #> Number of metabolites in cluster `Released`: 10 #> Number of metabolites in cluster `Consumed in RFX631  and Released HK2`: 23  #Lets check how the results look like: MC_ORA_786M1A_vs_HK2_Consumed <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"DF\"]][[\"Consumed\"]]"},{"path":"/articles/CoRe Metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"CoRe Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/CoRe Metabolomics.html","id":"mca_core","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MCA_CoRe","title":"CoRe Metabolomics","text":"metabolite clustering method based logical regulatory rules sort metabolites metabolite clusters. additionally need intracellular samples corresponding CoRe samples. define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. Lastly, also take account CoRe direction, meaning metabolite : 1. “Released”, means released media conditions underlying comparison. 2. “Consumed”, means consumed media conditions underlying comparison. 3. “Released/Consumed”, means consumed/released one condition, whilst opposite occurs second condition underlying comparison. 4. “Detected”, means metabolite detected underlying comparison. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons (Intracellular CoRe), can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods backgroundMethod following 1.1. - 1.4. restrictive least restrictive:1.1. Intra&CoRe: stringend background setting lead small number metabolites.1.2. CoRe: Focus metabolite abundance CoRe.1.3. Intra: Focus metabolite abundance intracellular.1.4. Intra|CoRe: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “Core_UP”. three 6-state6-state4 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). order define group metabolite assigned , set two different thresholds. intracellular based differential metabolite abundance (Log2FC) significance (e.g. p.adj). CoRe data based Log2 Distance significance (e.g. p.adj). Log2FC recommend threshold 0.5 1, whilst Log2 Distance one check distance ranges base threhold . Regulatory rules: Metabolite Clustering Analysis: CoRe. Now can load corresponding pre-processed intracellular example data comparison 786M-1A versus HK2 (detailed pre-processing please see vignette “Standard Metabolomics”). MetaProViz::MCA_CoRe comparison 786-M1A versus HK2 cells intracellular CoRe samples. MetaProViz::MCA_CoRe Summary number metabolites per cluster.","code":"#Example of all possible flows: MCA_CORE <- MetaProViz::MCA_rules(Method=\"CoRe\") #Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2<- MetaProViz::ToyData(Data=\"IntraCells_DMA\")  #Perform metabolite clustering: MCA_CoRe_res <- MetaProViz::MCA_CoRe(InputData_Intra =Intra_DMA_786M1A_vs_HK2%>%rownames_to_column(\"Metabolite\") ,                                      InputData_CoRe = DMA_786M1A_vs_HK2,                                      SettingsInfo_Intra=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                      SettingsInfo_CoRe=c(DirectionCol=\"CoRe\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=28),                                      FeatureID= \"Metabolite\",                                      BackgroundMethod=\"Intra&CoRe\",                                      FolderPath=NULL)  #Lets check how the results look like: MCA_res <- MCA_CoRe_res[[\"MCA_CoRe_Results\"]] ClusterSummary <- MCA_CoRe_res[[\"MCA_CoRe_Summary\"]]"},{"path":"/articles/CoRe Metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"CoRe Metabolomics","text":"Pathway Input MetaProViz::MC_ORA. MetaProViz::MC_ORA results RG2_Significant cluster Both_UP (Released). see pathways low amount genes included also part cluster pathways significant. due multiple factors, first start small number metabolites KEGG IDs secondly included metabolites detected , intracellular CoRe samples (parameter backgroundMethod=\"Intra&CoRe\"). Hence, example setting parameter backgroundMethod=\"Intra|CoRe\", obtain larger metabolite clusters.","code":"MC_ORA_result<- MetaProViz::ClusterORA(InputData=MCA_CoRe_res[[\"MCA_CoRe_Results\"]]%>%column_to_rownames(\"Metabolite\"),                                        SettingsInfo=c(ClusterColumn=\"RG2_Significant\",                                                          BackgroundColumn=\"BG_Method\",                                                          PathwayTerm= \"Pathway\", #This is the column name including the pathways names                                                         PathwayFeature= \"Metabolite\"),                                        RemoveBackground=TRUE,                                        PathwayFile=MappingInfo%>%rownames_to_column(\"Metabolite\"),                                        PathwayName=\"KEGG\",                                        minGSSize=3,                                        maxGSSize=1000 ,                                        SaveAs_Table= \"csv\") #> Number of metabolites in cluster `None`: 22 #> Number of metabolites in cluster `Both_UP (Released/Consumed)`: 1 #> Number of metabolites in cluster `Both_DOWN (Released/Consumed)`: 9 #> Number of metabolites in cluster `Opposite (Consumed DOWN)`: 2 #> Number of metabolites in cluster `Opposite (Released/Consumed UP)`: 2 #> Number of metabolites in cluster `Both_UP (Released)`: 1 #> Number of metabolites in cluster `CoRe_DOWN (Released/Consumed)`: 4 #> Number of metabolites in cluster `CoRe_UP (Released)`: 2 #> Number of metabolites in cluster `CoRe_DOWN (Consumed)`: 1 #> Number of metabolites in cluster `Both_DOWN (Consumed)`: 3 #> Number of metabolites in cluster `CoRe_UP (Released/Consumed)`: 1 #> No gene sets have size between 3 and 1000 ... #> --> return NULL... #> None of the Input_data Metabolites of the cluster CoRe_UP (Released/Consumed) were present in any terms of the PathwayFile. Hence the ClusterGoSummary ouput will be empty for this cluster. Please check that the metabolite IDs match the pathway IDs.  #Lets check how the results look like: Both_UP_Released <- MC_ORA_result[[\"DF\"]][[\"Both_UP (Released)\"]]"},{"path":"/articles/CoRe Metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"CoRe Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_SettingsInfo user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_SettingsFile_Sample Plot_SettingsFile_Metab. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Media_Preprocessed[,c(1:2)]%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-MappingInfo"},{"path":"/articles/CoRe Metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"CoRe Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::VizPCA(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Given biological replicates numeric, can also set color_scale continuous: Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . Figure: samples cluster Cell status?","code":"Input_PCA <- Media_Preprocessed[,-c(1:4)] #remove columns that include Metadata such as cell type,... MetaProViz::VizPCA(InputData=Input_PCA) MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Batch Effect\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    ColorScale = \"continuous\",                    PlotName = \"Batch Effect (continuous color scale)\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Sample Conditions\") MetaProViz::VizPCA(SettingsInfo=  c(color=\"Status\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Sample Status\")"},{"path":"/articles/CoRe Metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"CoRe Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizHeatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_FeatureNames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_SettingsInfo. time can still maintain metadata information , samples metabolites. Together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster Core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.  can also choose make individual plots Sample Metadata using individual_Sample (e.g. patients may want plot male female separately). Moreover, can also use time.","code":"Input_Heatmap <-   Media_Preprocessed[,-c(1:4)] #remove columns that include Metadata such as cell type,... MetaProViz::VizHeatmap(InputData = Input_Heatmap,                         PlotName = \"Overview\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Status\")),                        PlotName = \"Colour Samples\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Metab = list(\"Pathway\")),                        SettingsFile_Metab =  MappingInfo,                         PlotName = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::VizHeatmap(InputData = Input_Heatmap,                         SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"Pathway\")),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName = \"Pathway\")"},{"path":"/articles/CoRe Metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"CoRe Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizSuperplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).  Now, instance prefer boxplots bargraphs can simply change parameter PlotType:  can also change violin plots:","code":"Input_Superplot <-  Media_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Bar\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Box\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Violin\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\", \"OSRC2\", \"OSLM1B\", \"RFX631\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/CoRe Metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"CoRe Metabolomics","text":"Input_data MetaProViz::VizVolcano() example differential analysis results MetaProViz::DMA().","code":""},{"path":"/articles/CoRe Metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"CoRe Metabolomics","text":"first look results differential analysis (see section DMA ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying DMA results. seek plot metabolite names can change paramter SelectLab default (SelectLab=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying DMA results. parameter SelectLab can also pass vector Metabolite names labeled: Figure: Standard figure displaying DMA results. explained , analyzing CoRe data important take account metabolite consumed released. can use information colour code shape metabolites plot. need add information Metadata_Metabolite file: Metadata table including additional information Metabolites. Now can make different plots: Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. course, may also want individual plot consumption/release metabolites. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Figure: Standard figure displaying DMA results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_SettingsInfo information (color) used Input_data. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters.","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\") # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        SelectLab = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        SelectLab = c(\"histidine\", \"phenylalanine\", \"lactate\")) # colour for consumption and release: For this we need to add this information into the Metadata_Metabolite file MetaData_Metab <- merge(MappingInfo%>%rownames_to_column(\"Metabolite\"), DMA_786M1A_vs_HK2[,c(1,5:6)], by=\"Metabolite\", all.y=TRUE)%>%   column_to_rownames(\"Metabolite\") #Now we need to add our Plot_SettingsFile and the Plot_SettingsInfo: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"CoRe_specific\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour coded for consumption/release\" ) #If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_SettingsInfo MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape for consumption/release, color for significance.\" ) #Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"CoRe_specific\", color=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape and color for consumption/release.\" ) #individual plot for each metabolite behaviour: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(individual=\"CoRe\", shape=\"CoRe_specific\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA.\" ) #Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(individual=\"CoRe\", shape=\"CoRe_specific\", color=\"Pathway\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA.\" )"},{"path":"/articles/CoRe Metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"CoRe Metabolomics","text":"parameter Plot_Settings=\"Compare\" helpful performed multiple comparisons seek compare two one plot: Figure: Comparison. course option use shape color customize graph well make individual plots: Figure: Comparison. Now individual plots :","code":"#Make the plot MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) #Make the plot MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(color=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(individual=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        x= \"Log2(Distance)\",                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" )"},{"path":"/articles/CoRe Metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"CoRe Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. can example use results ORA performed differential expression results. Indeed DMA_786M1A_vs_HK2 performed ORA cluster (consumed, released, consumed/released). , plot ORA results metabolites released conditions, HK2 786-M1A.","code":"#Prepare the Input: #1. InputData=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file SettingsFile_Metab.  InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   column_to_rownames(\"KEGGCompound\")  #2. InputData2=Pathway analysis output: Must have same column names as SettingsFile_Metab for Pathway name InputPEA2 <- MC_ORA_786M1A_vs_HK2_Consumed %>%   dplyr::rename(\"term\"=\"ID\")  #3. SettingsFile_Metab= Pathways used for pathway analysis: Must have same column names as SettingsFile_Metab for Pathway name and feature names need to match features in the InputData. PEA_Feature passes this column name! MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"Metabolite\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        InputData= InputPEA, #Must be the data you have used as an input for the pathway analysis                        InputData2= InputPEA2, #Must be the results of the pathway analysis                        x= \"Log2(Distance)\",                        PlotName= \"KEGG\",                        Subtitle= \"PEA\" ,                        SelectLab = NULL)"},{"path":"/articles/CoRe Metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"CoRe Metabolomics","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.1 (2024-06-14 ucrt) #>  os       Windows 10 x64 (build 19045) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United Kingdom.utf8 #>  ctype    English_United Kingdom.utf8 #>  tz       Europe/Berlin #>  date     2024-10-02 #>  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package          * version   date (UTC) lib source #>  abind              1.4-8     2024-09-12 [1] CRAN (R 4.4.1) #>  AnnotationDbi      1.66.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  ape                5.8       2024-04-11 [1] CRAN (R 4.4.1) #>  aplot              0.2.3     2024-06-17 [1] CRAN (R 4.4.1) #>  backports          1.5.0     2024-05-23 [1] CRAN (R 4.4.0) #>  beeswarm           0.4.0     2021-06-01 [1] CRAN (R 4.4.0) #>  Biobase            2.64.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  BiocGenerics       0.50.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  BiocParallel       1.38.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  Biostrings         2.72.1    2024-06-02 [1] Bioconductor 3.19 (R 4.4.0) #>  bit                4.5.0     2024-09-20 [1] CRAN (R 4.4.1) #>  bit64              4.5.2     2024-09-22 [1] CRAN (R 4.4.1) #>  blob               1.2.4     2023-03-17 [1] CRAN (R 4.4.1) #>  broom              1.0.7     2024-09-26 [1] CRAN (R 4.4.1) #>  bslib              0.8.0     2024-07-29 [1] CRAN (R 4.4.1) #>  cachem             1.1.0     2024-05-16 [1] CRAN (R 4.4.1) #>  car                3.1-3     2024-09-27 [1] CRAN (R 4.4.1) #>  carData            3.0-5     2022-01-06 [1] CRAN (R 4.4.1) #>  cellranger         1.1.0     2016-07-27 [1] CRAN (R 4.4.1) #>  checkmate          2.3.2     2024-07-29 [1] CRAN (R 4.4.1) #>  cli                3.6.3     2024-06-21 [1] CRAN (R 4.4.1) #>  clusterProfiler    4.12.6    2024-08-25 [1] Bioconductor 3.19 (R 4.4.1) #>  codetools          0.2-20    2024-03-31 [2] CRAN (R 4.4.1) #>  colorspace         2.1-1     2024-07-26 [1] CRAN (R 4.4.1) #>  cowplot            1.1.3     2024-01-22 [1] CRAN (R 4.4.1) #>  crayon             1.5.3     2024-06-20 [1] CRAN (R 4.4.1) #>  curl               5.2.3     2024-09-20 [1] CRAN (R 4.4.1) #>  data.table         1.16.0    2024-08-27 [1] CRAN (R 4.4.1) #>  DBI                1.2.3     2024-06-02 [1] CRAN (R 4.4.1) #>  desc               1.4.3     2023-12-10 [1] CRAN (R 4.4.1) #>  digest             0.6.37    2024-08-19 [1] CRAN (R 4.4.1) #>  DOSE               3.30.5    2024-09-01 [1] Bioconductor 3.19 (R 4.4.1) #>  dplyr            * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1) #>  EnhancedVolcano    1.22.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  enrichplot         1.24.4    2024-09-01 [1] Bioconductor 3.19 (R 4.4.1) #>  evaluate           1.0.0     2024-09-17 [1] CRAN (R 4.4.1) #>  factoextra         1.0.7     2020-04-01 [1] CRAN (R 4.4.1) #>  fansi              1.0.6     2023-12-08 [1] CRAN (R 4.4.1) #>  farver             2.1.2     2024-05-13 [1] CRAN (R 4.4.1) #>  fastmap            1.2.0     2024-05-15 [1] CRAN (R 4.4.1) #>  fastmatch          1.1-4     2023-08-18 [1] CRAN (R 4.4.0) #>  fgsea              1.30.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  forcats          * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1) #>  Formula            1.2-5     2023-02-24 [1] CRAN (R 4.4.0) #>  fs                 1.6.4     2024-04-25 [1] CRAN (R 4.4.1) #>  generics           0.1.3     2022-07-05 [1] CRAN (R 4.4.1) #>  GenomeInfoDb       1.40.1    2024-06-16 [1] Bioconductor 3.19 (R 4.4.0) #>  GenomeInfoDbData   1.2.12    2024-09-27 [1] Bioconductor #>  ggbeeswarm         0.7.2     2023-04-29 [1] CRAN (R 4.4.1) #>  ggforce            0.4.2     2024-02-19 [1] CRAN (R 4.4.1) #>  ggfortify        * 0.4.17    2024-04-17 [1] CRAN (R 4.4.1) #>  ggfun              0.1.6     2024-08-28 [1] CRAN (R 4.4.1) #>  ggplot2          * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1) #>  ggplotify          0.1.2     2023-08-09 [1] CRAN (R 4.4.1) #>  ggpubr             0.6.0     2023-02-10 [1] CRAN (R 4.4.1) #>  ggraph             2.2.1     2024-03-07 [1] CRAN (R 4.4.1) #>  ggrepel            0.9.6     2024-09-07 [1] CRAN (R 4.4.1) #>  ggsignif           0.6.4     2022-10-13 [1] CRAN (R 4.4.1) #>  ggtree             3.12.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  glue               1.7.0     2024-01-09 [1] CRAN (R 4.4.1) #>  GO.db              3.19.1    2024-09-27 [1] Bioconductor #>  GOSemSim           2.30.2    2024-08-21 [1] Bioconductor 3.19 (R 4.4.1) #>  graphlayouts       1.2.0     2024-09-24 [1] CRAN (R 4.4.1) #>  gridExtra          2.3       2017-09-09 [1] CRAN (R 4.4.1) #>  gridGraphics       0.5-1     2020-12-13 [1] CRAN (R 4.4.1) #>  gson               0.1.0     2023-03-07 [1] CRAN (R 4.4.1) #>  gtable             0.3.5     2024-04-22 [1] CRAN (R 4.4.1) #>  hash               2.2.6.3   2023-08-19 [1] CRAN (R 4.4.1) #>  highr              0.11      2024-05-26 [1] CRAN (R 4.4.1) #>  hms                1.1.3     2023-03-21 [1] CRAN (R 4.4.1) #>  htmltools          0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1) #>  htmlwidgets        1.6.4     2023-12-06 [1] CRAN (R 4.4.1) #>  httr               1.4.7     2023-08-15 [1] CRAN (R 4.4.1) #>  httr2              1.0.5     2024-09-26 [1] CRAN (R 4.4.1) #>  igraph             2.0.3     2024-03-13 [1] CRAN (R 4.4.1) #>  inflection         1.3.6     2022-06-15 [1] CRAN (R 4.4.1) #>  IRanges            2.38.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1) #>  jquerylib          0.1.4     2021-04-26 [1] CRAN (R 4.4.1) #>  jsonlite           1.8.9     2024-09-20 [1] CRAN (R 4.4.1) #>  kableExtra         1.4.0     2024-01-24 [1] CRAN (R 4.4.1) #>  KEGGREST           1.44.1    2024-06-19 [1] Bioconductor 3.19 (R 4.4.0) #>  knitr              1.48      2024-07-07 [1] CRAN (R 4.4.1) #>  labeling           0.4.3     2023-08-29 [1] CRAN (R 4.4.0) #>  later              1.3.2     2023-12-06 [1] CRAN (R 4.4.1) #>  lattice            0.22-6    2024-03-20 [2] CRAN (R 4.4.1) #>  lazyeval           0.2.2     2019-03-15 [1] CRAN (R 4.4.1) #>  lifecycle          1.0.4     2023-11-07 [1] CRAN (R 4.4.1) #>  logger             0.3.0     2024-03-05 [1] CRAN (R 4.4.1) #>  lubridate        * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1) #>  magrittr         * 2.0.3     2022-03-30 [1] CRAN (R 4.4.1) #>  MASS               7.3-60.2  2024-04-26 [2] CRAN (R 4.4.1) #>  Matrix             1.7-0     2024-04-26 [2] CRAN (R 4.4.1) #>  memoise            2.0.1     2021-11-26 [1] CRAN (R 4.4.1) #>  MetaProViz       * 2.1.0     2024-10-02 [1] Github (saezlab/MetaProViz@9a49669) #>  munsell            0.5.1     2024-04-01 [1] CRAN (R 4.4.1) #>  nlme               3.1-164   2023-11-27 [2] CRAN (R 4.4.1) #>  OmnipathR          3.13.26   2024-10-02 [1] Github (saezlab/OmnipathR@662c4c8) #>  patchwork          1.3.0     2024-09-16 [1] CRAN (R 4.4.1) #>  pheatmap           1.0.12    2019-01-04 [1] CRAN (R 4.4.1) #>  pillar             1.9.0     2023-03-22 [1] CRAN (R 4.4.1) #>  pkgconfig          2.0.3     2019-09-22 [1] CRAN (R 4.4.1) #>  pkgdown            2.1.1     2024-09-17 [1] CRAN (R 4.4.1) #>  plyr               1.8.9     2023-10-02 [1] CRAN (R 4.4.1) #>  png                0.1-8     2022-11-29 [1] CRAN (R 4.4.0) #>  polyclip           1.10-7    2024-07-23 [1] CRAN (R 4.4.1) #>  prettyunits        1.2.0     2023-09-24 [1] CRAN (R 4.4.1) #>  progress           1.2.3     2023-12-06 [1] CRAN (R 4.4.1) #>  purrr            * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1) #>  qcc                2.7       2017-07-11 [1] CRAN (R 4.4.1) #>  qvalue             2.36.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  R.methodsS3        1.8.2     2022-06-13 [1] CRAN (R 4.4.0) #>  R.oo               1.26.0    2024-01-24 [1] CRAN (R 4.4.0) #>  R.utils            2.12.3    2023-11-18 [1] CRAN (R 4.4.1) #>  R6                 2.5.1     2021-08-19 [1] CRAN (R 4.4.1) #>  ragg               1.3.3     2024-09-11 [1] CRAN (R 4.4.1) #>  rappdirs           0.3.3     2021-01-31 [1] CRAN (R 4.4.1) #>  RColorBrewer       1.1-3     2022-04-03 [1] CRAN (R 4.4.0) #>  Rcpp               1.0.13    2024-07-17 [1] CRAN (R 4.4.1) #>  readr            * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1) #>  readxl             1.4.3     2023-07-06 [1] CRAN (R 4.4.1) #>  reshape2           1.4.4     2020-04-09 [1] CRAN (R 4.4.1) #>  rlang            * 1.1.4     2024-06-04 [1] CRAN (R 4.4.1) #>  rmarkdown          2.28      2024-08-17 [1] CRAN (R 4.4.1) #>  RSQLite            2.3.7     2024-05-27 [1] CRAN (R 4.4.1) #>  rstatix            0.7.2     2023-02-01 [1] CRAN (R 4.4.1) #>  rstudioapi         0.16.0    2024-03-24 [1] CRAN (R 4.4.1) #>  rvest              1.0.4     2024-02-12 [1] CRAN (R 4.4.1) #>  S4Vectors          0.42.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1) #>  sass               0.4.9     2024-03-15 [1] CRAN (R 4.4.1) #>  scales             1.3.0     2023-11-28 [1] CRAN (R 4.4.1) #>  scatterpie         0.2.4     2024-08-28 [1] CRAN (R 4.4.1) #>  sessioninfo        1.2.2     2021-12-06 [1] CRAN (R 4.4.1) #>  shadowtext         0.1.4     2024-07-18 [1] CRAN (R 4.4.1) #>  stringi            1.8.4     2024-05-06 [1] CRAN (R 4.4.0) #>  stringr          * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1) #>  svglite            2.1.3     2023-12-08 [1] CRAN (R 4.4.1) #>  systemfonts        1.1.0     2024-05-15 [1] CRAN (R 4.4.1) #>  textshaping        0.4.0     2024-05-24 [1] CRAN (R 4.4.1) #>  tibble           * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1) #>  tidygraph          1.3.1     2024-01-30 [1] CRAN (R 4.4.1) #>  tidyr            * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1) #>  tidyselect         1.2.1     2024-03-11 [1] CRAN (R 4.4.1) #>  tidytree           0.4.6     2023-12-12 [1] CRAN (R 4.4.1) #>  tidyverse        * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1) #>  timechange         0.3.0     2024-01-18 [1] CRAN (R 4.4.1) #>  treeio             1.28.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  tweenr             2.0.3     2024-02-26 [1] CRAN (R 4.4.1) #>  tzdb               0.4.0     2023-05-12 [1] CRAN (R 4.4.1) #>  UCSC.utils         1.0.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  utf8               1.2.4     2023-10-22 [1] CRAN (R 4.4.1) #>  vctrs              0.6.5     2023-12-01 [1] CRAN (R 4.4.1) #>  vipor              0.4.7     2023-12-18 [1] CRAN (R 4.4.1) #>  viridis            0.6.5     2024-01-29 [1] CRAN (R 4.4.1) #>  viridisLite        0.4.2     2023-05-02 [1] CRAN (R 4.4.1) #>  vroom              1.6.5     2023-12-05 [1] CRAN (R 4.4.1) #>  withr              3.0.1     2024-07-31 [1] CRAN (R 4.4.1) #>  xfun               0.47      2024-08-17 [1] CRAN (R 4.4.1) #>  XML                3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1) #>  xml2               1.3.6     2023-12-04 [1] CRAN (R 4.4.1) #>  XVector            0.44.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  yaml               2.3.10    2024-07-26 [1] CRAN (R 4.4.1) #>  yulab.utils        0.1.7     2024-08-26 [1] CRAN (R 4.4.1) #>  zip                2.3.1     2024-01-27 [1] CRAN (R 4.4.1) #>  zlibbioc           1.50.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  #>  [1] C:/Users/chris/AppData/Local/R/win-library/4.4 #>  [2] C:/Program Files/R/R-4.4.1/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":"/articles/EnrichmentAnalysis.html","id":"section","dir":"Articles","previous_headings":"","what":"Enrichment Analysis","title":"Enrichment Analysis","text":"tutorial showcase use MetaProViz: - access metabolite prior knowledge. - deal many--many mapping metabolite identifiers. - perform pathway enrichment analysis. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS).  # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\") #BiocManager::install(\"cosmosR\")"},{"path":"/articles/EnrichmentAnalysis.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Enrichment Analysis","text":"part MetaProViz package can load example data global environment using function toy_data():1.Cell line experiment (CellLine) choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. performed pre-processing differential analysis (details can found vignette vignette Standard Metabolomics) load differential metabolite analysis results comparison 786M-1A versus HK2. 2. Tissue experiment (Tissue) chose publicly available data paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. performed differential analysis (details can found vignette Metadata Analysis) load differential metabolite analysis results comparison Tumour versus Normal.","code":"#Load the Pre-processed intracellular data: Intra_DMA_786M1A_vs_HK2<- MetaProViz::ToyData(Data=\"IntraCells_DMA\") # Load the example data: Tissue_TvsN <- MetaProViz::ToyData(Data=\"Tissue_DMA\") Tissue_TvsN_Old <- MetaProViz::ToyData(Data=\"Tissue_DMA_Old\") Tissue_TvsN_Young <- MetaProViz::ToyData(Data=\"Tissue_DMA_Young\")"},{"path":"/articles/EnrichmentAnalysis.html","id":"accessing-prior-knowledge","dir":"Articles","previous_headings":"","what":"2. Accessing Prior Knowledge","title":"Enrichment Analysis","text":"Metabolite prior knowledge (PK) essential interpretation metabolomics data. can used perform pathway enrichment analysis, compound class enrichment analysis, using specific PK databases, can used study connection metabolites receptors transporters.Since quality content PK dictate success downstream analysis biological interpretation, important ensure PK used correctly. Specifically metabolite PK, many different PK databases resources pose several issues. Indeed, metabolite identifiers (e.g. KEGG, HMDB, PubChem, etc.) standardized across databases, metabolite can multiple identifiers different databases. known many--many mapping problem. Moreover, metabolic pathways basis PK databases also includes co-factors ions small molecules part reactions, can also detected experimentallly acquired data (e.g. H2O, CO2, etc).","code":""},{"path":"/articles/EnrichmentAnalysis.html","id":"kegg-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"KEGG pathway-metabolite sets","title":"Enrichment Analysis","text":"KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways)  Preview DF KEGG_Pathways.","code":"#This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG() #> Cached file loaded from: C:\\Users\\chris\\AppData\\Local/Cache/KEGG_Metabolite.rds"},{"path":"/articles/EnrichmentAnalysis.html","id":"create-pathway-metabolite-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"Create pathway-metabolite sets","title":"Enrichment Analysis","text":"function Make_GeneMetabSet can used translate gene names metabolite names using PK network metabolic reactions calls CosmosR (Dugourd et al. 2021). function useful want perform pathway enrichment analysis available gene-sets Hallmarks gene-sets MSigDB (Castanza et al. 2022). Moreover, enables perform combined pathway enrichment analysis metabolite-gene sets, data types proteomics measuring enzymes expression. Hallmarks gene-set available package MetaProViz can loaded using function LoadHallmarks(). Preview DF Hallmarks_Pathways including gene-sets usable pathway enrichment analysis. Now can use function Make_GeneMetabSet translate gene names metabolite names. Preview DF Hallmarks_GeneMetab including gene-sets usable pathway enrichment analysis. Given gene-metabolite-sets, can now also run enrichment analysis combined data types, including metabolite Log2FC one including gene Log2FC e.g. transcriptomics proteomics data. Yet, important keep mind generally detect less metabolites genes hence may bias results obtained combined enrichment analysis.","code":"#Load the example data: MetaProViz::LoadHallmarks() #Translate gene names to metabolite names Hallmarks_GeneMetab <- MetaProViz::Make_GeneMetabSet(Input_GeneSet=Hallmark_Pathways,                                                      SettingsInfo=c(Target=\"gene\"),                                                      PKName=\"Hallmarks\")"},{"path":"/articles/EnrichmentAnalysis.html","id":"metalinksdb-metabolite-receptor-sets","dir":"Articles","previous_headings":"2. Accessing Prior Knowledge","what":"MetaLinksDB Metabolite-receptor sets","title":"Enrichment Analysis","text":"MetaLinks database manually curated database metabolite-receptor metabolite-transporter sets can used study connection metabolites receptors transporters (Farr et al. 2024). Preview DF MetaLinksDB including metabolite-receptor sets. Preview DF MetaLinksDB_Type including metabolite-receptor metabolite-transporter sets.","code":"MetaLinksDB_Res <- MetaProViz::LoadMetalinks() #> Cached file loaded from: C:\\Users\\chris\\AppData\\Local/Cache/metalinks.db"},{"path":"/articles/EnrichmentAnalysis.html","id":"translate-ids","dir":"Articles","previous_headings":"","what":"3. Translate IDs","title":"Enrichment Analysis","text":"Warning: Translating IDs formats e.g. KEGG HMDB non-trivial task, possible one original ID link many translated IDs, vice versa. discuss InspectID subsection (TranslateID function run default). currently leave user discretion select appropriate ID based research question data.  visible prior knowledge tables , becomes clear require specific metabolite ID depending prior knowledge resource. Indeed, KEGG pathways include KEGG IDs, whilst Hallmarks metabolite sets include HMDB IDs. want convert ‘translate’ IDs another commonly used form ID, instance measured data uses another type ID, can make use MetaProViz::TranslateID() function. based OmniPathR RaMP DB (Braisted et al. 2023) backend function currently supports ID translation metabolites following formats: KEGG HMDB ChEBI PubChem simplest case, can use function like : Example 1--one translation KEGG_Pathways (besides HMDB) Using default translation settings single ID, can see receive back single PubChem ID ChEBI ID. However HMDB column two HMDBs associated (HMDB0001022, HMDB01022). case difference trivial due HMDB formatting conventions: longer version appears original HMDB ID format versus shorter concise version. avoid change settings remove HMDB completely, like : Example 1--one translation KEGG_Pathways (excluding HMDB)  keep just first item every translation changing `Method=‘GetFirst’` parameter like : Example 1--one translation KEGG_Pathways (using GetFirst method)  Ideally want smarter consistent way filter . However, important note translation process rarely straightforward one--one translation (least PubChem ChEBI IDs example). commonly, ID one format genuine one--many relationship format (e.g. one KEGG ID maps multiple HMDB IDs). Occasionally, also many--many relationship, IDs new format link back multiple IDs original format (e.g. two different KEGG IDs map multiple HMDS IDs, shared ). can inspect instances case data: Example 1--many translation KEGG_Pathways (besides HMDB)  example Orthophosphate metabolite (KEGG ID C00009) shows complexity one--many multi-mapping issue: single KEGG ID, returns: 4 different PubChem IDs 4 different ChEBI IDs 10 different HMDB IDs pathway analysis want keep one metabolite pathway. probably want keep metabolite choice across pathways, avoid ambiguous mapping much possible (many--many mapping), metabolite ID selection guided IDs might available us input data. brings us formally discuss important caveats standard TranslateID function, discuss now InspectID subsection.","code":"translated_ids_example <- TranslateID(KEGG_Pathways[39,])$Translated_DataFrame #> [1] \"Using method  GetAll\" #> [1] \"Converting from  kegg  to  pubchem\" #> [1] \"Converting from  kegg  to  chebi\" #> [1] \"Converting from  kegg  to  hmdb\" translated_ids_example <- TranslateID(KEGG_Pathways[39,],              SettingsInfo = list(IdColumn=\"MetaboliteID\",                                  FromFormat=c(\"kegg\"),                                  ToFormat=c(\"pubchem\",\"chebi\"),                                  Method=\"GetAll\",                                  GroupingVariable=\"term\"))$Translated_DataFrame #> [1] \"Using method  GetAll\" #> [1] \"Converting from  kegg  to  pubchem\" #> [1] \"Converting from  kegg  to  chebi\" translated_ids_example <- TranslateID(KEGG_Pathways[39,],              SettingsInfo = list(IdColumn=\"MetaboliteID\",                                  FromFormat=c(\"kegg\"),                                  ToFormat=c(\"pubchem\",\"chebi\", \"hmdb\"),                                  Method=\"GetFirst\",                                  GroupingVariable=\"term\"))$Translated_DataFrame #> [1] \"Using method  GetFirst\" #> [1] \"Converting from  kegg  to  pubchem\" #> WARNING: Only the first translated ID from <pubchem> will be returned for each unique ID from <kegg>. #> [1] \"Converting from  kegg  to  chebi\" #> WARNING: Only the first translated ID from <chebi> will be returned for each unique ID from <kegg>. #> [1] \"Converting from  kegg  to  hmdb\" #> WARNING: Only the first translated ID from <hmdb> will be returned for each unique ID from <kegg>. translated_ids_example <- KEGG_Pathways %>% filter(MetaboliteID == 'C00009') %>%    first() %>%   TranslateID() #> [1] \"Using method  GetAll\" #> [1] \"Converting from  kegg  to  pubchem\" #> [1] \"Converting from  kegg  to  chebi\" #> [1] \"Converting from  kegg  to  hmdb\" translated_ids_example_df <- translated_ids_example$Translated_DataFrame"},{"path":"/articles/EnrichmentAnalysis.html","id":"inspect-ids","dir":"Articles","previous_headings":"3. Translate IDs","what":"Inspect IDs","title":"Enrichment Analysis","text":"complexities Translating IDs discussed examples far, can demonstrated (Fig.2). InspectID function (included default running TranslateID) provides users summary relationships Original Translated IDs.  indicated Figure 2, relationships Original IDs (e.g. KEGG) Translated IDs (e.g. HMDB), can quite complex, resulting One--None/One/Many mappings. Furthermore, relationships Translated IDs (e.g. HMDB) Original IDs (e.g. KEGG) must also considered, Translated IDs also ambiguously map back multiple different Original IDs. complexities leave user decide IDs exactly wish keep, also influenced identifiers experimental results. However automatically provide summary information user, following two tables per Translated ID type: Mapping_Orig2Trans_XXX_to_YYY (e.g. Mapping_Orig2Trans_kegg_to_pubchem) Mapping_Trans2Orig_YYY_to_XXX (e.g. Mapping_Trans2Orig_pubchem_to_kegg) table provides summary either Original ID Translated IDs vice versa, counts number Pathways ID present , importantly number Original/Translated IDs mapped left-hand-side ID. summarised Relationship column, specified either: One--None : matches found ID. One--One : direct one--one relationship established either Original ID Translated ID, Translated ID Original ID. Note however imply reverse relationship true. See Figure 2. One--Many : multiple matches found ID. .e. ambiguously mapped.  tables automatically returned DataFrame List running TranslateID, can accessed accordingly. Note full translation 4 ID types, take 1 minute execute.  Finally, information summarised TranslationSummary table. TranslationSummary table KEGG_Pathways Note ordinarily, expect Trans2Orig tables One--None relationships, IDs already translated naturally Original ID source.","code":"translated_ids_example_full <- KEGG_Pathways %>% TranslateID() #> [1] \"Using method  GetAll\" #> [1] \"Converting from  kegg  to  pubchem\" #> [1] \"Converting from  kegg  to  chebi\" #> [1] \"Converting from  kegg  to  hmdb\" print(names(translated_ids_example_full)) #> [1] \"Translated_DataFrame\"               \"Mapping_Orig2Trans_kegg_to_pubchem\" #> [3] \"Mapping_Trans2Orig_pubchem_to_kegg\" \"Mapping_Orig2Trans_kegg_to_chebi\"   #> [5] \"Mapping_Trans2Orig_chebi_to_kegg\"   \"Mapping_Orig2Trans_kegg_to_hmdb\"    #> [7] \"Mapping_Trans2Orig_hmdb_to_kegg\"    \"TranslationSummary\" translated_ids_example_full$TranslationSummary #> # A tibble: 6 × 4 #>   Table                              `One-to-None` `One-to-One` `One-to-Many` #>   <chr>                                      <int>        <int>         <int> #> 1 Mapping_Orig2Trans_kegg_to_pubchem          1558         1245           555 #> 2 Mapping_Trans2Orig_pubchem_to_kegg             0         2871           153 #> 3 Mapping_Orig2Trans_kegg_to_chebi            1548          896           914 #> 4 Mapping_Trans2Orig_chebi_to_kegg               0         2980           112 #> 5 Mapping_Orig2Trans_kegg_to_hmdb             1567           83          1708 #> 6 Mapping_Trans2Orig_hmdb_to_kegg                0         5578           308"},{"path":"/articles/EnrichmentAnalysis.html","id":"run-enrichment-analysis","dir":"Articles","previous_headings":"","what":"4. Run enrichment analysis","title":"Enrichment Analysis","text":"two options: 1. Representation Analysis (ORA) determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test MetaProViz::ClusterORA. can applied clusters metabolites example results MetaProViz::MCA_2Cond() MetaProViz::CoRe() function. want details clustering methods please visit vignette Standard Metabolomics CoRe Metabolomics. 2. Enrichment analysis standard differential analysis results. offer ORA MetaProViz::StandardORA, many statistical tests can used enrichment analysis. full scope different methods beyond scope MetaProViz, available decoupleR (Badia--Mompel et al. 2022) packages group.","code":""},{"path":"/articles/EnrichmentAnalysis.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Enrichment Analysis","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.1 (2024-06-14 ucrt) #>  os       Windows 10 x64 (build 19045) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United Kingdom.utf8 #>  ctype    English_United Kingdom.utf8 #>  tz       Europe/Berlin #>  date     2024-10-02 #>  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package     * version   date (UTC) lib source #>  abind         1.4-8     2024-09-12 [1] CRAN (R 4.4.1) #>  backports     1.5.0     2024-05-23 [1] CRAN (R 4.4.0) #>  bit           4.5.0     2024-09-20 [1] CRAN (R 4.4.1) #>  bit64         4.5.2     2024-09-22 [1] CRAN (R 4.4.1) #>  blob          1.2.4     2023-03-17 [1] CRAN (R 4.4.1) #>  broom         1.0.7     2024-09-26 [1] CRAN (R 4.4.1) #>  bslib         0.8.0     2024-07-29 [1] CRAN (R 4.4.1) #>  cachem        1.1.0     2024-05-16 [1] CRAN (R 4.4.1) #>  car           3.1-3     2024-09-27 [1] CRAN (R 4.4.1) #>  carData       3.0-5     2022-01-06 [1] CRAN (R 4.4.1) #>  cellranger    1.1.0     2016-07-27 [1] CRAN (R 4.4.1) #>  checkmate     2.3.2     2024-07-29 [1] CRAN (R 4.4.1) #>  cli           3.6.3     2024-06-21 [1] CRAN (R 4.4.1) #>  colorspace    2.1-1     2024-07-26 [1] CRAN (R 4.4.1) #>  crayon        1.5.3     2024-06-20 [1] CRAN (R 4.4.1) #>  curl          5.2.3     2024-09-20 [1] CRAN (R 4.4.1) #>  DBI           1.2.3     2024-06-02 [1] CRAN (R 4.4.1) #>  desc          1.4.3     2023-12-10 [1] CRAN (R 4.4.1) #>  digest        0.6.37    2024-08-19 [1] CRAN (R 4.4.1) #>  dplyr       * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1) #>  evaluate      1.0.0     2024-09-17 [1] CRAN (R 4.4.1) #>  fansi         1.0.6     2023-12-08 [1] CRAN (R 4.4.1) #>  fastmap       1.2.0     2024-05-15 [1] CRAN (R 4.4.1) #>  forcats     * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1) #>  Formula       1.2-5     2023-02-24 [1] CRAN (R 4.4.0) #>  fs            1.6.4     2024-04-25 [1] CRAN (R 4.4.1) #>  generics      0.1.3     2022-07-05 [1] CRAN (R 4.4.1) #>  ggplot2     * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1) #>  ggpubr        0.6.0     2023-02-10 [1] CRAN (R 4.4.1) #>  ggsignif      0.6.4     2022-10-13 [1] CRAN (R 4.4.1) #>  glue          1.7.0     2024-01-09 [1] CRAN (R 4.4.1) #>  gtable        0.3.5     2024-04-22 [1] CRAN (R 4.4.1) #>  highr         0.11      2024-05-26 [1] CRAN (R 4.4.1) #>  hms           1.1.3     2023-03-21 [1] CRAN (R 4.4.1) #>  htmltools     0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1) #>  htmlwidgets   1.6.4     2023-12-06 [1] CRAN (R 4.4.1) #>  httr          1.4.7     2023-08-15 [1] CRAN (R 4.4.1) #>  igraph        2.0.3     2024-03-13 [1] CRAN (R 4.4.1) #>  jquerylib     0.1.4     2021-04-26 [1] CRAN (R 4.4.1) #>  jsonlite      1.8.9     2024-09-20 [1] CRAN (R 4.4.1) #>  kableExtra    1.4.0     2024-01-24 [1] CRAN (R 4.4.1) #>  knitr         1.48      2024-07-07 [1] CRAN (R 4.4.1) #>  later         1.3.2     2023-12-06 [1] CRAN (R 4.4.1) #>  lifecycle     1.0.4     2023-11-07 [1] CRAN (R 4.4.1) #>  logger        0.3.0     2024-03-05 [1] CRAN (R 4.4.1) #>  lubridate   * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1) #>  magrittr    * 2.0.3     2022-03-30 [1] CRAN (R 4.4.1) #>  memoise       2.0.1     2021-11-26 [1] CRAN (R 4.4.1) #>  MetaProViz  * 2.1.0     2024-10-02 [1] Github (saezlab/MetaProViz@9a49669) #>  munsell       0.5.1     2024-04-01 [1] CRAN (R 4.4.1) #>  OmnipathR     3.13.26   2024-10-02 [1] Github (saezlab/OmnipathR@662c4c8) #>  pillar        1.9.0     2023-03-22 [1] CRAN (R 4.4.1) #>  pkgconfig     2.0.3     2019-09-22 [1] CRAN (R 4.4.1) #>  pkgdown       2.1.1     2024-09-17 [1] CRAN (R 4.4.1) #>  prettyunits   1.2.0     2023-09-24 [1] CRAN (R 4.4.1) #>  progress      1.2.3     2023-12-06 [1] CRAN (R 4.4.1) #>  purrr       * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1) #>  R.methodsS3   1.8.2     2022-06-13 [1] CRAN (R 4.4.0) #>  R.oo          1.26.0    2024-01-24 [1] CRAN (R 4.4.0) #>  R.utils       2.12.3    2023-11-18 [1] CRAN (R 4.4.1) #>  R6            2.5.1     2021-08-19 [1] CRAN (R 4.4.1) #>  ragg          1.3.3     2024-09-11 [1] CRAN (R 4.4.1) #>  rappdirs      0.3.3     2021-01-31 [1] CRAN (R 4.4.1) #>  Rcpp          1.0.13    2024-07-17 [1] CRAN (R 4.4.1) #>  readr       * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1) #>  readxl        1.4.3     2023-07-06 [1] CRAN (R 4.4.1) #>  rlang         1.1.4     2024-06-04 [1] CRAN (R 4.4.1) #>  rmarkdown     2.28      2024-08-17 [1] CRAN (R 4.4.1) #>  RSQLite       2.3.7     2024-05-27 [1] CRAN (R 4.4.1) #>  rstatix       0.7.2     2023-02-01 [1] CRAN (R 4.4.1) #>  rstudioapi    0.16.0    2024-03-24 [1] CRAN (R 4.4.1) #>  rvest         1.0.4     2024-02-12 [1] CRAN (R 4.4.1) #>  sass          0.4.9     2024-03-15 [1] CRAN (R 4.4.1) #>  scales        1.3.0     2023-11-28 [1] CRAN (R 4.4.1) #>  selectr       0.4-2     2019-11-20 [1] CRAN (R 4.4.1) #>  sessioninfo   1.2.2     2021-12-06 [1] CRAN (R 4.4.1) #>  stringi       1.8.4     2024-05-06 [1] CRAN (R 4.4.0) #>  stringr     * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1) #>  svglite       2.1.3     2023-12-08 [1] CRAN (R 4.4.1) #>  systemfonts   1.1.0     2024-05-15 [1] CRAN (R 4.4.1) #>  textshaping   0.4.0     2024-05-24 [1] CRAN (R 4.4.1) #>  tibble      * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1) #>  tidyr       * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1) #>  tidyselect    1.2.1     2024-03-11 [1] CRAN (R 4.4.1) #>  tidyverse   * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1) #>  timechange    0.3.0     2024-01-18 [1] CRAN (R 4.4.1) #>  tzdb          0.4.0     2023-05-12 [1] CRAN (R 4.4.1) #>  utf8          1.2.4     2023-10-22 [1] CRAN (R 4.4.1) #>  vctrs         0.6.5     2023-12-01 [1] CRAN (R 4.4.1) #>  viridisLite   0.4.2     2023-05-02 [1] CRAN (R 4.4.1) #>  vroom         1.6.5     2023-12-05 [1] CRAN (R 4.4.1) #>  withr         3.0.1     2024-07-31 [1] CRAN (R 4.4.1) #>  xfun          0.47      2024-08-17 [1] CRAN (R 4.4.1) #>  XML           3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1) #>  xml2          1.3.6     2023-12-04 [1] CRAN (R 4.4.1) #>  yaml          2.3.10    2024-07-26 [1] CRAN (R 4.4.1) #>  zip           2.3.1     2024-01-27 [1] CRAN (R 4.4.1) #>  #>  [1] C:/Users/chris/AppData/Local/R/win-library/4.4 #>  [2] C:/Program Files/R/R-4.4.1/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/articles/Metadata Analysis.html","id":"section","dir":"Articles","previous_headings":"","what":"Metadata Analysis","title":"Metadata Analysis","text":"Tissue metabolomics experiment standard metabolomics experiment using tissue samples (e.g. animals patients).tutorial showcase use MetaProViz: perform differential metabolite analysis (DMA) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors based patients demographics like age, gender tumour stage. Find main metabolite drivers separate patients based demographics like age, gender tumour stage. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS).  # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/Metadata Analysis.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Metadata Analysis","text":"choose example datasets, publicly available paper “Integrated Metabolic Atlas Clear Cell Renal Cell Carcinoma”, includes metabolomic profiling 138 matched clear cell renal cell carcinoma (ccRCC)/normal tissue pairs. Metabolomics done using company Metabolon, untargeted metabolomics. use median normalised data supplementary table 2 paper. combined metainformation patients metabolite measurements removed identified metabolites. Lastly, added column “Stage” Stage1 Stage2 patients summarised “EARLY-STAGE” Stage3 Stage4 patients “LATE-STAGE”. Moreover, added column “Age”, patients “AGE SURGERY” <42 defined “Young” patients AGE SURGERY >58 “Old” remaining patients “Middle”. #part MetaProViz package can load example data global environment using function toy_data():1. Tissue experiment (Intra) can load ToyData, includes columns Sample information columns median normalised measured metabolite integrated peaks. Preview DF Tissue_Norm including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs, HMDB IDs, etc. selected pathways (MappingInfo) Preview DF Tissue_MetaData including trivial metabolite identifiers used experiment well IDs pathway information.","code":"# Load the example data: Tissue_Norm <- MetaProViz::ToyData(\"Tissue_Norm\") Tissue_MetaData <- MetaProViz::ToyData(\"Tissue_MetaData\")"},{"path":[]},{"path":"/articles/Metadata Analysis.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Metadata Analysis","text":"done authors paper use median normalized data. want know can use MetaProViz pre-processing module, please check vignette: - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media","code":""},{"path":"/articles/Metadata Analysis.html","id":"metadata-analysis","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Metadata analysis","title":"Metadata Analysis","text":"can use patient’s metadata find main metabolite drivers separate patients based demographics like age, gender, etc. metadata analysis based principal component analysis (PCA), dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). MetaProViz::MetaAnalysis() function perform PCA extract different PCs followed annova find main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_aov]] including main metabolite drivers separate patients based demographics. Preview DF MetaRes[[res_summary]] including metabolite drivers rows list patients demographics can separate.","code":"MetaRes <- MetaProViz:::MetaAnalysis(InputData=Tissue_Norm[,-c(1:13)],                                      SettingsFile_Sample= Tissue_Norm[,c(2,4:5,12:13)],                                      Scaling = TRUE,                                      Percentage = 0.1,                                      StatCutoff= 0.05,                                      SaveAs_Table = \"csv\",                                      SaveAs_Plot = \"svg\",                                      PrintPlot= TRUE,                                      FolderPath = NULL) #> The column names of the 'SettingsFile_Sample'contain special character that where removed. ##1. Tissue_Type TissueTypeList <- MetaRes[[\"res_summary\"]]%>%   filter(MainDriver_Term == \"TISSUE_TYPE\")%>%   filter(`MainDriver_Sum(VarianceExplained)`>30)%>%   select(FeatureID)%>%   pull()  #select columns Tissue_norm that are in TissueTypeList if they exist Input_Heatmap <- Tissue_Norm[ , names(Tissue_Norm) %in% TissueTypeList]#c(\"N1-methylguanosine\", \"N-acetylalanine\", \"lysylmethionine\")  #Heatmap: Metabolites that separate the demographics, like here TISSUE_TYPE MetaProViz:::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = Tissue_Norm[,c(1:13)],                        SettingsInfo = c(color_Sample = list(\"TISSUE_TYPE\")),                        Scale =\"column\",                        PlotName = \"MainDrivers\")"},{"path":"/articles/Metadata Analysis.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Metadata Analysis","text":"use Differential Metabolite Analysis (DMA) compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. information please see vignette: - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media perform multiple comparisons based different patient demographics available: 1. Tumour versus Normal: patients 2. Tumour versus Normal: Subset Early Stage patients 3. Tumour versus Normal: Subset Late Stage patients 4. Tumour versus Normal: Subset Young patients 5. Tumour versus Normal: Subset Old patients       can see different Volcano plots smaller p.adjusted values differences Log2FC range. can also use MetaproViz::VizVolcano() function plot comparisons together plot, Tumour versus Normal young old patients:  can observe Tumour versus Normal lower significance values Young patients compared Old patients. can due higher variance metabolite measurements Young patients compared Old patients. Lastly, can also check top changed metabolites comparing Tumour versus Normal correlate main metabolite drivers separate patients based TISSUE_TYPE, Tumour Normal.","code":"#Prepare the different selections EarlyStage <- Tissue_Norm%>%   filter(STAGE== \"EARLY-STAGE\") LateStage <- Tissue_Norm%>%   filter(STAGE==\"LATE-STAGE\") Old <- Tissue_Norm%>%   filter(AGE==\"Old\") Young <- Tissue_Norm%>%   filter(AGE==\"Young\")  DFs <- list(\"TissueType\"= Tissue_Norm,\"EarlyStage\"= EarlyStage, \"LateStage\"= LateStage, \"Old\"= Old, \"Young\"=Young)  #Run DMA ResList <- list() for(item in names(DFs)){   #Get the right DF:   InputData <- DFs[[item]]   #Perform DMA   message(paste(\"Running DMA for\", item))   TvN <- MetaProViz::DMA(InputData =  InputData[,-c(1:13)],                    SettingsFile_Sample =  InputData[,c(1:13)],                    SettingsInfo = c(Conditions=\"TISSUE_TYPE\", Numerator=\"TUMOR\" , Denominator = \"NORMAL\"),                    PerformShapiro=FALSE) #The data have been normalized by the company that provided the results and include metabolites with zero variance as they were all imputed with the same missing value.   #Add Results to list   ResList[[item]] <- TvN } #> Running DMA for TissueType #> There are no NA/0 values #> Running DMA for EarlyStage #> There are no NA/0 values #> Running DMA for LateStage #> There are no NA/0 values #> Running DMA for Old #> There are no NA/0 values #> Running DMA for Young #> There are no NA/0 values #Early versus Late Stage MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"EarlyStage\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"LateStage\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"EarlyStage\", InputData2= \"LateStage\"),                        PlotName= \"EarlyStage-TUMOR_vs_NORMAL compared to LateStage-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" ) # Young versus Old MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"Young\", InputData2= \"Old\"),                        PlotName= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" ) #Get the top changed metabolites top_entries <- ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]] %>%    arrange(desc(t.val)) %>%    slice(1:25)%>%   select(Metabolite)%>%   pull() bottom_entries <- ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]] %>%    arrange(desc(t.val)) %>%   slice((n()-24):n())%>%   select(Metabolite)  %>%   pull()  #Check if those overlap with the top demographics drivers ggVennDiagram::ggVennDiagram(list(Top = top_entries,                                   Bottom = bottom_entries,                                   TissueTypeList = TissueTypeList))+   scale_fill_gradient(low = \"blue\", high = \"red\") MetaData_Metab <- merge(x=Tissue_MetaData,                    y= MetaRes[[\"res_summary\"]][, c(1,5:6) ]%>%column_to_rownames(\"FeatureID\"),                    by=0,                    all.y=TRUE)%>%   column_to_rownames(\"Row.names\")  #Make a Volcano plot: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        InputData=ResList[[\"TissueType\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        SettingsFile_Metab =  MetaData_Metab,                        SettingsInfo = c(color = \"MainDriver_Term\"),                        PlotName= \"TISSUE_TYPE-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\" )"},{"path":"/articles/Metadata Analysis.html","id":"biological-regulated-clustering","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Biological regulated clustering","title":"Metadata Analysis","text":"understand metabolites changing independent patients age, hence due tumour versus normal, metabolites change independent tumour versus normal, hence due different age, can use MetaProViz::MCA_2Cond() function. Metabolite Clustering Analysis (MCA) enables clustering metabolites groups based logical regulatory rules. set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Thereby “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. information can also check vignettes. Now can use information colour code volcano plot:","code":"MCAres <-  MetaProViz::MCA_2Cond(InputData_C1=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]],                                  InputData_C2=ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]],                                  SettingsInfo_C1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  SettingsInfo_C2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  FeatureID = \"Metabolite\",                                  SaveAs_Table = \"csv\",                                  BackgroundMethod=\"C1&C2\"#Most stringend background setting, only includes metabolites detected in both comparisons                                  ) #Add metabolite information such as KEGG ID or pathway to results MetaData_Metab <- merge(x=Tissue_MetaData,                    y= MCAres[[\"MCA_2Cond_Results\"]][, c(1, 14:15)]%>%column_to_rownames(\"Metabolite\"),                    by=0,                    all.y=TRUE)%>%   column_to_rownames(\"Row.names\")  MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=ResList[[\"Young\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        InputData2= ResList[[\"Old\"]][[\"DMA\"]][[\"TUMOR_vs_NORMAL\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"Young\", InputData2= \"Old\"),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName= \"Young-TUMOR_vs_NORMAL compared to Old-TUMOR_vs_NORMAL\",                        Subtitle= \"Results of DMA\",                        SettingsInfo = c(individual = \"SUPER_PATHWAY\",                                         color = \"RG2_Significant\"))"},{"path":"/articles/Metadata Analysis.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Metadata Analysis","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.1 (2024-06-14 ucrt) #>  os       Windows 10 x64 (build 19045) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United Kingdom.utf8 #>  ctype    English_United Kingdom.utf8 #>  tz       Europe/Berlin #>  date     2024-10-02 #>  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package         * version   date (UTC) lib source #>  abind             1.4-8     2024-09-12 [1] CRAN (R 4.4.1) #>  backports         1.5.0     2024-05-23 [1] CRAN (R 4.4.0) #>  bit               4.5.0     2024-09-20 [1] CRAN (R 4.4.1) #>  bit64             4.5.2     2024-09-22 [1] CRAN (R 4.4.1) #>  blob              1.2.4     2023-03-17 [1] CRAN (R 4.4.1) #>  broom             1.0.7     2024-09-26 [1] CRAN (R 4.4.1) #>  bslib             0.8.0     2024-07-29 [1] CRAN (R 4.4.1) #>  cachem            1.1.0     2024-05-16 [1] CRAN (R 4.4.1) #>  car               3.1-3     2024-09-27 [1] CRAN (R 4.4.1) #>  carData           3.0-5     2022-01-06 [1] CRAN (R 4.4.1) #>  cellranger        1.1.0     2016-07-27 [1] CRAN (R 4.4.1) #>  checkmate         2.3.2     2024-07-29 [1] CRAN (R 4.4.1) #>  cli               3.6.3     2024-06-21 [1] CRAN (R 4.4.1) #>  colorspace        2.1-1     2024-07-26 [1] CRAN (R 4.4.1) #>  crayon            1.5.3     2024-06-20 [1] CRAN (R 4.4.1) #>  curl              5.2.3     2024-09-20 [1] CRAN (R 4.4.1) #>  DBI               1.2.3     2024-06-02 [1] CRAN (R 4.4.1) #>  desc              1.4.3     2023-12-10 [1] CRAN (R 4.4.1) #>  digest            0.6.37    2024-08-19 [1] CRAN (R 4.4.1) #>  dplyr           * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1) #>  EnhancedVolcano   1.22.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  evaluate          1.0.0     2024-09-17 [1] CRAN (R 4.4.1) #>  fansi             1.0.6     2023-12-08 [1] CRAN (R 4.4.1) #>  farver            2.1.2     2024-05-13 [1] CRAN (R 4.4.1) #>  fastmap           1.2.0     2024-05-15 [1] CRAN (R 4.4.1) #>  forcats         * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1) #>  Formula           1.2-5     2023-02-24 [1] CRAN (R 4.4.0) #>  fs                1.6.4     2024-04-25 [1] CRAN (R 4.4.1) #>  generics          0.1.3     2022-07-05 [1] CRAN (R 4.4.1) #>  ggplot2         * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1) #>  ggpubr            0.6.0     2023-02-10 [1] CRAN (R 4.4.1) #>  ggrepel           0.9.6     2024-09-07 [1] CRAN (R 4.4.1) #>  ggsignif          0.6.4     2022-10-13 [1] CRAN (R 4.4.1) #>  ggVennDiagram     1.5.2     2024-02-20 [1] CRAN (R 4.4.1) #>  glue              1.7.0     2024-01-09 [1] CRAN (R 4.4.1) #>  gtable            0.3.5     2024-04-22 [1] CRAN (R 4.4.1) #>  gtools            3.9.5     2023-11-20 [1] CRAN (R 4.4.1) #>  highr             0.11      2024-05-26 [1] CRAN (R 4.4.1) #>  hms               1.1.3     2023-03-21 [1] CRAN (R 4.4.1) #>  htmltools         0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1) #>  htmlwidgets       1.6.4     2023-12-06 [1] CRAN (R 4.4.1) #>  httr              1.4.7     2023-08-15 [1] CRAN (R 4.4.1) #>  igraph            2.0.3     2024-03-13 [1] CRAN (R 4.4.1) #>  jquerylib         0.1.4     2021-04-26 [1] CRAN (R 4.4.1) #>  jsonlite          1.8.9     2024-09-20 [1] CRAN (R 4.4.1) #>  kableExtra        1.4.0     2024-01-24 [1] CRAN (R 4.4.1) #>  knitr             1.48      2024-07-07 [1] CRAN (R 4.4.1) #>  labeling          0.4.3     2023-08-29 [1] CRAN (R 4.4.0) #>  later             1.3.2     2023-12-06 [1] CRAN (R 4.4.1) #>  lifecycle         1.0.4     2023-11-07 [1] CRAN (R 4.4.1) #>  limma             3.60.4    2024-07-21 [1] Bioconductor 3.19 (R 4.4.1) #>  logger            0.3.0     2024-03-05 [1] CRAN (R 4.4.1) #>  lubridate       * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1) #>  magrittr        * 2.0.3     2022-03-30 [1] CRAN (R 4.4.1) #>  memoise           2.0.1     2021-11-26 [1] CRAN (R 4.4.1) #>  MetaProViz      * 2.1.0     2024-10-02 [1] Github (saezlab/MetaProViz@9a49669) #>  munsell           0.5.1     2024-04-01 [1] CRAN (R 4.4.1) #>  OmnipathR         3.13.26   2024-10-02 [1] Github (saezlab/OmnipathR@662c4c8) #>  pheatmap          1.0.12    2019-01-04 [1] CRAN (R 4.4.1) #>  pillar            1.9.0     2023-03-22 [1] CRAN (R 4.4.1) #>  pkgconfig         2.0.3     2019-09-22 [1] CRAN (R 4.4.1) #>  pkgdown           2.1.1     2024-09-17 [1] CRAN (R 4.4.1) #>  plyr              1.8.9     2023-10-02 [1] CRAN (R 4.4.1) #>  prettyunits       1.2.0     2023-09-24 [1] CRAN (R 4.4.1) #>  progress          1.2.3     2023-12-06 [1] CRAN (R 4.4.1) #>  purrr           * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1) #>  R.methodsS3       1.8.2     2022-06-13 [1] CRAN (R 4.4.0) #>  R.oo              1.26.0    2024-01-24 [1] CRAN (R 4.4.0) #>  R.utils           2.12.3    2023-11-18 [1] CRAN (R 4.4.1) #>  R6                2.5.1     2021-08-19 [1] CRAN (R 4.4.1) #>  ragg              1.3.3     2024-09-11 [1] CRAN (R 4.4.1) #>  rappdirs          0.3.3     2021-01-31 [1] CRAN (R 4.4.1) #>  RColorBrewer      1.1-3     2022-04-03 [1] CRAN (R 4.4.0) #>  Rcpp              1.0.13    2024-07-17 [1] CRAN (R 4.4.1) #>  readr           * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1) #>  readxl            1.4.3     2023-07-06 [1] CRAN (R 4.4.1) #>  reshape2          1.4.4     2020-04-09 [1] CRAN (R 4.4.1) #>  rlang           * 1.1.4     2024-06-04 [1] CRAN (R 4.4.1) #>  rmarkdown         2.28      2024-08-17 [1] CRAN (R 4.4.1) #>  RSQLite           2.3.7     2024-05-27 [1] CRAN (R 4.4.1) #>  rstatix           0.7.2     2023-02-01 [1] CRAN (R 4.4.1) #>  rstudioapi        0.16.0    2024-03-24 [1] CRAN (R 4.4.1) #>  rvest             1.0.4     2024-02-12 [1] CRAN (R 4.4.1) #>  sass              0.4.9     2024-03-15 [1] CRAN (R 4.4.1) #>  scales            1.3.0     2023-11-28 [1] CRAN (R 4.4.1) #>  sessioninfo       1.2.2     2021-12-06 [1] CRAN (R 4.4.1) #>  statmod           1.5.0     2023-01-06 [1] CRAN (R 4.4.1) #>  stringi           1.8.4     2024-05-06 [1] CRAN (R 4.4.0) #>  stringr         * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1) #>  svglite           2.1.3     2023-12-08 [1] CRAN (R 4.4.1) #>  systemfonts       1.1.0     2024-05-15 [1] CRAN (R 4.4.1) #>  textshaping       0.4.0     2024-05-24 [1] CRAN (R 4.4.1) #>  tibble          * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1) #>  tidyr           * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1) #>  tidyselect        1.2.1     2024-03-11 [1] CRAN (R 4.4.1) #>  tidyverse       * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1) #>  timechange        0.3.0     2024-01-18 [1] CRAN (R 4.4.1) #>  tzdb              0.4.0     2023-05-12 [1] CRAN (R 4.4.1) #>  utf8              1.2.4     2023-10-22 [1] CRAN (R 4.4.1) #>  vctrs             0.6.5     2023-12-01 [1] CRAN (R 4.4.1) #>  viridisLite       0.4.2     2023-05-02 [1] CRAN (R 4.4.1) #>  vroom             1.6.5     2023-12-05 [1] CRAN (R 4.4.1) #>  withr             3.0.1     2024-07-31 [1] CRAN (R 4.4.1) #>  xfun              0.47      2024-08-17 [1] CRAN (R 4.4.1) #>  XML               3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1) #>  xml2              1.3.6     2023-12-04 [1] CRAN (R 4.4.1) #>  yaml              2.3.10    2024-07-26 [1] CRAN (R 4.4.1) #>  zip               2.3.1     2024-01-27 [1] CRAN (R 4.4.1) #>  #>  [1] C:/Users/chris/AppData/Local/R/win-library/4.4 #>  [2] C:/Program Files/R/R-4.4.1/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/articles/Standard Metabolomics.html","id":"section","dir":"Articles","previous_headings":"","what":"Standard Metabolomics","title":"Standard Metabolomics","text":"standard metabolomics experiment refers intracellular extracts (e.g. cell bacteria culture), tissue samples (e.g. animals patients), plasma samples (e.g. blood) many types experimental setups.tutorial showcase use MetaProViz: process raw peak data identify outliers. perform differential metabolite analysis (DMA) generate Log2FC statistics perform pathway analysis using Representation Analysis (ORA) results. metabolite clustering analysis (MCA) find clusters metabolites similar behaviors perform pathway analysis using ORA cluster. use specific visualizations aid biological interpretation results. First done yet, install required dependencies load libraries:","code":"# 1. Install Rtools if you haven’t done this yet, using the appropriate version (e.g.windows or macOS).  # 2. Install the latest development version from GitHub using devtools #devtools::install_github(\"https://github.com/saezlab/MetaProViz\")  library(MetaProViz)  #dependencies that need to be loaded: library(magrittr) library(dplyr) library(rlang) library(ggfortify)  #Please install the Biocmanager Dependencies: #BiocManager::install(\"clusterProfiler\") #BiocManager::install(\"EnhancedVolcano\")"},{"path":"/articles/Standard Metabolomics.html","id":"loading-the-example-data","dir":"Articles","previous_headings":"","what":"1. Loading the example data","title":"Standard Metabolomics","text":"choose example datasets, publicly available metabolomics workbench project PR001418 including metabolic profiles human renal epithelial cells HK2 cell renal cell carcinoma (ccRCC) cell lines cultured Plasmax cell culture media (Sciacovelli et al. 2022). use integrated raw peak data example data using trivial metabolite name combination KEGG ID metabolite identifiers.part MetaProViz package can load example data global environment using function toy_data():1. Intracellular experiment (Intra) raw data available via metabolomics workbench study ST002224 intracellular metabolomics HK2 ccRCC cell lines 786-O, 786-M1A 786-M2A performed. can load ToyData, includes columns Sample information columns measured metabolite integrated peaks. Preview DF Intra including columns sample information metabolite ids measured values. 2. Additional information mapping trivial metabolite names KEGG IDs selected pathways (MappingInfo) Preview DF Pathways including trivial metabolite identifiers used experiment well KEGG IDs pathway information. 3. KEGG pathways loaded via KEGG API using package KEGGREST can used perform pathway analysis (Kanehisa Goto 2000). (KEGG_Pathways) Preview DF KEGG_Pathways.","code":"Intra <- MetaProViz::ToyData(Data=\"IntraCells_Raw\") MappingInfo <- MetaProViz::ToyData(Data=\"Cells_MetaData\") #This will use KEGGREST to query the KEGG API to load the pathways: MetaProViz::LoadKEGG() #> Cached file loaded from: C:\\Users\\chris\\AppData\\Local/Cache/KEGG_Metabolite.rds"},{"path":"/articles/Standard Metabolomics.html","id":"run-metaproviz-analysis","dir":"Articles","previous_headings":"","what":"2. Run MetaProViz Analysis","title":"Standard Metabolomics","text":"Currently, MetaProViz contains four different modules, include different methods can used independently combination (see introduction details). go trough modules apply example data.","code":""},{"path":"/articles/Standard Metabolomics.html","id":"pre-processing","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"Pre-processing","title":"Standard Metabolomics","text":"MetaProViz includes pre-processing module function Preprocessing() multiple parameters perform customize data processing.Feature_Filtering applies 80%-filtering rule metabolite features either whole dataset (=“Standard”) (Bijlsma et al. 2006) per condition (=“Modified”) (Wei et al. 2018). means metabolites removed 20% samples (per condition) detection. parameter Feature_Filt_Value enable adaptation stringency filtering based experimental context. instance, patient tumour samples can contain many unknown subgroups due gender, age, stage etc., leads metabolite detected 50% (even less) tumour samples, hence context considered change Feature_Filt_Value default (=0.8). Feature_Filtering = \"None\", feature filtering performed. context Feature_Filtering also noteworthy function Pool_Estimation() can used estimate quality metabolite detection return list metabolites variable across different pool measurements (pool = mixture experimental samples measured several times LC-MS run) . Variable metabolite pool sample removed data. parameter TIC_Normalization refers Total Ion Count (TIC) normalisation, often used LC-MS derived metabolomics data. TIC_Normalization = TRUE, feature (=metabolite) sample divided sum intensity value (= total number ions) sample finally multiplied constant ( = mean samples total number ions). Noteworthy, TIC normalisation used small number features (= metabolites), since TIC assumes “average” ion count sample equal instrument batch effects (Wulff Mitchell 2018). parameter MVI refers Missing Value Imputation (MVI) MVI = TRUE half minimum (HM) missing value imputation performed per feature (= per metabolite). important mention HM shown perform well missing vales missing random (MNAR) (Wei et al. 2018). Lastly, function Preprocessing() performs outlier detection adds column “Outliers” DF, can used remove outliers. parameter HotellinsConfidence can used choose confidence interval used Hotellins T2 outlier test (Hotelling 1931). Since example data contains pool samples, Pool_Estimation() applying Preprocessing() function. important, since one remove features (=metabolites) variable prior performing data transformations TIC part Preprocessing() function. worth mentioning Coefficient variation (CV) calculated dividing standard deviation (SD) mean. Hence CV depends SD, turn works normally distributed data.      Preview Pool_Estimation result. results Pool_Estimation() table CVs. high variability, one consider remove features data. example data nothing needs removed. used internal standard experiment specifically check CV indicate technical issues (valine-d8 hippuric acid-d5). Now apply Preprocessing() function example data look output produced. notice chosen parameters results documented messages. results data tables, Quality Control (QC) plots outlier detection plots returned can easily viewed.  Preview pre-processing results, additional column Outlier including results Hotellins T2. output table can now see column “Outliers” Condition 786-M2A, can see based Hotellin’s T2 test, one sample detected outlier first round filtering. part Preprocessing() function several plots generated saved. Additionally, ggplots returned list enable modifiaction using ggplot syntax. plots include plots showing outliers filtering round QC plots. part MetaProViz visualization module one can easily customize PCA plot adapt color shape information interest. can see VizPCA() function. proceed, remove outlier: may noticed, example dataset several biological replicates injected (=measured) several times, can termed analytical replicates. MetaProViz pre-processing module includes function ReplicateSum(), task save results: Using pre-processed data, can now use MetaProViz visualization module generate overview Heatmaps VizHeatmap() PCA plots VizPCA(). can see examples .","code":"#### Select Pool samples: #Get the Pool data PoolData <- MetaProViz::ToyData(Data=\"IntraCells_Raw\") %>%   subset(Conditions==\"Pool\", select = -c(1:3)) # we remove the columns \"Conditions\", \"Analytical_Replicates\" and \"Biological_Replicates\"   # Check the metabolite variability Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = PoolData,                                                      SettingsFile_Sample = NULL,                                                      SettingsInfo = NULL,                                                      CutoffCV = 100) #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Bin width defaults to 1/30 of the range of the data. Pick better value with #> `binwidth`. #### Alternatively a full dataset can be added. Here, the Conditions and PoolSamples name have to be specified in the Input_SettingsInfo   Pool_Estimation_result<- MetaProViz::PoolEstimation(InputData = Intra[,-c(1:3)],                                                      SettingsFile_Sample = Intra[,1:3],                                                      SettingsInfo = c(PoolSamples = \"Pool\", Conditions=\"Conditions\"),                                                      CutoffCV = 100)  Pool_Estimation_result_DF_CV <-Pool_Estimation_result[[\"DF\"]][[\"CV\"]] #> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. #> Bin width defaults to 1/30 of the range of the data. Pick better value with #> `binwidth`. PreprocessingResults <- MetaProViz::PreProcessing(InputData=Intra[-c(49:58) ,-c(1:3)], #remove pool samples and columns with sample information                                                   SettingsFile_Sample=Intra[-c(49:58) , c(1:3)], #remove pool samples and columns with metabolite measurements                                                   SettingsInfo = c(Conditions = \"Conditions\",                                                                     Biological_Replicates = \"Biological_Replicates\"),                                                   FeatureFilt = \"Modified\",                                                   FeatureFilt_Value = 0.8,                                                   TIC = TRUE,                                                   MVI = TRUE,                                                    HotellinsConfidence = 0.99,# We perform outlier testing using 0.99 confidence intervall                                                   CoRe = FALSE,                                                   SaveAs_Plot = \"svg\",                                                   SaveAs_Table= \"csv\",                                                   PrintPlot = TRUE,                                                   FolderPath = NULL)                                                       # This is the results table: Intra_Preprocessed <- PreprocessingResults[[\"DF\"]][[\"Preprocessing_output\"]] #> Here we apply the modified 80%-filtering rule that takes the class information (Column `Conditions`) into account, which additionally reduces the effect of missing values. REF: Yang et. al., (2015), doi: 10.3389/fmolb.2015.00004) #> filtering value selected: 0.8 #> 3 metabolites where removed: AICAR, FAICAR, SAICAR #> Missing value imputation is performed, as a complementary approach to address the missing value problem, where the missing values are imputing using the `half minimum value`. REF: Wei et. al., (2018), Reports, 8, 663, doi:https://doi.org/10.1038/s41598-017-19120-0 #> Total Ion Count (TIC) normalization is used to reduce the variation from non-biological sources, while maintaining the biological variation. REF: Wulff et. al., (2018), Advances in Bioscience and Biotechnology, 9, 339-351, doi:https://doi.org/10.4236/abb.2018.98022 #> Identification of outlier samples is performed using Hotellin's T2 test to define sample outliers in a mathematical way (Confidence = 0.99 ~ p.val < 0.01) REF: Hotelling, H. (1931), Annals of Mathematical Statistics. 2 (3), 360–378, doi:https://doi.org/10.1214/aoms/1177732979. #> HotellinsConfidence value selected: 0.99 #> There are possible outlier samples in the data #> Filtering round 1 Outlier Samples: MS55_29 Intra_Preprocessed <- Intra_Preprocessed%>%   filter(Outliers==\"no\")#remove MS55_29 Intra_Preprocessed <- MetaProViz::ReplicateSum(InputData=Intra_Preprocessed[,-c(1:4)],                                                SettingsFile_Sample=Intra_Preprocessed[,c(1:4)],                                                SettingsInfo = c(Conditions=\"Conditions\", Biological_Replicates=\"Biological_Replicates\", Analytical_Replicates=\"Analytical_Replicates\"))"},{"path":"/articles/Standard Metabolomics.html","id":"dma","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"DMA","title":"Standard Metabolomics","text":"Differential Metabolite Analysis (DMA) used compare two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value. different parameters STAT_pval STAT_padj one can choose statistical tests t.test, wilcoxon test, limma, annova, kruskal walles, etc. (see function reference information). input one can use pre-processed data generated using Preprocessing module, one can course use DF including metabolite values, even though recommend normalize data remove outliers prior DMA. Moreover, require Input_SettingsFile_Sample including sample metadata information condition sample corresponds . Additionally, enable user provide Plot_SettingsFile_Metab containing metadata features (metabolites), KEGG ID, pathway, retention time, etc. defining numerator denominator part Input_SettingsInfo parameter, defined comparisons performed: 1. one_vs_one (single comparison): numerator=“Condition1”, denominator =“Condition2” 2. all_vs_one (multiple comparison): numerator=NULL, denominator =“Condition” 3. all_vs_all (multiple comparison): numerator=NULL, denominator =NULL (=default) Noteworthy, performed missing value imputation hence data includes NAs 0 values features, deal DMA() function: 1. use parameter STAT_pval=\"lmFit\", limma performed. Limma baesian fit data substracts Mean(Condition1 fit) - Mean(Condition2 fit). , unless values feature NA, Limma can deal NAs. 2. Standard Log2FC: log2(Mean(Condition1)) - log2(Mean(Condition2)) . values replicates one condition NA/0 feature (=metabolite): Log2FC= Inf/-Inf statistics NA b. values replicates one condition NA/0 feature (=metabolite): Log2FC= positive negative value, statistics NA important mention case STAT_pval=\"lmFit\", perform log2 transformation data prior running limma enable calculation log2FC, hence provide log2 transformed data. , example data four different cell lines, healthy (HK2) cancer (ccRCC: 786-M1A, 786-M2A 786-O), hence can perform multiple different comparisons. results can automatically saved results returned list different data frames. parameter Plot=TRUE, overview Volcano plot generated saved.  Preview Shaprio results different conditions. Preview DMA results comparison 786-M1A versus HK2 cells. Using DMA results, can now use MetaProViz visualization module generate customized Volcano plots VizVolcano(). can see examples .","code":"# Perform multiple comparison All_vs_One using annova: DMA_Annova <- MetaProViz::DMA(InputData=Intra_Preprocessed[,-c(1:3)], #we need to remove columns that do not include metabolite measurements                               SettingsFile_Sample=Intra_Preprocessed[,c(1:3)],#only maintain the information about condition and replicates                               SettingsInfo = c(Conditions=\"Conditions\", Numerator=NULL , Denominator = \"HK2\"),# we compare all_vs_HK2                               SettingsFile_Metab = MappingInfo,# Adds metadata for the metabolites such as KEGG_ID, Pathway, retention time,...                               StatPval =\"aov\",                               StatPadj=\"fdr\")  #Inspect the DMA results tables: DMA_786M1A_vs_HK2 <- DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]] Shapiro <- DMA_Annova[[\"ShapiroTest\"]][[\"DF\"]][[\"Shapiro_result\"]] #> There are no NA/0 values #> For the condition 786-M1A 94.41 % of the metabolites follow a normal distribution and 5.59 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-M2A 97.79 % of the metabolites follow a normal distribution and 2.21 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition 786-O 95.03 % of the metabolites follow a normal distribution and 4.97 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For the condition HK2 96.13 % of the metabolites follow a normal distribution and 3.87 % of the metabolites are not-normally distributed according to the shapiro test. You have chosen aov, which is for parametric Hypothesis testing. `shapiro.test` ignores missing values in the calculation. #> For 83.24% of metabolites the group variances are equal. #> No condition was specified as numerator and HK2 was selected as a denominator. Performing multiple testing `all-vs-one` using aov."},{"path":"/articles/Standard Metabolomics.html","id":"ora-using-the-dma-results","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > DMA","what":"ORA using the DMA results","title":"Standard Metabolomics","text":"Representation Analysis (ORA) pathway enrichment analysis (PEA) method determines set features (=metabolic pathways) -represented selection features (=metabolites) data comparison measured features (metabolites) using Fishers exact test. selection metabolites usually altered metabolites data, can selected top bottom t-values. course, many PEA methods well known GSEA. aim provide extensive tool different methods perform pathway enrichment analysis focus ORA since can apply perform standard pathway enrichment well pathway enrichment clusters metabolites (see MCA ). interested using different pathway enrichment methods please check specialized tools decopupleR (Badia--Mompel et al. 2022). use KEGG pathways (Kanehisa Goto 2000). can perform ORA DMA results, ensure metabolite names match KEGG IDs KEGG trivial names. general, PathwayFile requirements column “term”, “Metabolite” “Description”, Input_data requirements column “t.val” column “Metabolite”. Preview ORA results comparison 786-M1A versus HK2 cells.","code":"#Since we have performed multiple comparisons (all_vs_HK2), we will run ORA for each of this comparison DM_ORA_res<- list()  comparisons <- names(DMA_Annova[[\"DMA\"]]) for(comparison in comparisons){   #Ensure that the Metabolite names match with KEGG IDs or KEGG trivial names.    DMA <- DMA_Annova[[\"DMA\"]][[comparison]]   DMA <- DMA[complete.cases(DMA),-1]%>%#we remove metabolites that do not have a KEGG ID/KEGG pathway   dplyr::rename(\"Metabolite\"=\"KEGGCompound\")#We use the KEGG trivial names to match with the KEGG pathways      #Perform ORA   DM_ORA_res[[comparison]] <- MetaProViz::StandardORA(InputData= DMA%>%remove_rownames()%>%column_to_rownames(\"Metabolite\"), #Input data requirements: column `t.val` and column `Metabolite`                                                        SettingsInfo=c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\"),                                                        PathwayFile=KEGG_Pathways,#Pathway file requirements: column `term`, `Metabolite` and `Description`. Above we loaded the Kegg_Pathways using MetaProViz::Load_KEGG()                                                        PathwayName=\"KEGG\",                                                        minGSSize=3,                                                        maxGSSize=1000,                                                        pCutoff=0.01,                                                        PercentageCutoff=10)                                                                                                    } #>   #Lets check how the results look like: DM_ORA_786M1A_vs_HK2 <- DM_ORA_res[[\"786-M1A_vs_HK2\"]][[\"ClusterGoSummary\"]]"},{"path":"/articles/Standard Metabolomics.html","id":"mca","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis","what":"MCA","title":"Standard Metabolomics","text":"Metabolite Clustering Analysis (MCA) module, includes different functions enable clustering metabolites groups either based logical regulatory rules. can particularly useful one multiple conditions aims find patterns data.","code":""},{"path":"/articles/Standard Metabolomics.html","id":"mca-2cond","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"MCA-2Cond","title":"Standard Metabolomics","text":"metabolite clustering method based Regulatory Clustering Method (RCM) developed part Signature Regulatory Clustering (SiRCle) model (Mora et al. (2022)). part SiRCleR package, also variation initial RCM method proposed clustering based two comparisons (e.g. KO versus WT hypoxia normoxia). set two different thresholds, one differential metabolite abundance (Log2FC) one significance (e.g. p.adj). define feature (= metabolite) assigned : 1. “”, means metabolite significantly -regulated underlying comparison. 2. “”, means metabolite significantly -regulated underlying comparison. 3. “Change”, means metabolite change significantly underlying comparison /defined -regulated/-regulated based Log2FC threshold chosen. Therebye “Change” subdivided four states: 1. “Detected”, means metabolite detected underlying comparison. 2. “Significant”, means metabolite significant underlying comparison. 3. “Significant positive”, means metabolite significant underlying comparison differential metabolite abundance positive, yet meet threshold set “” (e.g. Log2FC >1 = “” significant Log2FC=0.8). 4. “Significant negative”, means metabolite significant underlying comparison differential metabolite abundance negative, yet meet threshold set “”. definition done individually comparison impact metabolite cluster metabolite sorted . Since two comparisons, can choose different Background settings, defines features considered clusters (e.g. include features (= metabolites) detected comparisons, removing rest features).background methods backgroundMethod following 1.1. - 1.4. restrictive least restrictive:1.1. C1&C2: stringend background setting lead small number metabolites.1.2. C1: Focus metabolite abundance Condition 1 (C1).1.3. C2: Focus metabolite abundance Condition 2 (C2).1.4. C1|C2: Least stringent background method, since metabolite included input detected one two conditions. Lastly, get clusters metabolites defined metabolite change two conditions. example, Alanine “” based thresholds comparisons sorted cluster “Core_UP”. two 6-state6 transitions comparisons, flows summarised smaller amount metabolite clusters using different Regulation Groupings (RG): 1. RG1_All 2. RG2_Significant taking account genes significant (, , significant positive, significant negative) 3. RG3_SignificantChange takes account genes significant changes (, ). Metabolite Clustering Analysis: 2 Conditions. Now let’s use data clustering: Summary MCA: 2 Conditions.","code":"#Example of all possible flows: MCA_2Cond <- MetaProViz::MCA_rules(Method=\"2Cond\") MCAres <-  MetaProViz::MCA_2Cond(InputData_C1=DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]],                                  InputData_C2=DMA_Annova[[\"DMA\"]][[\"786-M1A_vs_HK2\"]],                                  SettingsInfo_C1=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  SettingsInfo_C2=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1),                                  FeatureID = \"Metabolite\",                                  SaveAs_Table = \"csv\",                                  BackgroundMethod=\"C1&C2\",                                  FolderPath=NULL)                           # Check how our data looks like: ClusterSummary <- MCAres[[\"MCA_2Cond_Summary\"]]"},{"path":"/articles/Standard Metabolomics.html","id":"ora-on-each-metabolite-cluster","dir":"Articles","previous_headings":"2. Run MetaProViz Analysis > MCA","what":"ORA on each metabolite cluster","title":"Standard Metabolomics","text":"Pathway Input MetaProViz::MC_ORA.","code":""},{"path":"/articles/Standard Metabolomics.html","id":"run-metaproviz-visualisation","dir":"Articles","previous_headings":"","what":"3. Run MetaProViz Visualisation","title":"Standard Metabolomics","text":"big advantages MetaProViz visualization module flexible easy usage, showcase figures saved publication ready style format. instance, x- y-axis size always adjusted amount samples features (=metabolites) plotted, case Volcano plot PCA plot axis size fixed affected figure legends title. way, need many adjustments figures can just dropped presentation paper style. VizPlotName() functions constructed way. Indeed, parameter Plot_SettingsInfo user can pass named vector information metadata column used customize plot colour, shape creating individual plots, showcased different plot types. Via parameter Plot_SettingsFile user can pass metadata DF, can dependent plot type samples /features (=metabolites). case parameter named Plot_SettingsFile_Sample Plot_SettingsFile_Metab. Plot_Settings, user can label color /shape based additional information (e.g. Pathway information, Cluster information demographics like gender). Moreover, also enable plot individual plots applicable based MetaData (e.g. one plot metabolic pathway). need metadata table including information samples relevant e.g. color code: Metadata table including additional information Samples. Moreover, can use MetaData features (=Metabolites), loaded MappingInfo can also add information cluster metabolite assigned MetaProViz::MCA() analysis : Metadata table including additional information Metabolites. Noteworthy, can also use KEGG pathways used pathway analysis.","code":"MetaData_Sample <- Intra_Preprocessed[,c(1:2)]%>%    mutate(Celltype = case_when(Conditions==\"HK2\" ~ 'Healthy',                                Conditions==\"786-O\" ~ 'Primary Tumour',                                TRUE ~ 'Metastatic Tumour'))%>%    mutate(Status = case_when(Conditions==\"HK2\" ~ 'Healthy',                                TRUE ~ 'Cancer')) MetaData_Metab <-merge(MappingInfo%>%rownames_to_column(\"Metabolite\"), MCAres[[\"MCA_2Cond_Results\"]][,c(1, 14,15)], by=\"Metabolite\", all.y=TRUE)%>%   column_to_rownames(\"Metabolite\")"},{"path":"/articles/Standard Metabolomics.html","id":"pca-plots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"PCA plots","title":"Standard Metabolomics","text":"Principal component analysis (PCA) dimensionality reduction method reduces measured features (=metabolites) one sample features different principal components, whereby principal component can explain certain percentage variance different samples. Hence, enables interpretation sample clustering based measured features (=metabolites). mentioned , PCA plots can quite useful quality control, course offers us many opportunities, showcased . input, need DF contains samples rownames features (=metabolites) column names: Input_data MetaProViz::VizPCA(), samples rownames metabolites column names. Now lets check standard plot: Figure: Standard Settings. Next, can interactively choose shape color using additional information interest Metadata. Especially complex data, patient data, can valuable use different demographics (e.g. age, gender, medication,…) . First lets check batch effect colour coding biological replicates, case replicates cluster together. Figure: batch effect? Next, can colour code condition use biological replicates shape parameter: Figure: samples cluster conditions? different cell lines either control cancerous, can display . becomes apparent cell status responsible 64% variance (x-axis). Figure: samples cluster Cell status? can separate cancerous cell lines metastatic primary. shows us separated y-axis accounts 30%variance. Figure: samples cluster Cell type? Lastly, worth mentioning one can also change many style parameters customize plot.","code":"Input_PCA <- Intra_Preprocessed[,-c(1:5)]#remove columns that include Metadata such as cell type,... MetaProViz::VizPCA(InputData=Input_PCA) MetaProViz::VizPCA(SettingsInfo= c(color=\"Biological_Replicates\"),                    SettingsFile_Sample = MetaData_Sample ,                    InputData=Input_PCA,                    PlotName = \"Batch Effect\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Conditions\", shape=\"Biological_Replicates\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Sample Conditions\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Status\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Sample Status\") MetaProViz::VizPCA(SettingsInfo= c(color=\"Celltype\", shape=\"Status\"),                    SettingsFile_Sample= MetaData_Sample,                    InputData=Input_PCA,                    PlotName = \"Cell type\")"},{"path":"/articles/Standard Metabolomics.html","id":"heatmaps","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Heatmaps","title":"Standard Metabolomics","text":"Clustered heatmaps can useful understand patterns data, showcased different examples. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizHeatmap(), samples rownames metabolites column names. Now can generate overview heatmap. Since plot metabolites metabolite names plotted since get crowded (can enforce changing parameter enforce_FeatureNames = TRUE). Overview heatmap. can add many sample metadata information needed time: Colour sample metadata. Moreover, can also add metabolite metadata information: Colour metabolite metadata. Lastly, generate individual plot e.g. pathway metabolite clusters adding individual (individual_Sample individual_Metab) Plot_SettingsInfo. time can still maintain metadata information , samples metabolites. Together can help us draw biological conclusions different pathways: Indeed, can observe D-Amino acid metabolism many metabolites fall MCA-Cluster Core_DOWN, meaning comparison HK2 cells negative Log2FC 786-O 786-M1A.","code":"Input_Heatmap <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz::VizHeatmap(InputData = Input_Heatmap,                         PlotName = \"Overview\") MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Sample = list(\"Conditions\",\"Biological_Replicates\", \"Celltype\", \"Status\")),                        PlotName = \"Colour Samples\") # row annotation: Color for Metabolites MetaProViz::VizHeatmap(InputData = Input_Heatmap,                        SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(color_Metab = list(\"Pathway\")),                        SettingsFile_Metab =  MappingInfo,                         PlotName = \"Colour Metabolites\") # individual: One individual plot for each pathway, col annotation: Colour for samples MetaProViz::VizHeatmap(InputData = Input_Heatmap,                         SettingsFile_Sample = MetaData_Sample,                        SettingsInfo = c(individual_Metab = \"Pathway\",                                         color_Sample = list(\"Conditions\",\"Biological_Replicates\"),                                         color_Metab = list(\"RG2_Significant\")),                        SettingsFile_Metab =  MetaData_Metab,                        PlotName = \"Pathway\")"},{"path":"/articles/Standard Metabolomics.html","id":"superplots","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Superplots","title":"Standard Metabolomics","text":"Sometimes one might interested create individual plots metabolite understand differences specific conditions. common plot types bargraphs, boxplots violin plots. input, need DF contains samples rownames features (=metabolites) column names: Input MetaProViz::VizSuperplot(), samples rownames metabolites column names. also need Metadata need know conditions plot together. information replicates patient ID, can use colour plotted samples per condition superplots style described Lord et al (Lord et al. 2020).  Now, instance prefer boxplots bargraphs can simply change parameter PlotType:  can also change violin plots:","code":"Input_Superplot <-  Intra_Preprocessed[,-c(1:4)]#remove columns that include Metadata such as cell type,... MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Bar\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Box\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot MetaProViz:::VizSuperplot(InputData =Input_Superplot[,c(1:6)],#We just plot six metabolites                                            SettingsFile_Sample =MetaData_Sample,                                            SettingsInfo = c(Conditions=\"Conditions\", Superplot = \"Biological_Replicates\"),                                            PlotType = \"Violin\", #Bar, Box, Violin                                            PlotConditions = c(\"HK2\", \"786-O\", \"786-M1A\", \"786-M2A\"),#sets the order in which the samples should be plotted                                            StatComparisons = list(c(1,2),c(1,4)))#Stat comparisons to be included on the plot"},{"path":"/articles/Standard Metabolomics.html","id":"volcano-plot","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation","what":"Volcano plot","title":"Standard Metabolomics","text":"Input_data MetaProViz::VizVolcano() example differential analysis results MetaProViz::DMA(). Input_data MetaProViz::VizVolcano() example pathway enrichment results MetaProViz::DM_ORA().","code":""},{"path":"/articles/Standard Metabolomics.html","id":"standard","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Standard","title":"Standard Metabolomics","text":"first look results differential analysis (see section DMA ) comparison 786-M1A_vs_HK2: Figure: Standard figure displaying DMA results. seek plot metabolite names can change paramter SelectLab default (SelectLab=\"\") NULL metabolite names plotted randomly. Figure: Standard figure displaying DMA results. parameter SelectLab can also pass vector Metabolite names labeled: Figure: Standard figure displaying DMA results. Next may interested understand metabolite clusters based MCA metabolites plot correspond . order can provide Plot_SettingsFile additional information use information color code /shape dots volcano plot. order choose right column need provide vector Plot_SettingsInfo information. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Figure: Standard figure displaying DMA results colour coded/shaped metabolic clusters MCA results. Given also know, metabolic pathway metabolites correspond , can add information plot. also good example showcase flexibility visualisation function: Either use parameter Plot_SettingsFile= MetaData_Metab , column “Pathway” also Input_data can also pass Plot_SettingsFile= DMA_786-M1A_vs_HK2 simply use default Plot_SettingsFile=NULL, case Plot_SettingsInfo information (color) used Input_data. Figure: Standard figure displaying DMA results colour coded metabolic pathways shaped metabolic clusters MCA results. immediately see many pathways displayed plot, can make difficult interpret. Hence, change plot settings order get individual plots pathways:","code":"# Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\")) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        SelectLab = NULL) # Run with default parameter --> only need to provide Input_data and the title we like MetaProViz::VizVolcano(InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        SelectLab = c(\"N-acetylaspartylglutamate\", \"cystathionine\", \"orotidine\")) #Now we need to add our Plot_SettingsFile and the Plot_SettingsInfo: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"RG2_Significant\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour coded for metabolic clusters\" ) #If we want to use the shape instead of the colour for the cluster info, we can just change our Plot_SettingsInfo MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"RG2_Significant\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape for metabolic clusters, color for significance.\" ) #Of course, we can also adapt both, color and shape for the same parameter: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(shape=\"RG2_Significant\", color=\"RG2_Significant\"),                        SettingsFile= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Shape and color for metabolic clusters.\" ) #Now we can use color for the pathways and shape for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"Pathway\"),                        SettingsFile_Metab= MappingInfo,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2 Results of DMA. Colour for metabolic pathways.\",                        Subtitle= \"Results of DMA. Colour for metabolic pathways.\" ) #Now we can generate a plot for each pathway and color for the metabolite clusters: MetaProViz::VizVolcano(PlotSettings=\"Standard\",                        SettingsInfo= c(color=\"RG2_Significant\", individual=\"Pathway\"),                        SettingsFile_Metab= MetaData_Metab,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A versus HK2\",                        Subtitle= \"Results of DMA. Colour for metabolic pathways.\" )"},{"path":"/articles/Standard Metabolomics.html","id":"comparison","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"Comparison","title":"Standard Metabolomics","text":"Figure: Comparison. Now individual plots :","code":"MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        ComparisonName= c(InputData=\"786M1A_vs_HK\", InputData2= \"786-O_vs_HK2\"),                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" ) MetaProViz::VizVolcano(PlotSettings=\"Compare\",                        SettingsInfo= c(individual=\"Pathway\"),                        SettingsFile_Metab= MappingInfo,                        InputData=DMA_786M1A_vs_HK2%>%column_to_rownames(\"Metabolite\"),                        InputData2= DMA_Annova[[\"DMA\"]][[\"786-O_vs_HK2\"]]%>%column_to_rownames(\"Metabolite\"),                        PlotName= \"786M1A vs HK2 compared to 7860 vs HK2\",                        Subtitle= \"Results of DMA\" )"},{"path":"/articles/Standard Metabolomics.html","id":"pathwayenrichmentanalysis","dir":"Articles","previous_headings":"3. Run MetaProViz Visualisation > Volcano plot","what":"PathwayEnrichmentAnalysis","title":"Standard Metabolomics","text":"performed Pathway Enrichment Analysis (PEA) ORA GSEA, can also plot results add information Figure legends. need prepare correct input data including pathways used run pathway analysis, differential metabolite data used input pathway analysis results pathway analysis: Now can produce plots:","code":"#Prepare the Input: #1. InputData=Pathway analysis input: Must have features as column names. Those feature names need to match features in the pathway analysis file SettingsFile_Metab.  InputPEA <- DMA_786M1A_vs_HK2 %>%   filter(!is.na(KEGGCompound)) %>%   column_to_rownames(\"KEGGCompound\")  #2. InputData2=Pathway analysis output: Must have same column names as SettingsFile_Metab for Pathway name InputPEA2 <- DM_ORA_786M1A_vs_HK2 %>%   dplyr::rename(\"term\"=\"ID\")  #3. SettingsFile_Metab= Pathways used for pathway analysis: Must have same column names as SettingsFile_Metab for Pathway name and feature names need to match features in the InputData. PEA_Feature passes this column name! MetaProViz::VizVolcano(PlotSettings=\"PEA\",                        SettingsInfo= c(PEA_Pathway=\"term\",# Needs to be the same in both, SettingsFile_Metab and InputData2.                                        PEA_stat=\"p.adjust\",#Column InputData2                                        PEA_score=\"GeneRatio\",#Column InputData2                                        PEA_Feature=\"Metabolite\"),# Column SettingsFile_Metab (needs to be the same as row names in InputData)                        SettingsFile_Metab= KEGG_Pathways,#Must be the pathways used for pathway analysis                        InputData= InputPEA, #Must be the data you have used as an input for the pathway analysis                        InputData2= InputPEA2, #Must be the results of the pathway analysis                        PlotName= \"KEGG\",                        Subtitle= \"PEA\" ,                        SelectLab = NULL)"},{"path":"/articles/Standard Metabolomics.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Standard Metabolomics","text":"","code":"#> ─ Session info ─────────────────────────────────────────────────────────────────────────────────────────────────────── #>  setting  value #>  version  R version 4.4.1 (2024-06-14 ucrt) #>  os       Windows 10 x64 (build 19045) #>  system   x86_64, mingw32 #>  ui       RTerm #>  language en #>  collate  English_United Kingdom.utf8 #>  ctype    English_United Kingdom.utf8 #>  tz       Europe/Berlin #>  date     2024-10-02 #>  pandoc   3.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown) #>  #> ─ Packages ─────────────────────────────────────────────────────────────────────────────────────────────────────────── #>  package          * version   date (UTC) lib source #>  abind              1.4-8     2024-09-12 [1] CRAN (R 4.4.1) #>  AnnotationDbi      1.66.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  ape                5.8       2024-04-11 [1] CRAN (R 4.4.1) #>  aplot              0.2.3     2024-06-17 [1] CRAN (R 4.4.1) #>  backports          1.5.0     2024-05-23 [1] CRAN (R 4.4.0) #>  beeswarm           0.4.0     2021-06-01 [1] CRAN (R 4.4.0) #>  Biobase            2.64.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  BiocGenerics       0.50.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  BiocParallel       1.38.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  Biostrings         2.72.1    2024-06-02 [1] Bioconductor 3.19 (R 4.4.0) #>  bit                4.5.0     2024-09-20 [1] CRAN (R 4.4.1) #>  bit64              4.5.2     2024-09-22 [1] CRAN (R 4.4.1) #>  blob               1.2.4     2023-03-17 [1] CRAN (R 4.4.1) #>  broom              1.0.7     2024-09-26 [1] CRAN (R 4.4.1) #>  bslib              0.8.0     2024-07-29 [1] CRAN (R 4.4.1) #>  cachem             1.1.0     2024-05-16 [1] CRAN (R 4.4.1) #>  car                3.1-3     2024-09-27 [1] CRAN (R 4.4.1) #>  carData            3.0-5     2022-01-06 [1] CRAN (R 4.4.1) #>  cellranger         1.1.0     2016-07-27 [1] CRAN (R 4.4.1) #>  checkmate          2.3.2     2024-07-29 [1] CRAN (R 4.4.1) #>  cli                3.6.3     2024-06-21 [1] CRAN (R 4.4.1) #>  clusterProfiler    4.12.6    2024-08-25 [1] Bioconductor 3.19 (R 4.4.1) #>  codetools          0.2-20    2024-03-31 [2] CRAN (R 4.4.1) #>  colorspace         2.1-1     2024-07-26 [1] CRAN (R 4.4.1) #>  cowplot            1.1.3     2024-01-22 [1] CRAN (R 4.4.1) #>  crayon             1.5.3     2024-06-20 [1] CRAN (R 4.4.1) #>  curl               5.2.3     2024-09-20 [1] CRAN (R 4.4.1) #>  data.table         1.16.0    2024-08-27 [1] CRAN (R 4.4.1) #>  DBI                1.2.3     2024-06-02 [1] CRAN (R 4.4.1) #>  desc               1.4.3     2023-12-10 [1] CRAN (R 4.4.1) #>  digest             0.6.37    2024-08-19 [1] CRAN (R 4.4.1) #>  DOSE               3.30.5    2024-09-01 [1] Bioconductor 3.19 (R 4.4.1) #>  dplyr            * 1.1.4     2023-11-17 [1] CRAN (R 4.4.1) #>  EnhancedVolcano    1.22.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  enrichplot         1.24.4    2024-09-01 [1] Bioconductor 3.19 (R 4.4.1) #>  evaluate           1.0.0     2024-09-17 [1] CRAN (R 4.4.1) #>  factoextra         1.0.7     2020-04-01 [1] CRAN (R 4.4.1) #>  fansi              1.0.6     2023-12-08 [1] CRAN (R 4.4.1) #>  farver             2.1.2     2024-05-13 [1] CRAN (R 4.4.1) #>  fastmap            1.2.0     2024-05-15 [1] CRAN (R 4.4.1) #>  fastmatch          1.1-4     2023-08-18 [1] CRAN (R 4.4.0) #>  fgsea              1.30.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  forcats          * 1.0.0     2023-01-29 [1] CRAN (R 4.4.1) #>  Formula            1.2-5     2023-02-24 [1] CRAN (R 4.4.0) #>  fs                 1.6.4     2024-04-25 [1] CRAN (R 4.4.1) #>  generics           0.1.3     2022-07-05 [1] CRAN (R 4.4.1) #>  GenomeInfoDb       1.40.1    2024-06-16 [1] Bioconductor 3.19 (R 4.4.0) #>  GenomeInfoDbData   1.2.12    2024-09-27 [1] Bioconductor #>  ggbeeswarm         0.7.2     2023-04-29 [1] CRAN (R 4.4.1) #>  ggforce            0.4.2     2024-02-19 [1] CRAN (R 4.4.1) #>  ggfortify        * 0.4.17    2024-04-17 [1] CRAN (R 4.4.1) #>  ggfun              0.1.6     2024-08-28 [1] CRAN (R 4.4.1) #>  ggplot2          * 3.5.1     2024-04-23 [1] CRAN (R 4.4.1) #>  ggplotify          0.1.2     2023-08-09 [1] CRAN (R 4.4.1) #>  ggpubr             0.6.0     2023-02-10 [1] CRAN (R 4.4.1) #>  ggraph             2.2.1     2024-03-07 [1] CRAN (R 4.4.1) #>  ggrepel            0.9.6     2024-09-07 [1] CRAN (R 4.4.1) #>  ggsignif           0.6.4     2022-10-13 [1] CRAN (R 4.4.1) #>  ggtree             3.12.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  glue               1.7.0     2024-01-09 [1] CRAN (R 4.4.1) #>  GO.db              3.19.1    2024-09-27 [1] Bioconductor #>  GOSemSim           2.30.2    2024-08-21 [1] Bioconductor 3.19 (R 4.4.1) #>  graphlayouts       1.2.0     2024-09-24 [1] CRAN (R 4.4.1) #>  gridExtra          2.3       2017-09-09 [1] CRAN (R 4.4.1) #>  gridGraphics       0.5-1     2020-12-13 [1] CRAN (R 4.4.1) #>  gson               0.1.0     2023-03-07 [1] CRAN (R 4.4.1) #>  gtable             0.3.5     2024-04-22 [1] CRAN (R 4.4.1) #>  gtools             3.9.5     2023-11-20 [1] CRAN (R 4.4.1) #>  hash               2.2.6.3   2023-08-19 [1] CRAN (R 4.4.1) #>  highr              0.11      2024-05-26 [1] CRAN (R 4.4.1) #>  hms                1.1.3     2023-03-21 [1] CRAN (R 4.4.1) #>  htmltools          0.5.8.1   2024-04-04 [1] CRAN (R 4.4.1) #>  htmlwidgets        1.6.4     2023-12-06 [1] CRAN (R 4.4.1) #>  httr               1.4.7     2023-08-15 [1] CRAN (R 4.4.1) #>  httr2              1.0.5     2024-09-26 [1] CRAN (R 4.4.1) #>  igraph             2.0.3     2024-03-13 [1] CRAN (R 4.4.1) #>  inflection         1.3.6     2022-06-15 [1] CRAN (R 4.4.1) #>  IRanges            2.38.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1) #>  jquerylib          0.1.4     2021-04-26 [1] CRAN (R 4.4.1) #>  jsonlite           1.8.9     2024-09-20 [1] CRAN (R 4.4.1) #>  kableExtra         1.4.0     2024-01-24 [1] CRAN (R 4.4.1) #>  KEGGREST           1.44.1    2024-06-19 [1] Bioconductor 3.19 (R 4.4.0) #>  knitr              1.48      2024-07-07 [1] CRAN (R 4.4.1) #>  labeling           0.4.3     2023-08-29 [1] CRAN (R 4.4.0) #>  later              1.3.2     2023-12-06 [1] CRAN (R 4.4.1) #>  lattice            0.22-6    2024-03-20 [2] CRAN (R 4.4.1) #>  lazyeval           0.2.2     2019-03-15 [1] CRAN (R 4.4.1) #>  lifecycle          1.0.4     2023-11-07 [1] CRAN (R 4.4.1) #>  logger             0.3.0     2024-03-05 [1] CRAN (R 4.4.1) #>  lubridate        * 1.9.3     2023-09-27 [1] CRAN (R 4.4.1) #>  magrittr         * 2.0.3     2022-03-30 [1] CRAN (R 4.4.1) #>  MASS               7.3-60.2  2024-04-26 [2] CRAN (R 4.4.1) #>  Matrix             1.7-0     2024-04-26 [2] CRAN (R 4.4.1) #>  memoise            2.0.1     2021-11-26 [1] CRAN (R 4.4.1) #>  MetaProViz       * 2.1.0     2024-10-02 [1] Github (saezlab/MetaProViz@9a49669) #>  munsell            0.5.1     2024-04-01 [1] CRAN (R 4.4.1) #>  nlme               3.1-164   2023-11-27 [2] CRAN (R 4.4.1) #>  OmnipathR          3.13.26   2024-10-02 [1] Github (saezlab/OmnipathR@662c4c8) #>  patchwork          1.3.0     2024-09-16 [1] CRAN (R 4.4.1) #>  pheatmap           1.0.12    2019-01-04 [1] CRAN (R 4.4.1) #>  pillar             1.9.0     2023-03-22 [1] CRAN (R 4.4.1) #>  pkgconfig          2.0.3     2019-09-22 [1] CRAN (R 4.4.1) #>  pkgdown            2.1.1     2024-09-17 [1] CRAN (R 4.4.1) #>  plyr               1.8.9     2023-10-02 [1] CRAN (R 4.4.1) #>  png                0.1-8     2022-11-29 [1] CRAN (R 4.4.0) #>  polyclip           1.10-7    2024-07-23 [1] CRAN (R 4.4.1) #>  prettyunits        1.2.0     2023-09-24 [1] CRAN (R 4.4.1) #>  progress           1.2.3     2023-12-06 [1] CRAN (R 4.4.1) #>  purrr            * 1.0.2     2023-08-10 [1] CRAN (R 4.4.1) #>  qcc                2.7       2017-07-11 [1] CRAN (R 4.4.1) #>  qvalue             2.36.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  R.methodsS3        1.8.2     2022-06-13 [1] CRAN (R 4.4.0) #>  R.oo               1.26.0    2024-01-24 [1] CRAN (R 4.4.0) #>  R.utils            2.12.3    2023-11-18 [1] CRAN (R 4.4.1) #>  R6                 2.5.1     2021-08-19 [1] CRAN (R 4.4.1) #>  ragg               1.3.3     2024-09-11 [1] CRAN (R 4.4.1) #>  rappdirs           0.3.3     2021-01-31 [1] CRAN (R 4.4.1) #>  RColorBrewer       1.1-3     2022-04-03 [1] CRAN (R 4.4.0) #>  Rcpp               1.0.13    2024-07-17 [1] CRAN (R 4.4.1) #>  readr            * 2.1.5     2024-01-10 [1] CRAN (R 4.4.1) #>  readxl             1.4.3     2023-07-06 [1] CRAN (R 4.4.1) #>  reshape2           1.4.4     2020-04-09 [1] CRAN (R 4.4.1) #>  rlang            * 1.1.4     2024-06-04 [1] CRAN (R 4.4.1) #>  rmarkdown          2.28      2024-08-17 [1] CRAN (R 4.4.1) #>  RSQLite            2.3.7     2024-05-27 [1] CRAN (R 4.4.1) #>  rstatix            0.7.2     2023-02-01 [1] CRAN (R 4.4.1) #>  rstudioapi         0.16.0    2024-03-24 [1] CRAN (R 4.4.1) #>  rvest              1.0.4     2024-02-12 [1] CRAN (R 4.4.1) #>  S4Vectors          0.42.1    2024-07-03 [1] Bioconductor 3.19 (R 4.4.1) #>  sass               0.4.9     2024-03-15 [1] CRAN (R 4.4.1) #>  scales             1.3.0     2023-11-28 [1] CRAN (R 4.4.1) #>  scatterpie         0.2.4     2024-08-28 [1] CRAN (R 4.4.1) #>  sessioninfo        1.2.2     2021-12-06 [1] CRAN (R 4.4.1) #>  shadowtext         0.1.4     2024-07-18 [1] CRAN (R 4.4.1) #>  stringi            1.8.4     2024-05-06 [1] CRAN (R 4.4.0) #>  stringr          * 1.5.1     2023-11-14 [1] CRAN (R 4.4.1) #>  svglite            2.1.3     2023-12-08 [1] CRAN (R 4.4.1) #>  systemfonts        1.1.0     2024-05-15 [1] CRAN (R 4.4.1) #>  textshaping        0.4.0     2024-05-24 [1] CRAN (R 4.4.1) #>  tibble           * 3.2.1     2023-03-20 [1] CRAN (R 4.4.1) #>  tidygraph          1.3.1     2024-01-30 [1] CRAN (R 4.4.1) #>  tidyr            * 1.3.1     2024-01-24 [1] CRAN (R 4.4.1) #>  tidyselect         1.2.1     2024-03-11 [1] CRAN (R 4.4.1) #>  tidytree           0.4.6     2023-12-12 [1] CRAN (R 4.4.1) #>  tidyverse        * 2.0.0     2023-02-22 [1] CRAN (R 4.4.1) #>  timechange         0.3.0     2024-01-18 [1] CRAN (R 4.4.1) #>  treeio             1.28.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  tweenr             2.0.3     2024-02-26 [1] CRAN (R 4.4.1) #>  tzdb               0.4.0     2023-05-12 [1] CRAN (R 4.4.1) #>  UCSC.utils         1.0.0     2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  utf8               1.2.4     2023-10-22 [1] CRAN (R 4.4.1) #>  vctrs              0.6.5     2023-12-01 [1] CRAN (R 4.4.1) #>  vipor              0.4.7     2023-12-18 [1] CRAN (R 4.4.1) #>  viridis            0.6.5     2024-01-29 [1] CRAN (R 4.4.1) #>  viridisLite        0.4.2     2023-05-02 [1] CRAN (R 4.4.1) #>  vroom              1.6.5     2023-12-05 [1] CRAN (R 4.4.1) #>  withr              3.0.1     2024-07-31 [1] CRAN (R 4.4.1) #>  xfun               0.47      2024-08-17 [1] CRAN (R 4.4.1) #>  XML                3.99-0.17 2024-06-25 [1] CRAN (R 4.4.1) #>  xml2               1.3.6     2023-12-04 [1] CRAN (R 4.4.1) #>  XVector            0.44.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  yaml               2.3.10    2024-07-26 [1] CRAN (R 4.4.1) #>  yulab.utils        0.1.7     2024-08-26 [1] CRAN (R 4.4.1) #>  zip                2.3.1     2024-01-27 [1] CRAN (R 4.4.1) #>  zlibbioc           1.50.0    2024-05-01 [1] Bioconductor 3.19 (R 4.4.0) #>  #>  [1] C:/Users/chris/AppData/Local/R/win-library/4.4 #>  [2] C:/Program Files/R/R-4.4.1/library #>  #> ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────"},{"path":[]},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Christina Schmidt. Author, maintainer. Dimitrios Prymidis. Author. Denes Turei. Author. Macabe Daley. Author. Julio Saez-Rodriguez. Author. Christian Frezza. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schmidt C, Prymidis D, Turei D, Daley M, Saez-Rodriguez J, Frezza C (2024). MetaProViz: METabolomics pre-PRocessing, functiOnal analysis VIZualisation. R package version 2.1.0, https://saezlab.github.io/MetaProViz.","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},   author = {Christina Schmidt and Dimitrios Prymidis and Denes Turei and Macabe Daley and Julio Saez-Rodriguez and Christian Frezza},   year = {2024},   note = {R package version 2.1.0},   url = {https://saezlab.github.io/MetaProViz}, }"},{"path":[]},{"path":"/index.html","id":"short-introduction","dir":"","previous_headings":"","what":"Short Introduction","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz (Metabolomics Processing, functional analysis Visualization), free open-source R-package provides mechanistic hypotheses metabolomics data integrating prior knowledge literature metabolomics. MetaProViz offers interactive framework consisting four modules: Processing, differential analysis, functional analysis visualization intracellular exometabolomics (=consumption-release (CoRe) data). modules functions can used independently combination (Fig.1). Fig. 1: Overview MetaProViz functions. first module, MetaProViz, Processing, allows customized processing raw peak metabolomics data different experimental setups, including options perform feature filtering due missingness, Total Ion Count (TIC) normalisation, Missing Value Imputation (MVI) based half-minimum outlier detection based Hotellin’s T2. pre-processing parameters can customized combined needed. second module MetaProViz, Differential Metabolite Analysis (DMA), allows user perform differential analysis two conditions (e.g. Tumour versus Healthy) calculating Log2FC, p-value, adjusted p-value t-value, whereby user can choose test statistics. input can either output Preprocessing module DF including metabolite values information conditions compared. third module MetaProViz, Functional Analysis, includes different methods create clusters metabolites based distribution across data using logical regulatory rules, prior knowledge enrichment analysis functions perform representation analysis (ORA). , user can either input output Processing Differential Metabolite Analysis (DMA) module, DF including Log2FC statistics metabolite values. fourth module MetaProViz, Visualization, can easily create customized visualizations output results MetaProViz modules custom files. enable overview plots PCA, heatmap, Volcano plot, also individual graphs metabolite bar graphs, box plots violin plots. Moreover, user can provide additional information pathways metabolites correspond , clusters metabolites assigned meta-information customize plots color, shape selections, thus enabling biological interpretation results otherwise missed data.","code":""},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"generated several tutorials showcasing different functionalities MetaProViz offers using publicly available datasets, included example data within MetaProViz. can find tutorial top “Tutorials” button, can follow specific user case examples different analysis. Otherwise, can also follow links : - Standard metabolomics data - Consumption-Release (CoRe) metabolomics data cell culture media - Enrichment Analysis - Metadata Analysis find brief overview information installation package dependencies.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"MetaProViz R package install package, start R enter: Now MetaProViz can imported :","code":"devtools::install_github(\"https://github.com/saezlab/MetaProViz\") library(MetaProViz)"},{"path":"/index.html","id":"dependencies","dir":"","previous_headings":"Installation","what":"Dependencies","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"using MetaProViz following packages required: done best ensure dependencies documented, aren’t please let us know try resolve .","code":"\"tidyverse\" \"ggplot2\" \"factoextra\" \"qcc\" \"hash\" \"reshape\" \"gridExtra\" \"inflection\" \"patchwork\" \"clusterProfiler\" \"ggupset\" \"gtools\" \"EnhancedVolcano\" \"writexl\" \"pheatmap\" \"ggfortify\""},{"path":"/index.html","id":"windows-specifications","dir":"","previous_headings":"Installation","what":"Windows specifications","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"Note running Windows might issue long paths, can resolve registry Windows 10: Computer Configuration > Administrative Templates > System > Filesystem > Enable Win32 long paths (different version Windows, just google “Long paths fix” Windows version)","code":""},{"path":"/index.html","id":"liscence","dir":"","previous_headings":"","what":"Liscence","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"GNU GENERAL PUBLIC LICENSE, Version 3, 29 June 2007","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"METabolomics pre-PRocessing, functiOnal analysis and VIZualisation","text":"","code":"@Manual{,   title = {MetaProViz: METabolomics pre-PRocessing, functiOnal analysis and VIZualisation},   author = {Christina Schmidt and Dimitrios Prymidis and Julio Saez-Rodriguez and Christian Frezza},   year = {2023},   note = {R package version 2.1.0}, }"},{"path":[]},{"path":"/reference/ClusterORA.html","id":null,"dir":"Reference","previous_headings":"","what":" —————————  — ClusterORA","title":" —————————  — ClusterORA","text":"script allows ClusterORA","code":""},{"path":"/reference/ClusterORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" —————————  — ClusterORA","text":"","code":"ClusterORA(   InputData,   SettingsInfo = c(ClusterColumn = \"RG2_Significant\", BackgroundColumn = \"BG_Method\",     PathwayTerm = \"term\", PathwayFeature = \"Metabolite\"),   RemoveBackground = TRUE,   PathwayFile,   PathwayName = \"\",   minGSSize = 10,   maxGSSize = 1000,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/ClusterORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" —————————  — ClusterORA","text":"InputData DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) PathwayFile. SettingsInfo Optional:  Pass ColumnName column including cluster names ORA performed (=ClusterColumn). BackgroundColumn passes column name needed RemoveBackground=TRUE. Also pass ColumnName PathwayFile including term feature names. (ClusterColumn= ColumnName InputData, BackgroundColumn = ColumnName InputData, PathwayTerm= ColumnName PathwayFile, PathwayFeature= ColumnName PathwayFile) c(FeatureName=\"Metabolite\", ClusterColumn=\"RG2_Significant\", BackgroundColumn=\"BG_Method\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") RemoveBackground Optional:  TRUE, column BackgroundColumn  name needs SettingsInfo, includes TRUE/FALSE metabolite fall background based chosen Background method e.g. MCA_2Cond removed universe. default: TRUE PathwayFile DF must include column \"term\" pathway name, column \"Feature\" Metabolite name ID column \"Description\" pathway description. PathwayName Optional:  Name pathway list used default: \"\" minGSSize Optional:  minimum group size ORA default: 10 maxGSSize Optional:  maximum group size ORA default: 1000 SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/ClusterORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" —————————  — ClusterORA","text":"Saves results individual .csv files.","code":""},{"path":"/reference/ClusterORA.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":" —————————  — ClusterORA","text":"Uses enricher run ORA metabolite cluster MCA functions using pathway list","code":""},{"path":"/reference/DMA.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","title":"This script allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"script allows perform differential metabolite analysis obtain Log2FC, pval, padj tval comparing two multiple conditions.","code":""},{"path":"/reference/DMA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"","code":"DMA(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Numerator = NULL, Denominator = NULL),   StatPval = \"lmFit\",   StatPadj = \"fdr\",   SettingsFile_Metab = NULL,   CoRe = FALSE,   VST = FALSE,   PerformShapiro = TRUE,   PerformBartlett = TRUE,   Transform = TRUE,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/DMA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform differential metabolite analysis to obtain a Log2FC, pval, padj and tval comparing two or multiple conditions. — DMA","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. SettingsFile_Sample DF contains metadata information samples, combined input data based unique sample identifiers used rownames. SettingsInfo Optional:  Named vector including information conditions column c(Conditions=\"ColumnName_SettingsFile\"). Can additionally pass information numerator denominator c(Numerator = \"ColumnName_SettingsFile\", Denominator  = \"ColumnName_SettingsFile\") specifying comparison(s) done (one-vs-one, -vs-one, -vs-). Using =NULL selects condition performs multiple comparison -vs-. Log2FC obtained dividing numerator denominator, thus positive Log2FC values mean higher expression numerator presented right side Volcano plot (CoRe Log2Distance). Default = c(conditions=\"Conditions\", numerator = NULL, denumerator = NULL) StatPval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test, wilcox.test, \"chisq.test\", \"cor.test\" lmFit (=limma), one-vs--vs-comparison choose aov (=anova), welch(=welch anova), kruskal.test lmFit (=limma) Default = \"lmFit\" StatPadj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = \"fdr\" SettingsFile_Metab Optional:  DF contains metadata information , .e. pathway information, retention time,..., metabolite. row names must match metabolite names columns InputData. Default = NULL CoRe Optional:  TRUE FALSE whether Consumption/Release  input used. Default = FALSE VST TRUE FALSE whether use variance stabilizing transformation data linear modeling used hypothesis testing. Default = FALSE PerformShapiro TRUE FALSE whether perform shapiro.test get informed data distribution (normal versus -normal distribution. Default = TRUE PerformBartlett TRUE FALSE whether perform bartlett.test. Default = TRUE Transform TRUE FALSE. TRUE expect data log2 transformed log2 transformation performed within limma function Log2FC calculation. FALSE expect data log2 transformed impacts Log2FC calculation limma. default: NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/InspectID.html","id":null,"dir":"Reference","previous_headings":"","what":"Inspect ID — InspectID","title":"Inspect ID — InspectID","text":"Inspect well IDs map translated format (e.g. PubChem) original data format (e.g. KEGG), terms direct mapping, one--many relationships.","code":""},{"path":"/reference/InspectID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inspect ID — InspectID","text":"","code":"InspectID(   Input_DataFrame,   SettingsInfo = list(OriginalIDcolumn = \"MetaboliteID\", TranslatedCollapsedIDcolumn =     \"chebi_collapsed\", Pathway = \"term\") )"},{"path":"/reference/InspectID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inspect ID — InspectID","text":"Two data frames, first summary mapping Original Translated, second reverse, Translated Original, counts per unique ID pathway.","code":""},{"path":"/reference/LoadHallmarks.html","id":null,"dir":"Reference","previous_headings":"","what":"Toy Data Import — LoadHallmarks","title":"Toy Data Import — LoadHallmarks","text":"Import process .csv file create toy data.","code":""},{"path":"/reference/LoadHallmarks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Toy Data Import — LoadHallmarks","text":"","code":"LoadHallmarks()"},{"path":"/reference/LoadHallmarks.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Toy Data Import — LoadHallmarks","text":"data frame containing toy data.","code":""},{"path":"/reference/LoadKEGG.html","id":null,"dir":"Reference","previous_headings":"","what":"KEGG — LoadKEGG","title":"KEGG — LoadKEGG","text":"Import process KEGG.","code":""},{"path":"/reference/LoadKEGG.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"KEGG — LoadKEGG","text":"","code":"LoadKEGG()"},{"path":"/reference/LoadKEGG.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"KEGG — LoadKEGG","text":"data frame containing KEGG pathways ORA.","code":""},{"path":"/reference/LoadKEGG.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"KEGG — LoadKEGG","text":"Imports KEGG pathways environment","code":""},{"path":"/reference/LoadMetalinks.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to — LoadMetalinks","title":"Function to — LoadMetalinks","text":"Function ","code":""},{"path":"/reference/LoadMetalinks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to — LoadMetalinks","text":"","code":"LoadMetalinks(   types = NULL,   cell_location = NULL,   tissue_location = NULL,   biospecimen_location = NULL,   disease = NULL,   pathway = NULL,   hmdb_ids = NULL,   uniprot_ids = NULL,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/LoadMetalinks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to — LoadMetalinks","text":"types Desired edge types. Options : \"lr\", \"pd\", 'lr' stands 'ligand-receptor' 'pd' stands 'production-degradation'.default: NULL cell_location Desired metabolite cell locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Cytoplasm\", \"Endoplasmic reticulum\", \"Extracellular\", \"Lysosome\" , \"Mitochondria\", \"Peroxisome\", \"Membrane\", \"Nucleus\", \"Golgi apparatus\" , \"Inner mitochondrial membrane\". default: NULL tissue_location Desired metabolite tissue locations. Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". Options : \"Placenta\", \"Adipose Tissue\",\"Bladder\", \"Brain\", \"Epidermis\",\"Kidney\", \"Liver\", \"Neuron\", \"Pancreas\", \"Prostate\", \"Skeletal Muscle\", \"Spleen\", \"Testis\", \"Thyroid Gland\", \"Adrenal Medulla\", \"Erythrocyte\",\"Fibroblasts\", \"Intestine\", \"Ovary\", \"Platelet\", \"Tissues\", \"Semen\", \"Adrenal Gland\", \"Adrenal Cortex\", \"Heart\", \"Lung\", \"Hair\", \"Eye Lens\", \"Leukocyte\", Retina\", \"Smooth Muscle\", \"Gall Bladder\", \"Bile\",  \"Bone Marrow\", \"Blood\", \"Basal Ganglia\", \"Cartilage\". default: NULL biospecimen_location Desired metabolite biospecimen locations.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\").View options setting \"?\".  \"Blood\", \"Feces\", \"Saliva\", \"Sweat\", \"Urine\", \"Breast Milk\", \"Cellular Cytoplasm\", \"Cerebrospinal Fluid (CSF)\", \"Amniotic Fluid\" , \"Aqueous Humour\", \"Ascites Fluid\", \"Lymph\", \"Tears\", \"Breath\", \"Bile\", \"Semen\", \"Pericardial Effusion\".default: NULL disease Desired metabolite diseases.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\". default: NULL pathway Desired metabolite pathways.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL hmdb_ids Desired HMDB IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL uniprot_ids Desired UniProt IDs.Pass selection using c(\"Select1\", \"Select2\", \"Selectn\"). View options setting \"?\".default: NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/Make_GeneMetabSet.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"Function add metabolite HMDB IDs existing genesets based cosmosR prior knowledge","code":""},{"path":"/reference/Make_GeneMetabSet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"","code":"Make_GeneMetabSet(   Input_GeneSet,   SettingsInfo = c(Target = \"gene\"),   PKName = NULL,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/Make_GeneMetabSet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to add metabolite HMDB IDs to existing genesets based on cosmosR prior knowledge — Make_GeneMetabSet","text":"Input_GeneSet Dataframe two columns source (=term) Target (=gene), e.g. Hallmarks. SettingsInfo Optional:   Column name Target Input_GeneSet. Default = c(Target=\"gene\") PKName Optional:  Name prior knowledge resource. default: NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/MCA_2Cond.html","id":"-","dir":"Reference","previous_headings":"","what":"—————————","title":" ————————— MCA_2Cond  — MCA_2Cond","text":"MCA_2Cond","code":""},{"path":"/reference/MCA_2Cond.html","id":null,"dir":"Reference","previous_headings":"","what":" ————————— MCA_2Cond  — MCA_2Cond","title":" ————————— MCA_2Cond  — MCA_2Cond","text":"script allows perform metabolite clustering analysis computes clusters metabolites based regulatory rules two conditions (e.g. KO versus WT Hypoxia = Cond1 KO versus WT Normoxia = Cond2).","code":""},{"path":"/reference/MCA_2Cond.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":" ————————— MCA_2Cond  — MCA_2Cond","text":"","code":"MCA_2Cond(   InputData_C1,   InputData_C2,   SettingsInfo_C1 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   SettingsInfo_C2 = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   FeatureID = \"Metabolite\",   SaveAs_Table = \"csv\",   BackgroundMethod = \"C1&C2\",   FolderPath = NULL )"},{"path":"/reference/MCA_2Cond.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":" ————————— MCA_2Cond  — MCA_2Cond","text":"InputData_C1 DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. InputData_C2 DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. SettingsInfo_C1 Optional:  Pass ColumnNames Cutoffs condition 1 including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_C1,StatCol=ColumnName_InputData_C1, StatCutoff= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) SettingsInfo_C2 Optional:  Pass ColumnNames Cutoffs condition 2 includingthe value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_C2,StatCol=ColumnName_InputData_C2, StatCutoff= NumericValue, ValueCutoff=NumericValue)Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) FeatureID Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" BackgroundMethod Optional:  Background method C1|C2, C1&C2, C2, C1 * Default=\"C1&C2\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MCA_2Cond.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":" ————————— MCA_2Cond  — MCA_2Cond","text":"MCA instance MetaProViz package","code":""},{"path":"/reference/MCA_CoRe.html","id":null,"dir":"Reference","previous_headings":"","what":"MCA_CoRe — MCA_CoRe","title":"MCA_CoRe — MCA_CoRe","text":"script allows perform metabolite clustering analysis computes clusters metabolites based regulatory rules Intracellular culture media metabolomics (CoRe experiment).","code":""},{"path":"/reference/MCA_CoRe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCA_CoRe — MCA_CoRe","text":"","code":"MCA_CoRe(   InputData_Intra,   InputData_CoRe,   SettingsInfo_Intra = c(ValueCol = \"Log2FC\", StatCol = \"p.adj\", StatCutoff = 0.05,     ValueCutoff = 1),   SettingsInfo_CoRe = c(DirectionCol = \"CoRe\", ValueCol = \"Log2(Distance)\", StatCol =     \"p.adj\", StatCutoff = 0.05, ValueCutoff = 1),   FeatureID = \"Metabolite\",   SaveAs_Table = \"csv\",   BackgroundMethod = \"Intra&CoRe\",   FolderPath = NULL )"},{"path":"/reference/MCA_CoRe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCA_CoRe — MCA_CoRe","text":"InputData_Intra DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. InputData_CoRe DF data (results e.g. DMA) containing metabolites rows corresponding Log2FC stat (p-value, p.adjusted) value columns. additionally require SettingsInfo_Intra Optional:  Pass ColumnNames Cutoffs intracellular metabolomics including value column (e.g. Log2FC, Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(ValueCol=ColumnName_InputData_Intra,StatCol=ColumnName_InputData_Intra, StatCutoff= NumericValue, ValueCutoff=NumericValue) Default=c(ValueCol=\"Log2FC\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) SettingsInfo_CoRe Optional:  Pass ColumnNames Cutoffs consumption-release metabolomics including direction column, value column (e.g. Log2Diff, t.val, etc) stats column (e.g. p.adj, p.val). must include: c(DirectionCol= ColumnName_InputData_CoRe,ValueCol=ColumnName_InputData_CoRe,StatCol=ColumnName_InputData_CoRe, StatCutoff= NumericValue, ValueCutoff=NumericValue)Default=c(DirectionCol=\"CoRe\", ValueCol=\"Log2(Distance)\",StatCol=\"p.adj\", StatCutoff= 0.05, ValueCutoff=1) FeatureID Optional:  Column name Column including Metabolite identifiers. MUST Input files. Default=\"Metabolite\" SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\" BackgroundMethod Optional:  Background method `Intra|CoRe, Intra&CoRe, CoRe, Intra * Default=\"Intra&CoRe\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MCA_CoRe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCA_CoRe — MCA_CoRe","text":"MCA instance MetaProViz package","code":""},{"path":"/reference/MCA_rules.html","id":null,"dir":"Reference","previous_headings":"","what":"MCA regulatory rules Import — MCA_rules","title":"MCA regulatory rules Import — MCA_rules","text":"Import process .csv file create toy data.","code":""},{"path":"/reference/MCA_rules.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MCA regulatory rules Import — MCA_rules","text":"","code":"MCA_rules(Method)"},{"path":"/reference/MCA_rules.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MCA regulatory rules Import — MCA_rules","text":"Method Either \"2Cond\" \"CoRe\" depending regulatory rules like load","code":""},{"path":"/reference/MCA_rules.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MCA regulatory rules Import — MCA_rules","text":"data frame containing toy data.","code":""},{"path":"/reference/MCA_rules.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MCA regulatory rules Import — MCA_rules","text":"Imports MCA regulatory rules environment","code":""},{"path":"/reference/MetaAnalysis.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform — MetaAnalysis","title":"This script allows you to perform — MetaAnalysis","text":"script allows perform","code":""},{"path":"/reference/MetaAnalysis.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform — MetaAnalysis","text":"","code":"MetaAnalysis(   InputData,   SettingsFile_Sample,   Scaling = TRUE,   Percentage = 0.1,   StatCutoff = 0.05,   SaveAs_Table = \"csv\",   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/MetaAnalysis.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform — MetaAnalysis","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL Scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE Percentage Optional:  Percentage top bottom features displayed results. Default = 0.1 StatCutoff Optional:  Cutoff adjusted p-value ANOVA test. Default = 0.05 SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/MetaPK.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta prior-knowledge — MetaPK","title":"Meta prior-knowledge — MetaPK","text":"Meta prior-knowledge","code":""},{"path":"/reference/MetaPK.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta prior-knowledge — MetaPK","text":"","code":"MetaPK(InputData, SettingsFile_Sample, SaveAs_Table = \"csv\", FolderPath = NULL)"},{"path":"/reference/MetaPK.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta prior-knowledge — MetaPK","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column. SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: Path folder results saved . default: NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. Default = svg","code":""},{"path":"/reference/metaproviz_config_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Current config file path of MetaProViz — metaproviz_config_path","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Current config file path MetaProViz","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path(user = FALSE)"},{"path":"/reference/metaproviz_config_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"user Logical: prioritize user level config even config current working directory available.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"Character: path config file.","code":""},{"path":"/reference/metaproviz_config_path.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Current config file path of MetaProViz — metaproviz_config_path","text":"","code":"metaproviz_config_path() #> [1] \"C:\\\\Users\\\\chris\\\\AppData\\\\Roaming/saezlab/MetaProViz/metaproviz.yml\""},{"path":"/reference/metaproviz_load_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Load the package configuration from a config file — metaproviz_load_config","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Load package configuration config file","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"metaproviz_load_config(path = NULL, title = \"default\", user = FALSE, ...)"},{"path":"/reference/metaproviz_load_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Load the package configuration from a config file — metaproviz_load_config","text":"path Path config file. title Load config title. One config file might contain multple configurations, identified title. title available first section config file used. user Force use user level config even config file exists current directory. default, local config files prioroty user level config. ... Passed yaml::yaml.load_file.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Load the package configuration from a config file — metaproviz_load_config","text":"Invisibly returns config list.","code":""},{"path":"/reference/metaproviz_load_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Load the package configuration from a config file — metaproviz_load_config","text":"","code":"if (FALSE) { # \\dontrun{ # load the config from a custom config file: metaproviz_load_config(path = 'my_custom_metaproviz_config.yml') } # }"},{"path":"/reference/metaproviz_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Browse the current MetaProViz log file — metaproviz_log","title":"Browse the current MetaProViz log file — metaproviz_log","text":"Browse current MetaProViz log file","code":""},{"path":"/reference/metaproviz_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Browse the current MetaProViz log file — metaproviz_log","text":"","code":"metaproviz_log()"},{"path":"/reference/metaproviz_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Browse the current MetaProViz log file — metaproviz_log","text":"Returns NULL.","code":""},{"path":[]},{"path":"/reference/metaproviz_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Browse the current MetaProViz log file — metaproviz_log","text":"","code":"if (FALSE) { # \\dontrun{ metaproviz_log() # then you can browse the log file, and exit with `q` } # }"},{"path":"/reference/metaproviz_logfile.html","id":null,"dir":"Reference","previous_headings":"","what":"Path to the current MetaProViz log file — metaproviz_logfile","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"Path current MetaProViz log file","code":""},{"path":"/reference/metaproviz_logfile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"","code":"metaproviz_logfile()"},{"path":"/reference/metaproviz_logfile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"Character: path current logfile, NULL logfile available.","code":""},{"path":[]},{"path":"/reference/metaproviz_logfile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Path to the current MetaProViz log file — metaproviz_logfile","text":"","code":"metaproviz_logfile() #> [1] \"C:\\\\Users\\\\chris\\\\OneDrive\\\\Documents\\\\GitHub\\\\MetaProViz\\\\metaproviz-log\\\\metaproviz-20241002-1248.log\" # [1] \"/home/denes/metaproviz/metaproviz-log/metaproviz-20210309-1642.log\""},{"path":"/reference/metaproviz_reset_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"Restore built-default values config parameters MetaProViz","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"metaproviz_reset_config(save = NULL, reset_all = FALSE)"},{"path":"/reference/metaproviz_reset_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"save path, restored config also saved file. TRUE, config saved current default config path (see metaproviz_config_path). reset_all Reset defaults also options already set R options.","code":""},{"path":"/reference/metaproviz_reset_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"config list.","code":""},{"path":[]},{"path":"/reference/metaproviz_reset_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Restore the built-in default values of all config parameters of MetaProViz — metaproviz_reset_config","text":"","code":"if (FALSE) { # \\dontrun{ # restore the defaults and write them to the default config file: metaproviz_reset_config() metaproviz_save_config() } # }"},{"path":"/reference/metaproviz_save_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Save the current package configuration — metaproviz_save_config","title":"Save the current package configuration — metaproviz_save_config","text":"Save current package configuration","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"metaproviz_save_config(path = NULL, title = \"default\", local = FALSE)"},{"path":"/reference/metaproviz_save_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save the current package configuration — metaproviz_save_config","text":"path Path config file. Directories file created exist. title Save config title. One config file might contain multiple configurations, identified title. local Save config file current directory instead user level config file. loading, config current directory priority user level config.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Save the current package configuration — metaproviz_save_config","text":"Returns NULL.","code":""},{"path":"/reference/metaproviz_save_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save the current package configuration — metaproviz_save_config","text":"","code":"if (FALSE) { # \\dontrun{ # after this, all downloads will default to commercial licenses # i.e. the resources that allow only academic use will be excluded: options(metaproviz.console_loglevel = 'trace') metaproviz_save_config() } # }"},{"path":"/reference/metaproviz_set_loglevel.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets the log level for the package logger — metaproviz_set_loglevel","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"Sets log level package logger","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"","code":"metaproviz_set_loglevel(level, target = \"logfile\")"},{"path":"/reference/metaproviz_set_loglevel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"level Character class loglevel. desired log level. target Character, either 'logfile' 'console'","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"Returns NULL.","code":""},{"path":"/reference/metaproviz_set_loglevel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sets the log level for the package logger — metaproviz_set_loglevel","text":"","code":"metaproviz_set_loglevel(logger::FATAL, target = 'console')"},{"path":"/reference/PoolEstimation.html","id":null,"dir":"Reference","previous_headings":"","what":"Description — PoolEstimation","title":"Description — PoolEstimation","text":"Description","code":""},{"path":"/reference/PoolEstimation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Description — PoolEstimation","text":"","code":"PoolEstimation(   InputData,   SettingsFile_Sample = NULL,   SettingsInfo = NULL,   CutoffCV = 100,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/PoolEstimation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Description — PoolEstimation","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. Can either full dataset dataset pool samples. SettingsFile_Sample Optional:  DF contains information samples full dataset inserted Input_data. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), exist.Default = NULL SettingsInfo Optional:  NULL Named vector including Conditions PoolSample information (Name Conditions column Name pooled samples Conditions Input_SettingsFile)  : c(Conditions=\"ColumnNameConditions, PoolSamples=NamePoolCondition. Conditions added Input_SettingsInfo, assumed conditions column named 'Conditions' Input_SettingsFile. ). Default = NULL CutoffCV Optional:  Filtering cutoff high variance metabolites using Coefficient Variation. Default = 1 SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" PrintPlot Optional:  TRUE prints overview resulting plots. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/PreProcessing.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies 80%-filtering rule, total-ion count normalization, missing value imputation and HotellingT2 outlier detection — PreProcessing","title":"Applies 80%-filtering rule, total-ion count normalization, missing value imputation and HotellingT2 outlier detection — PreProcessing","text":"Applies 80%-filtering rule, total-ion count normalization, missing value imputation HotellingT2 outlier detection","code":""},{"path":"/reference/PreProcessing.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies 80%-filtering rule, total-ion count normalization, missing value imputation and HotellingT2 outlier detection — PreProcessing","text":"","code":"PreProcessing(   InputData,   SettingsFile_Sample,   SettingsInfo,   FeatureFilt = \"Modified\",   FeatureFilt_Value = 0.8,   TIC = TRUE,   MVI = TRUE,   MVI_Percentage = 50,   HotellinsConfidence = 0.99,   CoRe = FALSE,   SaveAs_Plot = \"svg\",   SaveAs_Table = \"csv\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/PreProcessing.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies 80%-filtering rule, total-ion count normalization, missing value imputation and HotellingT2 outlier detection — PreProcessing","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers used rownames. SettingsInfo NULL Named vector containing information names experimental parameters. c(Conditions=\"ColumnName_Plot_SettingsFile\", Biological_Replicates=\"ColumnName_Plot_SettingsFile\"). Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"BiologicalReplicates\" including numerical values. CoRe = TRUE CoRe_norm_factor = \"Columnname_Input_SettingsFile\" CoRe_media = \"Columnname_Input_SettingsFile\", also added. Column CoRe_norm_factor used normalization CoRe_media used specify name media controls Conditions. FeatureFilt Optional: NULL, feature filtering performed. set \"Standard\" applies 80%-filtering rule (Bijlsma S. et al., 2006) metabolite features whole dataset. set \"Modified\",filtering done based different conditions, thus column named \"Conditions\" must provided Input_SettingsFile input file including individual conditions want apply filtering (Yang, J et al., 2015). Default = Modified FeatureFilt_Value Optional:  Percentage feature filtering. Default = 0.8 TIC Optional:  TRUE, Total Ion Count normalization performed. Default = TRUE MVI Optional:  TRUE, Missing Value Imputation (MVI) based half minimum performed Default = TRUE MVI_Percentage Optional:  Percentage 0-100 imputed value based minimum value. Default = 50 HotellinsConfidence Optional:  Defines Confidence Outlier identification HotellingT2 test. Must numeric.Default = 0.99 CoRe Optional:  TRUE, consumption-release experiment performed CoRe value calculated. Please consider providing Normalisation factor column called \"CoRe_norm_factor\" \"Input_SettingsFile\" DF, column \"Conditions\" matches. normalisation factor must numerical value obtained growth rate obtained growth curve growth factor obtained ratio cell count/protein quantification start point cell count/protein quantification end point.. Additionally control media samples available \"Input\" DF defined \"CoRe_media\" samples \"Conditions\" column \"Input_SettingsFile\" DF. Default = FALSE SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf. set NULL, plots saved. Default = svg SaveAs_Table Optional:  Select file type output table. Options \"csv\", \"xlsx\", \"txt\". set NULL, plots saved. Default = \"csv\" PrintPlot Optional:  TRUE prints overview resulting plots. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/ReplicateSum.html","id":null,"dir":"Reference","previous_headings":"","what":"Merges the analytical replicates of an experiment — ReplicateSum","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"Merges analytical replicates experiment","code":""},{"path":"/reference/ReplicateSum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"","code":"ReplicateSum(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Biological_Replicates =     \"Biological_Replicates\", Analytical_Replicates = \"Analytical_Replicates\"),   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/ReplicateSum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merges the analytical replicates of an experiment — ReplicateSum","text":"InputData DF contains unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. #@param SettingsFile_Sample DF contains information samples Column \"Conditions\", \"Biological_replicates\" \"Analytical_Replicates exist. SettingsInfo Optional:  Named vector including Conditions Replicates information: c(Conditions=\"ColumnNameConditions\", Biological_Replicates=\"ColumnName_SettingsFile_Sample\", Analytical_Replicates=\"ColumnName_SettingsFile_Sample\").Default = NULL SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\", ot NULL default: \"csv\" FolderPath Optional: Path folder results saved . default: NULL","code":""},{"path":"/reference/StandardORA.html","id":null,"dir":"Reference","previous_headings":"","what":"StandardORA — StandardORA","title":"StandardORA — StandardORA","text":"Uses enricher run ORA differential metabolites (DM) using pathway list","code":""},{"path":"/reference/StandardORA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"StandardORA — StandardORA","text":"","code":"StandardORA(   InputData,   SettingsInfo = c(pvalColumn = \"p.adj\", PercentageColumn = \"t.val\", PathwayTerm =     \"term\", PathwayFeature = \"Metabolite\"),   pCutoff = 0.05,   PercentageCutoff = 10,   PathwayFile,   PathwayName = \"\",   minGSSize = 10,   maxGSSize = 1000,   SaveAs_Table = \"csv\",   FolderPath = NULL )"},{"path":"/reference/StandardORA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"StandardORA — StandardORA","text":"InputData DF metabolite names/metabolite IDs row names. Metabolite names/IDs need match identifier type (e.g. HMDB IDs) PathwayFile. SettingsInfo Optional:  Pass ColumnName column including parameters use pCutoff PercentageCutoff. Also pass ColumnName PathwayFile including term feature names. (pvalColumn = ColumnName InputData, PercentageColumn= ColumnName InputData, PathwayTerm= ColumnName PathwayFile, PathwayFeature= ColumnName PathwayFile) c(pvalColumn=\"p.adj\", PercentageColumn=\"t.val\", PathwayTerm= \"term\", PathwayFeature= \"Metabolite\") pCutoff Optional:  p-adjusted value cutoff ORA results. Must numeric value. default: 0.05 PercentageCutoff Optional:  Percentage cutoff metabolites considered ORA. Selects Top/Bottom % selected PercentageColumn, usually t.val Log2FC default: 10 PathwayFile DF must include column \"term\" pathway name, column \"Metabolite\" Metabolite name ID column \"Description\" pathway description depicted plots. PathwayName Optional:  Name PathwayFile used default: \"\" minGSSize Optional:  minimum group size ORA default: 10 maxGSSize Optional:  maximum group size ORA default: 1000 FolderPath Optional: Path folder results saved . default: NULL Save_as_Results Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\" default: \"csv\"","code":""},{"path":"/reference/StandardORA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"StandardORA — StandardORA","text":"Saves results individual .csv files.","code":""},{"path":"/reference/ToyData.html","id":null,"dir":"Reference","previous_headings":"","what":"Access built-in example data — ToyData","title":"Access built-in example data — ToyData","text":"Import process .csv file create toy data.","code":""},{"path":"/reference/ToyData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Access built-in example data — ToyData","text":"","code":"ToyData(Dataset)"},{"path":"/reference/ToyData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Access built-in example data — ToyData","text":"Dataset Character: name built-dataset: \"IntraCells_Raw\": \"IntraCells_DMA\": \"CultureMedia_Raw\": \"Cells_MetaData\": \"Tissue_Norm\": \"Tissue_MetaData\": \"Tissue_DMA\": \"Tissue_DMA_Old\": \"Tissue_DMA_Young\":","code":""},{"path":"/reference/ToyData.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Access built-in example data — ToyData","text":"data frame containing toy data.","code":""},{"path":"/reference/ToyData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Access built-in example data — ToyData","text":"","code":"intra <- ToyData(\"IntraCells_Raw\")"},{"path":"/reference/TranslateID.html","id":null,"dir":"Reference","previous_headings":"","what":"Translate IDs — TranslateID","title":"Translate IDs — TranslateID","text":"Translate IDs KEGG, PubChem, Chebi.","code":""},{"path":"/reference/TranslateID.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translate IDs — TranslateID","text":"","code":"TranslateID(   Input_DataFrame,   SettingsInfo = list(IdColumn = \"MetaboliteID\", FromFormat = c(\"kegg\"), ToFormat =     c(\"pubchem\", \"chebi\", \"hmdb\"), Method = \"GetAll\", GroupingVariable = \"term\") )"},{"path":"/reference/TranslateID.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translate IDs — TranslateID","text":"Input_DataFrame Dataframe two columns source (=term) Target (=gene), e.g. Hallmarks. SettingsInfo Optional:   Column name Target Input_GeneSet. Default = list(IdColumn=\"MetaboliteID\", FromFormat=c(\"kegg\"), ToFormat=c(\"pubchem\",\"chebi\",\"hmdb\"), Method=\"GetAll\", GroupingVariable=\"term\") SaveAs_Table Optional:  File types analysis results : \"csv\", \"xlsx\", \"txt\". Default = \"csv\" FolderPath Optional: String added resulting folder name Default = NULL","code":""},{"path":"/reference/TranslateID.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translate IDs — TranslateID","text":"3 data frames: 1) Original data new column translated ids. 2) Mapping summary Original ID Translated. 3) Mapping summary Translated Original.","code":""},{"path":"/reference/VizHeatmap.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizHeatmap","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizHeatmap","text":"script allows perform different data visualizations using results MetaProViz analysis","code":""},{"path":"/reference/VizHeatmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizHeatmap","text":"","code":"VizHeatmap(   InputData,   SettingsInfo = NULL,   SettingsFile_Sample = NULL,   SettingsFile_Metab = NULL,   PlotName = \"\",   Scale = \"row\",   SaveAs_Plot = \"svg\",   Enforce_FeatureNames = FALSE,   Enforce_SampleNames = FALSE,   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizHeatmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizHeatmap","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. SettingsInfo Optional:  NULL Named vector  can include vectors lists annotation c(individual_Metab= \"ColumnName_SettingsFile_Metab\",individual_Sample= \"ColumnName_SettingsFile_Sample\", color_Metab=\"ColumnName_SettingsFile_Metab\", color_Sample= list(\"ColumnName_SettingsFile_Sample\", \"ColumnName_SettingsFile_Sample\",...)).Default = NULL SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers. columns required PlotSettingInfo.Default = NULL SettingsFile_Metab Optional:  DF column \"Metabolite\" including Metabolite names (needs match Metabolite names Input_data) columns required PlotSettingInfo. Default = NULL PlotName Optional:  String added output files plot Scale Optional:  String information Scale row, column none. Default = row SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" Enforce_FeatureNames Optional:  100 features rownames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE Enforce_SampleNames Optional:  50 sampless colnames shown, due readability. can Enforce setting parameter TRUE. Default = FALSE Folder_Name Optional: String added resulting folder name default: NULL","code":""},{"path":"/reference/VizPCA.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis — VizPCA","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis — VizPCA","text":"script allows perform PCA plot visualization using results MetaProViz analysis","code":""},{"path":"/reference/VizPCA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis — VizPCA","text":"","code":"VizPCA(   InputData,   SettingsInfo = NULL,   SettingsFile_Sample = NULL,   ColorPalette = NULL,   ColorScale = \"discrete\",   ShapePalette = NULL,   ShowLoadings = FALSE,   Scaling = TRUE,   Theme = NULL,   PlotName = \"\",   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizPCA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform PCA plot visualization using the results of the MetaProViz analysis — VizPCA","text":"SettingsInfo Optional:  NULL Named vector including least one three information : c(color=\"ColumnName_Plot_SettingsFile\", shape= \"ColumnName_Plot_SettingsFile\"). Default = NULL SettingsFile_Sample Optional:  DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\".Default = NULL ColorPalette Optional:  Provide customiced color-palette vector format. continuous scale use e.g. scale_color_gradient(low = \"#88CCEE\", high = \"red\") discrete scale c(\"#88CCEE\",  \"#DDCC77\",\"#661100\",  \"#332288\")Default = NULL ColorScale Optional:  Either \"continuous\" \"discrete\" colour scale. numeric integer can choose either, character choose discrete. Default = NULL ShapePalette Optional:  Provide customiced shape-palette vector format. Default = NULL ShowLoadings Optional:  TRUE FALSE whether PCA loadings also plotted PCA (biplot) Default = FALSE Scaling Optional:  TRUE FALSE whether data scaling used Default = TRUE Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. default=NULL use theme_classic(). Default = \"discrete\" PlotName Optional:  String added output files PCA Default = \"\" SaveAs_Plot Optional:  Select file type output plots. Options svg, png, pdf NULL. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE Volcano plot saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . default: NULL Input_data DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Use NA metabolites detected. includes experimental design outlier column.","code":""},{"path":"/reference/VizSuperplot.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis — VizSuperplot","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis — VizSuperplot","text":"script allows perform different visualizations (bar, box, violin plots) using results MetaProViz analysis","code":""},{"path":"/reference/VizSuperplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis — VizSuperplot","text":"","code":"VizSuperplot(   InputData,   SettingsFile_Sample,   SettingsInfo = c(Conditions = \"Conditions\", Superplot = NULL),   PlotType = \"Box\",   PlotName = \"\",   PlotConditions = NULL,   StatComparisons = NULL,   StatPval = NULL,   StatPadj = NULL,   xlab = NULL,   ylab = NULL,   Theme = NULL,   ColorPalette = NULL,   ColorPalette_Dot = NULL,   SaveAs_Plot = \"svg\",   PrintPlot = TRUE,   FolderPath = NULL )"},{"path":"/reference/VizSuperplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different visualizations (bar, box, violin plots) using the results of the MetaProViz analysis — VizSuperplot","text":"InputData DF unique sample identifiers row names metabolite numerical values columns metabolite identifiers column names. Includes experimental design outlier column. SettingsFile_Sample DF contains information samples, combined input data based unique sample identifiers used rownames. Column \"Conditions\" information sample conditions (e.g. \"N\" \"T\" \"Normal\" \"Tumor\"), can used feature filtering colour coding PCA. Column \"AnalyticalReplicate\" including numerical values, defines technical repetitions measurements, summarised. Column \"BiologicalReplicates\" including numerical values. Please use following names: \"Conditions\", \"Biological_Replicates\", \"Analytical_Replicates\". SettingsInfo Named vector including least information conditions column: c(Conditions=\"ColumnName_SettingsFile_Sample\"). Additionally Superplots can made adding Superplot =\"ColumnName_SettingsFile_Sample\", usually biological replicates patient IDs. Default = c(Conditions=\"Conditions\", Superplot = NULL) PlotType String information Graph style. Available options Bar. Box Violin  Default = Box PlotName Optional:  String added output files plot. PlotConditions Vector names selected Conditions plot. Can also used order Conditions way displayed x-axis plot. Default = NULL StatComparisons List numeric vectors containing Condition pairs compare based order PlotConditions vector. Default = NULL StatPval Optional:  String contains abbreviation selected test calculate p.value. one-vs-one comparisons choose t.test wilcox.test , one-vs--vs-comparison choose aov (=anova) kruskal.test Default = NULL StatPadj Optional:  String contains abbreviation selected p.adjusted test p.value correction multiple Hypothesis testing. Search: ?p.adjust methods:\"BH\", \"fdr\", \"bonferroni\", \"holm\", etc.Default = NULL xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL ColorPalette Optional:  Provide customized ColorPalette vector format. Default = NULL ColorPalette_Dot Optional:  Provide customized ColorPalette vector format. Default = NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = svg PrintPlot Optional:  TRUE FALSE, TRUE plots saved overview results. Default = TRUE FolderPath Optional: Path folder results saved . Default = NULL","code":""},{"path":"/reference/VizVolcano.html","id":null,"dir":"Reference","previous_headings":"","what":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizVolcano","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizVolcano","text":"script allows perform different data visualizations using results MetaProViz analysis","code":""},{"path":"/reference/VizVolcano.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizVolcano","text":"","code":"VizVolcano(   PlotSettings = \"Standard\",   InputData,   SettingsInfo = NULL,   SettingsFile_Metab = NULL,   InputData2 = NULL,   y = \"p.adj\",   x = \"Log2FC\",   xlab = NULL,   ylab = NULL,   xCutoff = 0.5,   yCutoff = 0.05,   Connectors = FALSE,   SelectLab = \"\",   PlotName = \"\",   Subtitle = \"\",   ComparisonName = c(InputData = \"Cond1\", InputData2 = \"Cond2\"),   ColorPalette = NULL,   ShapePalette = NULL,   Theme = NULL,   SaveAs_Plot = \"svg\",   FolderPath = NULL,   Features = \"Metabolites\",   PrintPlot = TRUE )"},{"path":"/reference/VizVolcano.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This script allows you to perform different data visualizations using the results of the MetaProViz analysis — VizVolcano","text":"SettingsInfo Optional:  NULL Named vector including least one three information Settings=\"Standard\" \"Compare\": c(color =\"ColumnName_SettingsFile_Metab\", shape = \"ColumnName_SettingsFile_Metab\", individual=\"ColumnName_SettingsFile_Metab\"). Settings=\"PEA\" named vector : PEA_Pathway=\"ColumnName_InputData2\"=pathway plotted, PEA_score=\"ColumnName_InputData2\", PEA_stat= \"ColumnName_InputData2\"= usually p.adj column, \"PEA_Feature=\"ColumnName_InputData2\"= usually Metabolites), optionally can additionally include c(color_Metab=\"ColumnName_SettingsFile_Metab\", shape= \"ColumnName_SettingsFile_Metab\").Default = NULL SettingsFile_Metab Optional:  DF column including Metabolite names (needs match Metabolite names Metabolite column name InputData) columns required PlotSettingInfo. Default = NULL InputData2 Optional:  DF compare main Input_data column names x y (Settings=\"Compare\") metabolites row names Pathway enrichment analysis results (Settings=\"PEA\"). Default = NULL y Optional:  Column name including values used y-axis. Usually include p.adjusted value. Default = \"p.adj\" x Optional:  Column name including values used x-axis. Usually include Log2FC value. Default = \"Log2FC\" xlab Optional:  String replace x-axis label plot. Default = NULL ylab Optional:  String replace y-axis label plot. Default = NULL xCutoff Optional:  Number desired log fold change cutoff assessing significance. Default = 0.5 yCutoff Optional:  Number desired p value cutoff assessing significance. Default = 0.05 Connectors Optional:  TRUE FALSE whether Connectors names points added plot. Default =  FALSE SelectLab Optional:  set NULL, feature labels plotted randomly. vector provided, e.g. c(\"MetaboliteName1\", \"MetaboliteName2\"), selected names plotted. set default \"\", feature names plotted. Default = \"\" PlotName Optional:  String added output files plot. Default = \"\" Subtitle Optional:  Default = \"\" ComparisonName Optional:  Named vector including information two datasets compared plots choosing Settings= \"Compare\". Default = c(InputData=\"Cond1\", InputData2= \"Cond2\") ColorPalette Optional:  Provide customiced color-palette vector format. Default = NULL ShapePalette Optional:  Provide customiced shape-palette vector format. Default = NULL Theme Optional:  Selection theme plot, e.g. theme_grey(). can check complete themes : https://ggplot2.tidyverse.org/reference/ggtheme.html. Default = NULL SaveAs_Plot Optional:  Select file type output plots. Options svg, pdf, png NULL. Default = \"svg\" FolderPath Optional: Path folder results saved . default: NULL Features Optional:  Name features plotted, e.g. \"Metabolites\", \"RNA\", \"Proteins\", \"Genes\", etc. Default = \"metabolites\" Settings Optional:  Choose \"Standard\" (InputData), \"Compare\" (plot two comparisons together InputData InputData2) \"PEA\" (Pathway Enrichment Analysis) Default = \"Standard\" Input_data DF metabolites row names columns including Log2FC stat (p-value, p.adjusted) value columns. FeatureID Optional:  Column name including feature names, e.g. metabolite names. Default = \"Metabolite\"","code":""}]
