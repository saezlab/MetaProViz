% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RefactorPriorKnoweldge.R
\name{compare_pk}
\alias{compare_pk}
\title{Compare Prior Knowledge Resources and/or Columns within a Single Resource and Generate an UpSet Plot}
\usage{
compare_pk(
  data,
  metadata_info = NULL,
  filter_by = c("both", "gene", "metabolite"),
  plot_title = "Overlap of Prior Knowledge Resources",
  name_col = "TrivialName",
  palette_type = "polychrome",
  output_file = NULL
)
}
\arguments{
\item{data}{A named list where each element corresponds to a prior knowledge (PK) resource. Each element can be:
\itemize{
\item A data frame containing gene/metabolite identifiers (and additional columns for within-resource comparison),
\item A character string indicating the resource name. Recognized names include (but are not limited to): \code{"Hallmarks"},
\code{"Gaude"}, \code{"MetalinksDB"}, and \code{"RAMP"} (or \code{"metsigdb_chemicalclass"}). In the latter case, the function
will attempt to load the corresponding data automatically.
}}

\item{metadata_info}{A named list (with names matching those in \code{data}) where each element is either a character string or a
character vector indicating the column name(s) to extract features. For multiple-resource comparisons, these refer to the columns
containing feature identifiers. For within-resource comparisons, the vector should list the columns to compare (e.g., \code{c("CHEBI", "HMDB", "LIMID")}).
In within-resource mode, the input data frame is expected to contain a column named \code{"Class"} (or a grouping column specified via the
\code{class_col} attribute). \emph{If no grouping column is found, a default grouping column named \code{"Group"} (with all rows assigned the same value) is created.}}

\item{filter_by}{Character. Optional filter for the resulting features when comparing multiple resources.
Options are: \code{"both"} (default), \code{"gene"}, or \code{"metabolite"}. This parameter is ignored in within-resource mode.}

\item{plot_title}{Character. Title for the UpSet plot. Default is \code{"Overlap of Prior Knowledge Resources"}.}

\item{palette_type}{Character. Color palette to be used in the plot. Default is \code{"polychrome"}.}

\item{output_file}{Character. Optional file path to save the generated plot; if \code{NULL}, the plot is not saved.}
}
\value{
A list containing two elements: \itemize{
\item{summary_table: A data frame representing either:
\itemize{
\item{the binary summary matrix of feature presence/absence across
multiple resources, or}
\item{the original data frame (augmented with binary columns and a
\code{None} column) in within-resource mode.}
}
}
\item{upset_plot: The UpSet plot object generated by the function.}
}
}
\description{
This function compares gene and/or metabolite features across multiple prior knowledge (PK) resources or,
if a single resource is provided with a vector of column names in \code{metadata_info}, compares columns within that resource.
}
\details{
In the multi-resource mode, each element in \code{data} represents a PK resource (either as a data frame or a recognized resource name)
from which a set of features is extracted. A binary summary table is then constructed and used to create an UpSet plot.

In the within-resource mode, a single data frame is provided (with \code{data} containing one element) and its \code{metadata_info} entry
is a vector of column names to compare (e.g., binary indicators for different annotations). In this case, the function expects the data frame
to have a grouping column named \code{"Class"} (or, alternatively, a column specified via the \code{class_col} attribute in \code{metadata_info})
that is used for grouping in the UpSet plot.
}
\examples{
## Example 1: Multi-Resource Comparison

# Using automatic data loading for multiple resources.
data <- list(Hallmarks = "Hallmarks", Gaude = "Gaude",
                MetalinksDB = "MetalinksDB", RAMP = "metsigdb_chemicalclass")
res <- compare_pk(data = data)

# Filtering to include only gene features:
res_genes <- compare_pk(data = data, filter_by = "gene")

## Example 2: Within-Resource Comparison (Comparing Columns Within a Single data Frame)

# Assume FeatureMetadata_Biocrates is a data frame with columns: "TrivialName", "CHEBI", "HMDB", "LIMID", and "Class".
# Here the "Class" column is used as the grouping variable in the UpSet plot.
data_single <- list(Biocft = FeatureMetadata_Biocrates)
metadata_info_single <- list(Biocft = c("CHEBI", "HMDB", "LIMID"))

res_single <- compare_pk(data = data_single, metadata_info = metadata_info_single,
                          plot_title = "Overlap of BioCrates Columns")

## Example 3: Custom data Frames with Custom Column Names

# Example with preloaded data frames and custom column names:
hallmarks_df <- data.frame(feature = c("HMDB0001", "GENE1", "GENE2"), stringsAsFactors = FALSE)
gaude_df <- data.frame(feature = c("GENE2", "GENE3"), stringsAsFactors = FALSE)
metalinks_df <- data.frame(hmdb = c("HMDB0001", "HMDB0002"),
                           gene_symbol = c("GENE1", "GENE4"), stringsAsFactors = FALSE)
ramp_df <- data.frame(class_source_id = c("HMDB0001", "HMDB0003"), stringsAsFactors = FALSE)
data <- list(Hallmarks = hallmarks_df, Gaude = gaude_df,
                MetalinksDB = metalinks_df, RAMP = ramp_df)
metadata_info <- list(Hallmarks = "feature", Gaude = "feature",
                     MetalinksDB = c("hmdb", "gene_symbol"), RAMP = "class_source_id")
res <- compare_pk(data = data, metadata_info = metadata_info, filter_by = "metabolite")

}
